// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "omnibase.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* M3OmnibaseStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3OmnibaseStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3OmnibaseParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3OmnibaseParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3OmnibaseCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3OmnibaseCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3OmniVia_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3OmniVia_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OMNIBASE_CTRL_MODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OMNIBASE_CASTER_MODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OMNIBASE_TRAJ_MODE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_omnibase_2eproto() {
  protobuf_AddDesc_omnibase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "omnibase.proto");
  GOOGLE_CHECK(file != NULL);
  M3OmnibaseStatus_descriptor_ = file->message_type(0);
  static const int M3OmnibaseStatus_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, calibrated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, global_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, global_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, local_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, roll_torque_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, steer_torque_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, steer_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, steer_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, roll_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, roll_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, local_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, local_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, motor_torque_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, local_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, position_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, velocity_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, acceleration_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, traj_goal_reached_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, bus_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, position_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, velocity_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, motor_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, roll_torque_internal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, steer_torque_internal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, truss_vel_),
  };
  M3OmnibaseStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3OmnibaseStatus_descriptor_,
      M3OmnibaseStatus::default_instance_,
      M3OmnibaseStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3OmnibaseStatus));
  M3OmnibaseParam_descriptor_ = file->message_type(1);
  static const int M3OmnibaseParam_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseParam, enable_breakbeam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseParam, ks_i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseParam, ks_i_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseParam, ks_i_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseParam, ks_p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseParam, ks_d_),
  };
  M3OmnibaseParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3OmnibaseParam_descriptor_,
      M3OmnibaseParam::default_instance_,
      M3OmnibaseParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3OmnibaseParam));
  M3OmnibaseCommand_descriptor_ = file->message_type(2);
  static const int M3OmnibaseCommand_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, ctrl_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, traj_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, roll_torque_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, opspace_force_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, local_position_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, local_velocity_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, local_acceleration_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, global_position_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, global_velocity_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, global_acceleration_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, steer_torque_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, joystick_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, joystick_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, joystick_yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, steer_velocity_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, roll_velocity_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, joystick_button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, caster_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, traj_goal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, global_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, local_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, adjust_local_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, adjust_global_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, vias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, max_linear_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, max_rotation_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, max_linear_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, max_rotation_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, steer_theta_desired_),
  };
  M3OmnibaseCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3OmnibaseCommand_descriptor_,
      M3OmnibaseCommand::default_instance_,
      M3OmnibaseCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3OmnibaseCommand));
  M3OmniVia_descriptor_ = file->message_type(3);
  static const int M3OmniVia_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmniVia, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmniVia, position_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmniVia, lin_velocity_avg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmniVia, ang_velocity_avg_),
  };
  M3OmniVia_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3OmniVia_descriptor_,
      M3OmniVia::default_instance_,
      M3OmniVia_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmniVia, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmniVia, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3OmniVia));
  OMNIBASE_CTRL_MODE_descriptor_ = file->enum_type(0);
  OMNIBASE_CASTER_MODE_descriptor_ = file->enum_type(1);
  OMNIBASE_TRAJ_MODE_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_omnibase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3OmnibaseStatus_descriptor_, &M3OmnibaseStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3OmnibaseParam_descriptor_, &M3OmnibaseParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3OmnibaseCommand_descriptor_, &M3OmnibaseCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3OmniVia_descriptor_, &M3OmniVia::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_omnibase_2eproto() {
  delete M3OmnibaseStatus::default_instance_;
  delete M3OmnibaseStatus_reflection_;
  delete M3OmnibaseParam::default_instance_;
  delete M3OmnibaseParam_reflection_;
  delete M3OmnibaseCommand::default_instance_;
  delete M3OmnibaseCommand_reflection_;
  delete M3OmniVia::default_instance_;
  delete M3OmniVia_reflection_;
}

void protobuf_AddDesc_omnibase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_component_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016omnibase.proto\032\024component_base.proto\"\240"
    "\005\n\020M3OmnibaseStatus\022\033\n\004base\030\001 \001(\0132\r.M3Ba"
    "seStatus\022\022\n\ncalibrated\030\002 \003(\005\022\027\n\017global_p"
    "osition\030\003 \003(\001\022\027\n\017global_velocity\030\004 \003(\001\022\026"
    "\n\016local_velocity\030\005 \003(\001\022\033\n\023roll_torque_de"
    "sired\030\006 \003(\001\022\034\n\024steer_torque_desired\030\007 \003("
    "\001\022\023\n\013steer_angle\030\010 \003(\001\022\026\n\016steer_velocity"
    "\030\t \003(\001\022\022\n\nroll_angle\030\n \003(\001\022\025\n\rroll_veloc"
    "ity\030\013 \003(\001\022\023\n\013local_force\030\014 \003(\001\022\032\n\022local_"
    "acceleration\030\r \003(\001\022\034\n\024motor_torque_desir"
    "ed\030\016 \003(\001\022\026\n\016local_position\030\017 \003(\001\022\030\n\020posi"
    "tion_desired\030\020 \003(\001\022\030\n\020velocity_desired\030\021"
    " \003(\001\022\034\n\024acceleration_desired\030\022 \003(\001\022\031\n\021tr"
    "aj_goal_reached\030\023 \001(\005\022\023\n\013bus_voltage\030\024 \001"
    "(\001\022\026\n\016position_error\030\025 \003(\001\022\026\n\016velocity_e"
    "rror\030\026 \003(\001\022\025\n\rmotor_current\030\027 \003(\001\022\034\n\024rol"
    "l_torque_internal\030\030 \003(\001\022\035\n\025steer_torque_"
    "internal\030\031 \003(\001\022\021\n\ttruss_vel\030\032 \003(\001\"}\n\017M3O"
    "mnibaseParam\022\030\n\020enable_breakbeam\030\001 \003(\005\022\014"
    "\n\004ks_i\030\002 \001(\001\022\022\n\nks_i_limit\030\003 \001(\001\022\022\n\nks_i"
    "_range\030\004 \001(\001\022\014\n\004ks_p\030\005 \001(\001\022\014\n\004ks_d\030\006 \001(\001"
    "\"\204\007\n\021M3OmnibaseCommand\022&\n\tctrl_mode\030\001 \001("
    "\0162\023.OMNIBASE_CTRL_MODE\022&\n\ttraj_mode\030\002 \001("
    "\0162\023.OMNIBASE_TRAJ_MODE\022\033\n\023roll_torque_de"
    "sired\030\003 \003(\001\022\035\n\025opspace_force_desired\030\004 \003"
    "(\001\022\036\n\026local_position_desired\030\005 \003(\001\022\036\n\026lo"
    "cal_velocity_desired\030\006 \003(\001\022\"\n\032local_acce"
    "leration_desired\030\007 \003(\001\022\037\n\027global_positio"
    "n_desired\030\010 \003(\001\022\037\n\027global_velocity_desir"
    "ed\030\t \003(\001\022#\n\033global_acceleration_desired\030"
    "\n \003(\001\022\034\n\024steer_torque_desired\030\013 \003(\001\022\022\n\nj"
    "oystick_x\030\014 \001(\001\022\022\n\njoystick_y\030\r \001(\001\022\024\n\014j"
    "oystick_yaw\030\016 \001(\001\022\036\n\026steer_velocity_desi"
    "red\030\017 \003(\001\022\035\n\025roll_velocity_desired\030\020 \003(\001"
    "\022\027\n\017joystick_button\030\021 \001(\005\022*\n\013caster_mode"
    "\030\023 \003(\0162\025.OMNIBASE_CASTER_MODE\022\021\n\ttraj_go"
    "al\030\024 \003(\001\022\027\n\017global_position\030\025 \003(\001\022\026\n\016loc"
    "al_position\030\026 \003(\001\022\035\n\025adjust_local_positi"
    "on\030\027 \001(\005\022\036\n\026adjust_global_position\030\030 \001(\005"
    "\022\030\n\004vias\030\031 \003(\0132\n.M3OmniVia\022\033\n\023max_linear"
    "_velocity\030\032 \001(\001\022\035\n\025max_rotation_velocity"
    "\030\033 \001(\001\022\037\n\027max_linear_acceleration\030\034 \001(\001\022"
    "!\n\031max_rotation_acceleration\030\035 \001(\001\022\033\n\023st"
    "eer_theta_desired\030\036 \003(\001\"f\n\tM3OmniVia\022\013\n\003"
    "idx\030\001 \001(\005\022\030\n\020position_desired\030\002 \003(\001\022\030\n\020l"
    "in_velocity_avg\030\003 \001(\001\022\030\n\020ang_velocity_av"
    "g\030\004 \001(\001*\340\001\n\022OMNIBASE_CTRL_MODE\022\025\n\021OMNIBA"
    "SE_CTRL_OFF\020\000\022\033\n\027OMNIBASE_CTRL_CALIBRATE"
    "\020\001\022\030\n\024OMNIBASE_CTRL_CASTER\020\002\022\037\n\033OMNIBASE"
    "_CTRL_OPSPACE_FORCE\020\003\022\036\n\032OMNIBASE_CTRL_O"
    "PSPACE_TRAJ\020\004\022\034\n\030OMNIBASE_CTRL_CART_LOCA"
    "L\020\005\022\035\n\031OMNIBASE_CTRL_CART_GLOBAL\020\006*\204\001\n\024O"
    "MNIBASE_CASTER_MODE\022\027\n\023OMNIBASE_CASTER_O"
    "FF\020\000\022\032\n\026OMNIBASE_CASTER_TORQUE\020\001\022\034\n\030OMNI"
    "BASE_CASTER_VELOCITY\020\002\022\031\n\025OMNIBASE_CASTE"
    "R_THETA\020\003*w\n\022OMNIBASE_TRAJ_MODE\022\025\n\021OMNIB"
    "ASE_TRAJ_OFF\020\000\022\032\n\026OMNIBASE_TRAJ_JOYSTICK"
    "\020\001\022\026\n\022OMNIBASE_TRAJ_GOAL\020\002\022\026\n\022OMNIBASE_T"
    "RAJ_VIAS\020\003B\002H\001", 2334);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "omnibase.proto", &protobuf_RegisterTypes);
  M3OmnibaseStatus::default_instance_ = new M3OmnibaseStatus();
  M3OmnibaseParam::default_instance_ = new M3OmnibaseParam();
  M3OmnibaseCommand::default_instance_ = new M3OmnibaseCommand();
  M3OmniVia::default_instance_ = new M3OmniVia();
  M3OmnibaseStatus::default_instance_->InitAsDefaultInstance();
  M3OmnibaseParam::default_instance_->InitAsDefaultInstance();
  M3OmnibaseCommand::default_instance_->InitAsDefaultInstance();
  M3OmniVia::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_omnibase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_omnibase_2eproto {
  StaticDescriptorInitializer_omnibase_2eproto() {
    protobuf_AddDesc_omnibase_2eproto();
  }
} static_descriptor_initializer_omnibase_2eproto_;

const ::google::protobuf::EnumDescriptor* OMNIBASE_CTRL_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OMNIBASE_CTRL_MODE_descriptor_;
}
bool OMNIBASE_CTRL_MODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OMNIBASE_CASTER_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OMNIBASE_CASTER_MODE_descriptor_;
}
bool OMNIBASE_CASTER_MODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OMNIBASE_TRAJ_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OMNIBASE_TRAJ_MODE_descriptor_;
}
bool OMNIBASE_TRAJ_MODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int M3OmnibaseStatus::kBaseFieldNumber;
const int M3OmnibaseStatus::kCalibratedFieldNumber;
const int M3OmnibaseStatus::kGlobalPositionFieldNumber;
const int M3OmnibaseStatus::kGlobalVelocityFieldNumber;
const int M3OmnibaseStatus::kLocalVelocityFieldNumber;
const int M3OmnibaseStatus::kRollTorqueDesiredFieldNumber;
const int M3OmnibaseStatus::kSteerTorqueDesiredFieldNumber;
const int M3OmnibaseStatus::kSteerAngleFieldNumber;
const int M3OmnibaseStatus::kSteerVelocityFieldNumber;
const int M3OmnibaseStatus::kRollAngleFieldNumber;
const int M3OmnibaseStatus::kRollVelocityFieldNumber;
const int M3OmnibaseStatus::kLocalForceFieldNumber;
const int M3OmnibaseStatus::kLocalAccelerationFieldNumber;
const int M3OmnibaseStatus::kMotorTorqueDesiredFieldNumber;
const int M3OmnibaseStatus::kLocalPositionFieldNumber;
const int M3OmnibaseStatus::kPositionDesiredFieldNumber;
const int M3OmnibaseStatus::kVelocityDesiredFieldNumber;
const int M3OmnibaseStatus::kAccelerationDesiredFieldNumber;
const int M3OmnibaseStatus::kTrajGoalReachedFieldNumber;
const int M3OmnibaseStatus::kBusVoltageFieldNumber;
const int M3OmnibaseStatus::kPositionErrorFieldNumber;
const int M3OmnibaseStatus::kVelocityErrorFieldNumber;
const int M3OmnibaseStatus::kMotorCurrentFieldNumber;
const int M3OmnibaseStatus::kRollTorqueInternalFieldNumber;
const int M3OmnibaseStatus::kSteerTorqueInternalFieldNumber;
const int M3OmnibaseStatus::kTrussVelFieldNumber;
#endif  // !_MSC_VER

M3OmnibaseStatus::M3OmnibaseStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3OmnibaseStatus::InitAsDefaultInstance() {
  base_ = const_cast< ::M3BaseStatus*>(&::M3BaseStatus::default_instance());
}

M3OmnibaseStatus::M3OmnibaseStatus(const M3OmnibaseStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3OmnibaseStatus::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  traj_goal_reached_ = 0;
  bus_voltage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3OmnibaseStatus::~M3OmnibaseStatus() {
  SharedDtor();
}

void M3OmnibaseStatus::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void M3OmnibaseStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3OmnibaseStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3OmnibaseStatus_descriptor_;
}

const M3OmnibaseStatus& M3OmnibaseStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_omnibase_2eproto();  return *default_instance_;
}

M3OmnibaseStatus* M3OmnibaseStatus::default_instance_ = NULL;

M3OmnibaseStatus* M3OmnibaseStatus::New() const {
  return new M3OmnibaseStatus;
}

void M3OmnibaseStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::M3BaseStatus::Clear();
    }
  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    traj_goal_reached_ = 0;
    bus_voltage_ = 0;
  }
  calibrated_.Clear();
  global_position_.Clear();
  global_velocity_.Clear();
  local_velocity_.Clear();
  roll_torque_desired_.Clear();
  steer_torque_desired_.Clear();
  steer_angle_.Clear();
  steer_velocity_.Clear();
  roll_angle_.Clear();
  roll_velocity_.Clear();
  local_force_.Clear();
  local_acceleration_.Clear();
  motor_torque_desired_.Clear();
  local_position_.Clear();
  position_desired_.Clear();
  velocity_desired_.Clear();
  acceleration_desired_.Clear();
  position_error_.Clear();
  velocity_error_.Clear();
  motor_current_.Clear();
  roll_torque_internal_.Clear();
  steer_torque_internal_.Clear();
  truss_vel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3OmnibaseStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseStatus base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_calibrated;
        break;
      }
      
      // repeated int32 calibrated = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_calibrated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_calibrated())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_calibrated())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_calibrated;
        if (input->ExpectTag(25)) goto parse_global_position;
        break;
      }
      
      // repeated double global_position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_global_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_global_position())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_global_position())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_global_position;
        if (input->ExpectTag(33)) goto parse_global_velocity;
        break;
      }
      
      // repeated double global_velocity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_global_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_global_velocity())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_global_velocity())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_global_velocity;
        if (input->ExpectTag(41)) goto parse_local_velocity;
        break;
      }
      
      // repeated double local_velocity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_local_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_local_velocity())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_local_velocity())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_local_velocity;
        if (input->ExpectTag(49)) goto parse_roll_torque_desired;
        break;
      }
      
      // repeated double roll_torque_desired = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_roll_torque_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49, input, this->mutable_roll_torque_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_roll_torque_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_roll_torque_desired;
        if (input->ExpectTag(57)) goto parse_steer_torque_desired;
        break;
      }
      
      // repeated double steer_torque_desired = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steer_torque_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57, input, this->mutable_steer_torque_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_steer_torque_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_steer_torque_desired;
        if (input->ExpectTag(65)) goto parse_steer_angle;
        break;
      }
      
      // repeated double steer_angle = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steer_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 65, input, this->mutable_steer_angle())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_steer_angle())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_steer_angle;
        if (input->ExpectTag(73)) goto parse_steer_velocity;
        break;
      }
      
      // repeated double steer_velocity = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steer_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 73, input, this->mutable_steer_velocity())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_steer_velocity())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_steer_velocity;
        if (input->ExpectTag(81)) goto parse_roll_angle;
        break;
      }
      
      // repeated double roll_angle = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_roll_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 81, input, this->mutable_roll_angle())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_roll_angle())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_roll_angle;
        if (input->ExpectTag(89)) goto parse_roll_velocity;
        break;
      }
      
      // repeated double roll_velocity = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_roll_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 89, input, this->mutable_roll_velocity())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_roll_velocity())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_roll_velocity;
        if (input->ExpectTag(97)) goto parse_local_force;
        break;
      }
      
      // repeated double local_force = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_local_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 97, input, this->mutable_local_force())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_local_force())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_local_force;
        if (input->ExpectTag(105)) goto parse_local_acceleration;
        break;
      }
      
      // repeated double local_acceleration = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_local_acceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 105, input, this->mutable_local_acceleration())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_local_acceleration())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_local_acceleration;
        if (input->ExpectTag(113)) goto parse_motor_torque_desired;
        break;
      }
      
      // repeated double motor_torque_desired = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_motor_torque_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 113, input, this->mutable_motor_torque_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_motor_torque_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_motor_torque_desired;
        if (input->ExpectTag(121)) goto parse_local_position;
        break;
      }
      
      // repeated double local_position = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_local_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 121, input, this->mutable_local_position())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_local_position())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_local_position;
        if (input->ExpectTag(129)) goto parse_position_desired;
        break;
      }
      
      // repeated double position_desired = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_position_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 129, input, this->mutable_position_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_position_desired;
        if (input->ExpectTag(137)) goto parse_velocity_desired;
        break;
      }
      
      // repeated double velocity_desired = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_velocity_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 137, input, this->mutable_velocity_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_velocity_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_velocity_desired;
        if (input->ExpectTag(145)) goto parse_acceleration_desired;
        break;
      }
      
      // repeated double acceleration_desired = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_acceleration_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 145, input, this->mutable_acceleration_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_acceleration_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_acceleration_desired;
        if (input->ExpectTag(152)) goto parse_traj_goal_reached;
        break;
      }
      
      // optional int32 traj_goal_reached = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_traj_goal_reached:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &traj_goal_reached_)));
          set_has_traj_goal_reached();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_bus_voltage;
        break;
      }
      
      // optional double bus_voltage = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bus_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bus_voltage_)));
          set_has_bus_voltage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_position_error;
        break;
      }
      
      // repeated double position_error = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_position_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 169, input, this->mutable_position_error())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position_error())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_position_error;
        if (input->ExpectTag(177)) goto parse_velocity_error;
        break;
      }
      
      // repeated double velocity_error = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_velocity_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 177, input, this->mutable_velocity_error())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_velocity_error())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_velocity_error;
        if (input->ExpectTag(185)) goto parse_motor_current;
        break;
      }
      
      // repeated double motor_current = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_motor_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 185, input, this->mutable_motor_current())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_motor_current())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_motor_current;
        if (input->ExpectTag(193)) goto parse_roll_torque_internal;
        break;
      }
      
      // repeated double roll_torque_internal = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_roll_torque_internal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 193, input, this->mutable_roll_torque_internal())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_roll_torque_internal())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_roll_torque_internal;
        if (input->ExpectTag(201)) goto parse_steer_torque_internal;
        break;
      }
      
      // repeated double steer_torque_internal = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steer_torque_internal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 201, input, this->mutable_steer_torque_internal())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_steer_torque_internal())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_steer_torque_internal;
        if (input->ExpectTag(209)) goto parse_truss_vel;
        break;
      }
      
      // repeated double truss_vel = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_truss_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 209, input, this->mutable_truss_vel())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_truss_vel())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_truss_vel;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3OmnibaseStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // repeated int32 calibrated = 2;
  for (int i = 0; i < this->calibrated_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->calibrated(i), output);
  }
  
  // repeated double global_position = 3;
  for (int i = 0; i < this->global_position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->global_position(i), output);
  }
  
  // repeated double global_velocity = 4;
  for (int i = 0; i < this->global_velocity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->global_velocity(i), output);
  }
  
  // repeated double local_velocity = 5;
  for (int i = 0; i < this->local_velocity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->local_velocity(i), output);
  }
  
  // repeated double roll_torque_desired = 6;
  for (int i = 0; i < this->roll_torque_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->roll_torque_desired(i), output);
  }
  
  // repeated double steer_torque_desired = 7;
  for (int i = 0; i < this->steer_torque_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->steer_torque_desired(i), output);
  }
  
  // repeated double steer_angle = 8;
  for (int i = 0; i < this->steer_angle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      8, this->steer_angle(i), output);
  }
  
  // repeated double steer_velocity = 9;
  for (int i = 0; i < this->steer_velocity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      9, this->steer_velocity(i), output);
  }
  
  // repeated double roll_angle = 10;
  for (int i = 0; i < this->roll_angle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      10, this->roll_angle(i), output);
  }
  
  // repeated double roll_velocity = 11;
  for (int i = 0; i < this->roll_velocity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      11, this->roll_velocity(i), output);
  }
  
  // repeated double local_force = 12;
  for (int i = 0; i < this->local_force_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      12, this->local_force(i), output);
  }
  
  // repeated double local_acceleration = 13;
  for (int i = 0; i < this->local_acceleration_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      13, this->local_acceleration(i), output);
  }
  
  // repeated double motor_torque_desired = 14;
  for (int i = 0; i < this->motor_torque_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      14, this->motor_torque_desired(i), output);
  }
  
  // repeated double local_position = 15;
  for (int i = 0; i < this->local_position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      15, this->local_position(i), output);
  }
  
  // repeated double position_desired = 16;
  for (int i = 0; i < this->position_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      16, this->position_desired(i), output);
  }
  
  // repeated double velocity_desired = 17;
  for (int i = 0; i < this->velocity_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      17, this->velocity_desired(i), output);
  }
  
  // repeated double acceleration_desired = 18;
  for (int i = 0; i < this->acceleration_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      18, this->acceleration_desired(i), output);
  }
  
  // optional int32 traj_goal_reached = 19;
  if (has_traj_goal_reached()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->traj_goal_reached(), output);
  }
  
  // optional double bus_voltage = 20;
  if (has_bus_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->bus_voltage(), output);
  }
  
  // repeated double position_error = 21;
  for (int i = 0; i < this->position_error_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      21, this->position_error(i), output);
  }
  
  // repeated double velocity_error = 22;
  for (int i = 0; i < this->velocity_error_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      22, this->velocity_error(i), output);
  }
  
  // repeated double motor_current = 23;
  for (int i = 0; i < this->motor_current_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      23, this->motor_current(i), output);
  }
  
  // repeated double roll_torque_internal = 24;
  for (int i = 0; i < this->roll_torque_internal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      24, this->roll_torque_internal(i), output);
  }
  
  // repeated double steer_torque_internal = 25;
  for (int i = 0; i < this->steer_torque_internal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      25, this->steer_torque_internal(i), output);
  }
  
  // repeated double truss_vel = 26;
  for (int i = 0; i < this->truss_vel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      26, this->truss_vel(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3OmnibaseStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // repeated int32 calibrated = 2;
  for (int i = 0; i < this->calibrated_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->calibrated(i), target);
  }
  
  // repeated double global_position = 3;
  for (int i = 0; i < this->global_position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->global_position(i), target);
  }
  
  // repeated double global_velocity = 4;
  for (int i = 0; i < this->global_velocity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->global_velocity(i), target);
  }
  
  // repeated double local_velocity = 5;
  for (int i = 0; i < this->local_velocity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->local_velocity(i), target);
  }
  
  // repeated double roll_torque_desired = 6;
  for (int i = 0; i < this->roll_torque_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(6, this->roll_torque_desired(i), target);
  }
  
  // repeated double steer_torque_desired = 7;
  for (int i = 0; i < this->steer_torque_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(7, this->steer_torque_desired(i), target);
  }
  
  // repeated double steer_angle = 8;
  for (int i = 0; i < this->steer_angle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(8, this->steer_angle(i), target);
  }
  
  // repeated double steer_velocity = 9;
  for (int i = 0; i < this->steer_velocity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(9, this->steer_velocity(i), target);
  }
  
  // repeated double roll_angle = 10;
  for (int i = 0; i < this->roll_angle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(10, this->roll_angle(i), target);
  }
  
  // repeated double roll_velocity = 11;
  for (int i = 0; i < this->roll_velocity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(11, this->roll_velocity(i), target);
  }
  
  // repeated double local_force = 12;
  for (int i = 0; i < this->local_force_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(12, this->local_force(i), target);
  }
  
  // repeated double local_acceleration = 13;
  for (int i = 0; i < this->local_acceleration_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(13, this->local_acceleration(i), target);
  }
  
  // repeated double motor_torque_desired = 14;
  for (int i = 0; i < this->motor_torque_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(14, this->motor_torque_desired(i), target);
  }
  
  // repeated double local_position = 15;
  for (int i = 0; i < this->local_position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(15, this->local_position(i), target);
  }
  
  // repeated double position_desired = 16;
  for (int i = 0; i < this->position_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(16, this->position_desired(i), target);
  }
  
  // repeated double velocity_desired = 17;
  for (int i = 0; i < this->velocity_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(17, this->velocity_desired(i), target);
  }
  
  // repeated double acceleration_desired = 18;
  for (int i = 0; i < this->acceleration_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(18, this->acceleration_desired(i), target);
  }
  
  // optional int32 traj_goal_reached = 19;
  if (has_traj_goal_reached()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->traj_goal_reached(), target);
  }
  
  // optional double bus_voltage = 20;
  if (has_bus_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->bus_voltage(), target);
  }
  
  // repeated double position_error = 21;
  for (int i = 0; i < this->position_error_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(21, this->position_error(i), target);
  }
  
  // repeated double velocity_error = 22;
  for (int i = 0; i < this->velocity_error_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(22, this->velocity_error(i), target);
  }
  
  // repeated double motor_current = 23;
  for (int i = 0; i < this->motor_current_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(23, this->motor_current(i), target);
  }
  
  // repeated double roll_torque_internal = 24;
  for (int i = 0; i < this->roll_torque_internal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(24, this->roll_torque_internal(i), target);
  }
  
  // repeated double steer_torque_internal = 25;
  for (int i = 0; i < this->steer_torque_internal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(25, this->steer_torque_internal(i), target);
  }
  
  // repeated double truss_vel = 26;
  for (int i = 0; i < this->truss_vel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(26, this->truss_vel(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3OmnibaseStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseStatus base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    // optional int32 traj_goal_reached = 19;
    if (has_traj_goal_reached()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->traj_goal_reached());
    }
    
    // optional double bus_voltage = 20;
    if (has_bus_voltage()) {
      total_size += 2 + 8;
    }
    
  }
  // repeated int32 calibrated = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->calibrated_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->calibrated(i));
    }
    total_size += 1 * this->calibrated_size() + data_size;
  }
  
  // repeated double global_position = 3;
  {
    int data_size = 0;
    data_size = 8 * this->global_position_size();
    total_size += 1 * this->global_position_size() + data_size;
  }
  
  // repeated double global_velocity = 4;
  {
    int data_size = 0;
    data_size = 8 * this->global_velocity_size();
    total_size += 1 * this->global_velocity_size() + data_size;
  }
  
  // repeated double local_velocity = 5;
  {
    int data_size = 0;
    data_size = 8 * this->local_velocity_size();
    total_size += 1 * this->local_velocity_size() + data_size;
  }
  
  // repeated double roll_torque_desired = 6;
  {
    int data_size = 0;
    data_size = 8 * this->roll_torque_desired_size();
    total_size += 1 * this->roll_torque_desired_size() + data_size;
  }
  
  // repeated double steer_torque_desired = 7;
  {
    int data_size = 0;
    data_size = 8 * this->steer_torque_desired_size();
    total_size += 1 * this->steer_torque_desired_size() + data_size;
  }
  
  // repeated double steer_angle = 8;
  {
    int data_size = 0;
    data_size = 8 * this->steer_angle_size();
    total_size += 1 * this->steer_angle_size() + data_size;
  }
  
  // repeated double steer_velocity = 9;
  {
    int data_size = 0;
    data_size = 8 * this->steer_velocity_size();
    total_size += 1 * this->steer_velocity_size() + data_size;
  }
  
  // repeated double roll_angle = 10;
  {
    int data_size = 0;
    data_size = 8 * this->roll_angle_size();
    total_size += 1 * this->roll_angle_size() + data_size;
  }
  
  // repeated double roll_velocity = 11;
  {
    int data_size = 0;
    data_size = 8 * this->roll_velocity_size();
    total_size += 1 * this->roll_velocity_size() + data_size;
  }
  
  // repeated double local_force = 12;
  {
    int data_size = 0;
    data_size = 8 * this->local_force_size();
    total_size += 1 * this->local_force_size() + data_size;
  }
  
  // repeated double local_acceleration = 13;
  {
    int data_size = 0;
    data_size = 8 * this->local_acceleration_size();
    total_size += 1 * this->local_acceleration_size() + data_size;
  }
  
  // repeated double motor_torque_desired = 14;
  {
    int data_size = 0;
    data_size = 8 * this->motor_torque_desired_size();
    total_size += 1 * this->motor_torque_desired_size() + data_size;
  }
  
  // repeated double local_position = 15;
  {
    int data_size = 0;
    data_size = 8 * this->local_position_size();
    total_size += 1 * this->local_position_size() + data_size;
  }
  
  // repeated double position_desired = 16;
  {
    int data_size = 0;
    data_size = 8 * this->position_desired_size();
    total_size += 2 * this->position_desired_size() + data_size;
  }
  
  // repeated double velocity_desired = 17;
  {
    int data_size = 0;
    data_size = 8 * this->velocity_desired_size();
    total_size += 2 * this->velocity_desired_size() + data_size;
  }
  
  // repeated double acceleration_desired = 18;
  {
    int data_size = 0;
    data_size = 8 * this->acceleration_desired_size();
    total_size += 2 * this->acceleration_desired_size() + data_size;
  }
  
  // repeated double position_error = 21;
  {
    int data_size = 0;
    data_size = 8 * this->position_error_size();
    total_size += 2 * this->position_error_size() + data_size;
  }
  
  // repeated double velocity_error = 22;
  {
    int data_size = 0;
    data_size = 8 * this->velocity_error_size();
    total_size += 2 * this->velocity_error_size() + data_size;
  }
  
  // repeated double motor_current = 23;
  {
    int data_size = 0;
    data_size = 8 * this->motor_current_size();
    total_size += 2 * this->motor_current_size() + data_size;
  }
  
  // repeated double roll_torque_internal = 24;
  {
    int data_size = 0;
    data_size = 8 * this->roll_torque_internal_size();
    total_size += 2 * this->roll_torque_internal_size() + data_size;
  }
  
  // repeated double steer_torque_internal = 25;
  {
    int data_size = 0;
    data_size = 8 * this->steer_torque_internal_size();
    total_size += 2 * this->steer_torque_internal_size() + data_size;
  }
  
  // repeated double truss_vel = 26;
  {
    int data_size = 0;
    data_size = 8 * this->truss_vel_size();
    total_size += 2 * this->truss_vel_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3OmnibaseStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3OmnibaseStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3OmnibaseStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3OmnibaseStatus::MergeFrom(const M3OmnibaseStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  calibrated_.MergeFrom(from.calibrated_);
  global_position_.MergeFrom(from.global_position_);
  global_velocity_.MergeFrom(from.global_velocity_);
  local_velocity_.MergeFrom(from.local_velocity_);
  roll_torque_desired_.MergeFrom(from.roll_torque_desired_);
  steer_torque_desired_.MergeFrom(from.steer_torque_desired_);
  steer_angle_.MergeFrom(from.steer_angle_);
  steer_velocity_.MergeFrom(from.steer_velocity_);
  roll_angle_.MergeFrom(from.roll_angle_);
  roll_velocity_.MergeFrom(from.roll_velocity_);
  local_force_.MergeFrom(from.local_force_);
  local_acceleration_.MergeFrom(from.local_acceleration_);
  motor_torque_desired_.MergeFrom(from.motor_torque_desired_);
  local_position_.MergeFrom(from.local_position_);
  position_desired_.MergeFrom(from.position_desired_);
  velocity_desired_.MergeFrom(from.velocity_desired_);
  acceleration_desired_.MergeFrom(from.acceleration_desired_);
  position_error_.MergeFrom(from.position_error_);
  velocity_error_.MergeFrom(from.velocity_error_);
  motor_current_.MergeFrom(from.motor_current_);
  roll_torque_internal_.MergeFrom(from.roll_torque_internal_);
  steer_torque_internal_.MergeFrom(from.steer_torque_internal_);
  truss_vel_.MergeFrom(from.truss_vel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::M3BaseStatus::MergeFrom(from.base());
    }
  }
  if (from._has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (from.has_traj_goal_reached()) {
      set_traj_goal_reached(from.traj_goal_reached());
    }
    if (from.has_bus_voltage()) {
      set_bus_voltage(from.bus_voltage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3OmnibaseStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3OmnibaseStatus::CopyFrom(const M3OmnibaseStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3OmnibaseStatus::IsInitialized() const {
  
  return true;
}

void M3OmnibaseStatus::Swap(M3OmnibaseStatus* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    calibrated_.Swap(&other->calibrated_);
    global_position_.Swap(&other->global_position_);
    global_velocity_.Swap(&other->global_velocity_);
    local_velocity_.Swap(&other->local_velocity_);
    roll_torque_desired_.Swap(&other->roll_torque_desired_);
    steer_torque_desired_.Swap(&other->steer_torque_desired_);
    steer_angle_.Swap(&other->steer_angle_);
    steer_velocity_.Swap(&other->steer_velocity_);
    roll_angle_.Swap(&other->roll_angle_);
    roll_velocity_.Swap(&other->roll_velocity_);
    local_force_.Swap(&other->local_force_);
    local_acceleration_.Swap(&other->local_acceleration_);
    motor_torque_desired_.Swap(&other->motor_torque_desired_);
    local_position_.Swap(&other->local_position_);
    position_desired_.Swap(&other->position_desired_);
    velocity_desired_.Swap(&other->velocity_desired_);
    acceleration_desired_.Swap(&other->acceleration_desired_);
    std::swap(traj_goal_reached_, other->traj_goal_reached_);
    std::swap(bus_voltage_, other->bus_voltage_);
    position_error_.Swap(&other->position_error_);
    velocity_error_.Swap(&other->velocity_error_);
    motor_current_.Swap(&other->motor_current_);
    roll_torque_internal_.Swap(&other->roll_torque_internal_);
    steer_torque_internal_.Swap(&other->steer_torque_internal_);
    truss_vel_.Swap(&other->truss_vel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3OmnibaseStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3OmnibaseStatus_descriptor_;
  metadata.reflection = M3OmnibaseStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3OmnibaseParam::kEnableBreakbeamFieldNumber;
const int M3OmnibaseParam::kKsIFieldNumber;
const int M3OmnibaseParam::kKsILimitFieldNumber;
const int M3OmnibaseParam::kKsIRangeFieldNumber;
const int M3OmnibaseParam::kKsPFieldNumber;
const int M3OmnibaseParam::kKsDFieldNumber;
#endif  // !_MSC_VER

M3OmnibaseParam::M3OmnibaseParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3OmnibaseParam::InitAsDefaultInstance() {
}

M3OmnibaseParam::M3OmnibaseParam(const M3OmnibaseParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3OmnibaseParam::SharedCtor() {
  _cached_size_ = 0;
  ks_i_ = 0;
  ks_i_limit_ = 0;
  ks_i_range_ = 0;
  ks_p_ = 0;
  ks_d_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3OmnibaseParam::~M3OmnibaseParam() {
  SharedDtor();
}

void M3OmnibaseParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3OmnibaseParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3OmnibaseParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3OmnibaseParam_descriptor_;
}

const M3OmnibaseParam& M3OmnibaseParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_omnibase_2eproto();  return *default_instance_;
}

M3OmnibaseParam* M3OmnibaseParam::default_instance_ = NULL;

M3OmnibaseParam* M3OmnibaseParam::New() const {
  return new M3OmnibaseParam;
}

void M3OmnibaseParam::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    ks_i_ = 0;
    ks_i_limit_ = 0;
    ks_i_range_ = 0;
    ks_p_ = 0;
    ks_d_ = 0;
  }
  enable_breakbeam_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3OmnibaseParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 enable_breakbeam = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_breakbeam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_enable_breakbeam())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_enable_breakbeam())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_enable_breakbeam;
        if (input->ExpectTag(17)) goto parse_ks_i;
        break;
      }
      
      // optional double ks_i = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ks_i:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ks_i_)));
          set_has_ks_i();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_ks_i_limit;
        break;
      }
      
      // optional double ks_i_limit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ks_i_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ks_i_limit_)));
          set_has_ks_i_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_ks_i_range;
        break;
      }
      
      // optional double ks_i_range = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ks_i_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ks_i_range_)));
          set_has_ks_i_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_ks_p;
        break;
      }
      
      // optional double ks_p = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ks_p:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ks_p_)));
          set_has_ks_p();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_ks_d;
        break;
      }
      
      // optional double ks_d = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ks_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ks_d_)));
          set_has_ks_d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3OmnibaseParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 enable_breakbeam = 1;
  for (int i = 0; i < this->enable_breakbeam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->enable_breakbeam(i), output);
  }
  
  // optional double ks_i = 2;
  if (has_ks_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ks_i(), output);
  }
  
  // optional double ks_i_limit = 3;
  if (has_ks_i_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ks_i_limit(), output);
  }
  
  // optional double ks_i_range = 4;
  if (has_ks_i_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ks_i_range(), output);
  }
  
  // optional double ks_p = 5;
  if (has_ks_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ks_p(), output);
  }
  
  // optional double ks_d = 6;
  if (has_ks_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ks_d(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3OmnibaseParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 enable_breakbeam = 1;
  for (int i = 0; i < this->enable_breakbeam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->enable_breakbeam(i), target);
  }
  
  // optional double ks_i = 2;
  if (has_ks_i()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ks_i(), target);
  }
  
  // optional double ks_i_limit = 3;
  if (has_ks_i_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ks_i_limit(), target);
  }
  
  // optional double ks_i_range = 4;
  if (has_ks_i_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ks_i_range(), target);
  }
  
  // optional double ks_p = 5;
  if (has_ks_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ks_p(), target);
  }
  
  // optional double ks_d = 6;
  if (has_ks_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ks_d(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3OmnibaseParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional double ks_i = 2;
    if (has_ks_i()) {
      total_size += 1 + 8;
    }
    
    // optional double ks_i_limit = 3;
    if (has_ks_i_limit()) {
      total_size += 1 + 8;
    }
    
    // optional double ks_i_range = 4;
    if (has_ks_i_range()) {
      total_size += 1 + 8;
    }
    
    // optional double ks_p = 5;
    if (has_ks_p()) {
      total_size += 1 + 8;
    }
    
    // optional double ks_d = 6;
    if (has_ks_d()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated int32 enable_breakbeam = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->enable_breakbeam_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->enable_breakbeam(i));
    }
    total_size += 1 * this->enable_breakbeam_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3OmnibaseParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3OmnibaseParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3OmnibaseParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3OmnibaseParam::MergeFrom(const M3OmnibaseParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  enable_breakbeam_.MergeFrom(from.enable_breakbeam_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ks_i()) {
      set_ks_i(from.ks_i());
    }
    if (from.has_ks_i_limit()) {
      set_ks_i_limit(from.ks_i_limit());
    }
    if (from.has_ks_i_range()) {
      set_ks_i_range(from.ks_i_range());
    }
    if (from.has_ks_p()) {
      set_ks_p(from.ks_p());
    }
    if (from.has_ks_d()) {
      set_ks_d(from.ks_d());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3OmnibaseParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3OmnibaseParam::CopyFrom(const M3OmnibaseParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3OmnibaseParam::IsInitialized() const {
  
  return true;
}

void M3OmnibaseParam::Swap(M3OmnibaseParam* other) {
  if (other != this) {
    enable_breakbeam_.Swap(&other->enable_breakbeam_);
    std::swap(ks_i_, other->ks_i_);
    std::swap(ks_i_limit_, other->ks_i_limit_);
    std::swap(ks_i_range_, other->ks_i_range_);
    std::swap(ks_p_, other->ks_p_);
    std::swap(ks_d_, other->ks_d_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3OmnibaseParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3OmnibaseParam_descriptor_;
  metadata.reflection = M3OmnibaseParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3OmnibaseCommand::kCtrlModeFieldNumber;
const int M3OmnibaseCommand::kTrajModeFieldNumber;
const int M3OmnibaseCommand::kRollTorqueDesiredFieldNumber;
const int M3OmnibaseCommand::kOpspaceForceDesiredFieldNumber;
const int M3OmnibaseCommand::kLocalPositionDesiredFieldNumber;
const int M3OmnibaseCommand::kLocalVelocityDesiredFieldNumber;
const int M3OmnibaseCommand::kLocalAccelerationDesiredFieldNumber;
const int M3OmnibaseCommand::kGlobalPositionDesiredFieldNumber;
const int M3OmnibaseCommand::kGlobalVelocityDesiredFieldNumber;
const int M3OmnibaseCommand::kGlobalAccelerationDesiredFieldNumber;
const int M3OmnibaseCommand::kSteerTorqueDesiredFieldNumber;
const int M3OmnibaseCommand::kJoystickXFieldNumber;
const int M3OmnibaseCommand::kJoystickYFieldNumber;
const int M3OmnibaseCommand::kJoystickYawFieldNumber;
const int M3OmnibaseCommand::kSteerVelocityDesiredFieldNumber;
const int M3OmnibaseCommand::kRollVelocityDesiredFieldNumber;
const int M3OmnibaseCommand::kJoystickButtonFieldNumber;
const int M3OmnibaseCommand::kCasterModeFieldNumber;
const int M3OmnibaseCommand::kTrajGoalFieldNumber;
const int M3OmnibaseCommand::kGlobalPositionFieldNumber;
const int M3OmnibaseCommand::kLocalPositionFieldNumber;
const int M3OmnibaseCommand::kAdjustLocalPositionFieldNumber;
const int M3OmnibaseCommand::kAdjustGlobalPositionFieldNumber;
const int M3OmnibaseCommand::kViasFieldNumber;
const int M3OmnibaseCommand::kMaxLinearVelocityFieldNumber;
const int M3OmnibaseCommand::kMaxRotationVelocityFieldNumber;
const int M3OmnibaseCommand::kMaxLinearAccelerationFieldNumber;
const int M3OmnibaseCommand::kMaxRotationAccelerationFieldNumber;
const int M3OmnibaseCommand::kSteerThetaDesiredFieldNumber;
#endif  // !_MSC_VER

M3OmnibaseCommand::M3OmnibaseCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3OmnibaseCommand::InitAsDefaultInstance() {
}

M3OmnibaseCommand::M3OmnibaseCommand(const M3OmnibaseCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3OmnibaseCommand::SharedCtor() {
  _cached_size_ = 0;
  ctrl_mode_ = 0;
  traj_mode_ = 0;
  joystick_x_ = 0;
  joystick_y_ = 0;
  joystick_yaw_ = 0;
  joystick_button_ = 0;
  adjust_local_position_ = 0;
  adjust_global_position_ = 0;
  max_linear_velocity_ = 0;
  max_rotation_velocity_ = 0;
  max_linear_acceleration_ = 0;
  max_rotation_acceleration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3OmnibaseCommand::~M3OmnibaseCommand() {
  SharedDtor();
}

void M3OmnibaseCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3OmnibaseCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3OmnibaseCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3OmnibaseCommand_descriptor_;
}

const M3OmnibaseCommand& M3OmnibaseCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_omnibase_2eproto();  return *default_instance_;
}

M3OmnibaseCommand* M3OmnibaseCommand::default_instance_ = NULL;

M3OmnibaseCommand* M3OmnibaseCommand::New() const {
  return new M3OmnibaseCommand;
}

void M3OmnibaseCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ctrl_mode_ = 0;
    traj_mode_ = 0;
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    joystick_x_ = 0;
    joystick_y_ = 0;
    joystick_yaw_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    joystick_button_ = 0;
    adjust_local_position_ = 0;
    adjust_global_position_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    max_linear_velocity_ = 0;
    max_rotation_velocity_ = 0;
    max_linear_acceleration_ = 0;
    max_rotation_acceleration_ = 0;
  }
  roll_torque_desired_.Clear();
  opspace_force_desired_.Clear();
  local_position_desired_.Clear();
  local_velocity_desired_.Clear();
  local_acceleration_desired_.Clear();
  global_position_desired_.Clear();
  global_velocity_desired_.Clear();
  global_acceleration_desired_.Clear();
  steer_torque_desired_.Clear();
  steer_velocity_desired_.Clear();
  roll_velocity_desired_.Clear();
  caster_mode_.Clear();
  traj_goal_.Clear();
  global_position_.Clear();
  local_position_.Clear();
  vias_.Clear();
  steer_theta_desired_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3OmnibaseCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OMNIBASE_CTRL_MODE ctrl_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (OMNIBASE_CTRL_MODE_IsValid(value)) {
            set_ctrl_mode(static_cast< OMNIBASE_CTRL_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_traj_mode;
        break;
      }
      
      // optional .OMNIBASE_TRAJ_MODE traj_mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_traj_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (OMNIBASE_TRAJ_MODE_IsValid(value)) {
            set_traj_mode(static_cast< OMNIBASE_TRAJ_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_roll_torque_desired;
        break;
      }
      
      // repeated double roll_torque_desired = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_roll_torque_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_roll_torque_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_roll_torque_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_roll_torque_desired;
        if (input->ExpectTag(33)) goto parse_opspace_force_desired;
        break;
      }
      
      // repeated double opspace_force_desired = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_opspace_force_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_opspace_force_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_opspace_force_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_opspace_force_desired;
        if (input->ExpectTag(41)) goto parse_local_position_desired;
        break;
      }
      
      // repeated double local_position_desired = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_local_position_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_local_position_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_local_position_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_local_position_desired;
        if (input->ExpectTag(49)) goto parse_local_velocity_desired;
        break;
      }
      
      // repeated double local_velocity_desired = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_local_velocity_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49, input, this->mutable_local_velocity_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_local_velocity_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_local_velocity_desired;
        if (input->ExpectTag(57)) goto parse_local_acceleration_desired;
        break;
      }
      
      // repeated double local_acceleration_desired = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_local_acceleration_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57, input, this->mutable_local_acceleration_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_local_acceleration_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_local_acceleration_desired;
        if (input->ExpectTag(65)) goto parse_global_position_desired;
        break;
      }
      
      // repeated double global_position_desired = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_global_position_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 65, input, this->mutable_global_position_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_global_position_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_global_position_desired;
        if (input->ExpectTag(73)) goto parse_global_velocity_desired;
        break;
      }
      
      // repeated double global_velocity_desired = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_global_velocity_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 73, input, this->mutable_global_velocity_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_global_velocity_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_global_velocity_desired;
        if (input->ExpectTag(81)) goto parse_global_acceleration_desired;
        break;
      }
      
      // repeated double global_acceleration_desired = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_global_acceleration_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 81, input, this->mutable_global_acceleration_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_global_acceleration_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_global_acceleration_desired;
        if (input->ExpectTag(89)) goto parse_steer_torque_desired;
        break;
      }
      
      // repeated double steer_torque_desired = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steer_torque_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 89, input, this->mutable_steer_torque_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_steer_torque_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_steer_torque_desired;
        if (input->ExpectTag(97)) goto parse_joystick_x;
        break;
      }
      
      // optional double joystick_x = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_joystick_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &joystick_x_)));
          set_has_joystick_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_joystick_y;
        break;
      }
      
      // optional double joystick_y = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_joystick_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &joystick_y_)));
          set_has_joystick_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_joystick_yaw;
        break;
      }
      
      // optional double joystick_yaw = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_joystick_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &joystick_yaw_)));
          set_has_joystick_yaw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_steer_velocity_desired;
        break;
      }
      
      // repeated double steer_velocity_desired = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steer_velocity_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 121, input, this->mutable_steer_velocity_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_steer_velocity_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_steer_velocity_desired;
        if (input->ExpectTag(129)) goto parse_roll_velocity_desired;
        break;
      }
      
      // repeated double roll_velocity_desired = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_roll_velocity_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 129, input, this->mutable_roll_velocity_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_roll_velocity_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_roll_velocity_desired;
        if (input->ExpectTag(136)) goto parse_joystick_button;
        break;
      }
      
      // optional int32 joystick_button = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joystick_button:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &joystick_button_)));
          set_has_joystick_button();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_caster_mode;
        break;
      }
      
      // repeated .OMNIBASE_CASTER_MODE caster_mode = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_caster_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (OMNIBASE_CASTER_MODE_IsValid(value)) {
            add_caster_mode(static_cast< OMNIBASE_CASTER_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &OMNIBASE_CASTER_MODE_IsValid,
                 this->mutable_caster_mode())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_caster_mode;
        if (input->ExpectTag(161)) goto parse_traj_goal;
        break;
      }
      
      // repeated double traj_goal = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_traj_goal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 161, input, this->mutable_traj_goal())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_traj_goal())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_traj_goal;
        if (input->ExpectTag(169)) goto parse_global_position;
        break;
      }
      
      // repeated double global_position = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_global_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 169, input, this->mutable_global_position())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_global_position())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_global_position;
        if (input->ExpectTag(177)) goto parse_local_position;
        break;
      }
      
      // repeated double local_position = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_local_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 177, input, this->mutable_local_position())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_local_position())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_local_position;
        if (input->ExpectTag(184)) goto parse_adjust_local_position;
        break;
      }
      
      // optional int32 adjust_local_position = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adjust_local_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adjust_local_position_)));
          set_has_adjust_local_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_adjust_global_position;
        break;
      }
      
      // optional int32 adjust_global_position = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adjust_global_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adjust_global_position_)));
          set_has_adjust_global_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_vias;
        break;
      }
      
      // repeated .M3OmniVia vias = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vias()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_vias;
        if (input->ExpectTag(209)) goto parse_max_linear_velocity;
        break;
      }
      
      // optional double max_linear_velocity = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_linear_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_linear_velocity_)));
          set_has_max_linear_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_max_rotation_velocity;
        break;
      }
      
      // optional double max_rotation_velocity = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_rotation_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_rotation_velocity_)));
          set_has_max_rotation_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_max_linear_acceleration;
        break;
      }
      
      // optional double max_linear_acceleration = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_linear_acceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_linear_acceleration_)));
          set_has_max_linear_acceleration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_max_rotation_acceleration;
        break;
      }
      
      // optional double max_rotation_acceleration = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_rotation_acceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_rotation_acceleration_)));
          set_has_max_rotation_acceleration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_steer_theta_desired;
        break;
      }
      
      // repeated double steer_theta_desired = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_steer_theta_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 241, input, this->mutable_steer_theta_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_steer_theta_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_steer_theta_desired;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3OmnibaseCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .OMNIBASE_CTRL_MODE ctrl_mode = 1;
  if (has_ctrl_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ctrl_mode(), output);
  }
  
  // optional .OMNIBASE_TRAJ_MODE traj_mode = 2;
  if (has_traj_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->traj_mode(), output);
  }
  
  // repeated double roll_torque_desired = 3;
  for (int i = 0; i < this->roll_torque_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->roll_torque_desired(i), output);
  }
  
  // repeated double opspace_force_desired = 4;
  for (int i = 0; i < this->opspace_force_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->opspace_force_desired(i), output);
  }
  
  // repeated double local_position_desired = 5;
  for (int i = 0; i < this->local_position_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->local_position_desired(i), output);
  }
  
  // repeated double local_velocity_desired = 6;
  for (int i = 0; i < this->local_velocity_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->local_velocity_desired(i), output);
  }
  
  // repeated double local_acceleration_desired = 7;
  for (int i = 0; i < this->local_acceleration_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->local_acceleration_desired(i), output);
  }
  
  // repeated double global_position_desired = 8;
  for (int i = 0; i < this->global_position_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      8, this->global_position_desired(i), output);
  }
  
  // repeated double global_velocity_desired = 9;
  for (int i = 0; i < this->global_velocity_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      9, this->global_velocity_desired(i), output);
  }
  
  // repeated double global_acceleration_desired = 10;
  for (int i = 0; i < this->global_acceleration_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      10, this->global_acceleration_desired(i), output);
  }
  
  // repeated double steer_torque_desired = 11;
  for (int i = 0; i < this->steer_torque_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      11, this->steer_torque_desired(i), output);
  }
  
  // optional double joystick_x = 12;
  if (has_joystick_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->joystick_x(), output);
  }
  
  // optional double joystick_y = 13;
  if (has_joystick_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->joystick_y(), output);
  }
  
  // optional double joystick_yaw = 14;
  if (has_joystick_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->joystick_yaw(), output);
  }
  
  // repeated double steer_velocity_desired = 15;
  for (int i = 0; i < this->steer_velocity_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      15, this->steer_velocity_desired(i), output);
  }
  
  // repeated double roll_velocity_desired = 16;
  for (int i = 0; i < this->roll_velocity_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      16, this->roll_velocity_desired(i), output);
  }
  
  // optional int32 joystick_button = 17;
  if (has_joystick_button()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->joystick_button(), output);
  }
  
  // repeated .OMNIBASE_CASTER_MODE caster_mode = 19;
  for (int i = 0; i < this->caster_mode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->caster_mode(i), output);
  }
  
  // repeated double traj_goal = 20;
  for (int i = 0; i < this->traj_goal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      20, this->traj_goal(i), output);
  }
  
  // repeated double global_position = 21;
  for (int i = 0; i < this->global_position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      21, this->global_position(i), output);
  }
  
  // repeated double local_position = 22;
  for (int i = 0; i < this->local_position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      22, this->local_position(i), output);
  }
  
  // optional int32 adjust_local_position = 23;
  if (has_adjust_local_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->adjust_local_position(), output);
  }
  
  // optional int32 adjust_global_position = 24;
  if (has_adjust_global_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->adjust_global_position(), output);
  }
  
  // repeated .M3OmniVia vias = 25;
  for (int i = 0; i < this->vias_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->vias(i), output);
  }
  
  // optional double max_linear_velocity = 26;
  if (has_max_linear_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->max_linear_velocity(), output);
  }
  
  // optional double max_rotation_velocity = 27;
  if (has_max_rotation_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->max_rotation_velocity(), output);
  }
  
  // optional double max_linear_acceleration = 28;
  if (has_max_linear_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->max_linear_acceleration(), output);
  }
  
  // optional double max_rotation_acceleration = 29;
  if (has_max_rotation_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->max_rotation_acceleration(), output);
  }
  
  // repeated double steer_theta_desired = 30;
  for (int i = 0; i < this->steer_theta_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      30, this->steer_theta_desired(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3OmnibaseCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .OMNIBASE_CTRL_MODE ctrl_mode = 1;
  if (has_ctrl_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ctrl_mode(), target);
  }
  
  // optional .OMNIBASE_TRAJ_MODE traj_mode = 2;
  if (has_traj_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->traj_mode(), target);
  }
  
  // repeated double roll_torque_desired = 3;
  for (int i = 0; i < this->roll_torque_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->roll_torque_desired(i), target);
  }
  
  // repeated double opspace_force_desired = 4;
  for (int i = 0; i < this->opspace_force_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->opspace_force_desired(i), target);
  }
  
  // repeated double local_position_desired = 5;
  for (int i = 0; i < this->local_position_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->local_position_desired(i), target);
  }
  
  // repeated double local_velocity_desired = 6;
  for (int i = 0; i < this->local_velocity_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(6, this->local_velocity_desired(i), target);
  }
  
  // repeated double local_acceleration_desired = 7;
  for (int i = 0; i < this->local_acceleration_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(7, this->local_acceleration_desired(i), target);
  }
  
  // repeated double global_position_desired = 8;
  for (int i = 0; i < this->global_position_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(8, this->global_position_desired(i), target);
  }
  
  // repeated double global_velocity_desired = 9;
  for (int i = 0; i < this->global_velocity_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(9, this->global_velocity_desired(i), target);
  }
  
  // repeated double global_acceleration_desired = 10;
  for (int i = 0; i < this->global_acceleration_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(10, this->global_acceleration_desired(i), target);
  }
  
  // repeated double steer_torque_desired = 11;
  for (int i = 0; i < this->steer_torque_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(11, this->steer_torque_desired(i), target);
  }
  
  // optional double joystick_x = 12;
  if (has_joystick_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->joystick_x(), target);
  }
  
  // optional double joystick_y = 13;
  if (has_joystick_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->joystick_y(), target);
  }
  
  // optional double joystick_yaw = 14;
  if (has_joystick_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->joystick_yaw(), target);
  }
  
  // repeated double steer_velocity_desired = 15;
  for (int i = 0; i < this->steer_velocity_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(15, this->steer_velocity_desired(i), target);
  }
  
  // repeated double roll_velocity_desired = 16;
  for (int i = 0; i < this->roll_velocity_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(16, this->roll_velocity_desired(i), target);
  }
  
  // optional int32 joystick_button = 17;
  if (has_joystick_button()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->joystick_button(), target);
  }
  
  // repeated .OMNIBASE_CASTER_MODE caster_mode = 19;
  for (int i = 0; i < this->caster_mode_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->caster_mode(i), target);
  }
  
  // repeated double traj_goal = 20;
  for (int i = 0; i < this->traj_goal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(20, this->traj_goal(i), target);
  }
  
  // repeated double global_position = 21;
  for (int i = 0; i < this->global_position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(21, this->global_position(i), target);
  }
  
  // repeated double local_position = 22;
  for (int i = 0; i < this->local_position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(22, this->local_position(i), target);
  }
  
  // optional int32 adjust_local_position = 23;
  if (has_adjust_local_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->adjust_local_position(), target);
  }
  
  // optional int32 adjust_global_position = 24;
  if (has_adjust_global_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->adjust_global_position(), target);
  }
  
  // repeated .M3OmniVia vias = 25;
  for (int i = 0; i < this->vias_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->vias(i), target);
  }
  
  // optional double max_linear_velocity = 26;
  if (has_max_linear_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->max_linear_velocity(), target);
  }
  
  // optional double max_rotation_velocity = 27;
  if (has_max_rotation_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->max_rotation_velocity(), target);
  }
  
  // optional double max_linear_acceleration = 28;
  if (has_max_linear_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->max_linear_acceleration(), target);
  }
  
  // optional double max_rotation_acceleration = 29;
  if (has_max_rotation_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->max_rotation_acceleration(), target);
  }
  
  // repeated double steer_theta_desired = 30;
  for (int i = 0; i < this->steer_theta_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(30, this->steer_theta_desired(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3OmnibaseCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .OMNIBASE_CTRL_MODE ctrl_mode = 1;
    if (has_ctrl_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ctrl_mode());
    }
    
    // optional .OMNIBASE_TRAJ_MODE traj_mode = 2;
    if (has_traj_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->traj_mode());
    }
    
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional double joystick_x = 12;
    if (has_joystick_x()) {
      total_size += 1 + 8;
    }
    
    // optional double joystick_y = 13;
    if (has_joystick_y()) {
      total_size += 1 + 8;
    }
    
    // optional double joystick_yaw = 14;
    if (has_joystick_yaw()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 joystick_button = 17;
    if (has_joystick_button()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->joystick_button());
    }
    
    // optional int32 adjust_local_position = 23;
    if (has_adjust_local_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adjust_local_position());
    }
    
    // optional int32 adjust_global_position = 24;
    if (has_adjust_global_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adjust_global_position());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional double max_linear_velocity = 26;
    if (has_max_linear_velocity()) {
      total_size += 2 + 8;
    }
    
    // optional double max_rotation_velocity = 27;
    if (has_max_rotation_velocity()) {
      total_size += 2 + 8;
    }
    
    // optional double max_linear_acceleration = 28;
    if (has_max_linear_acceleration()) {
      total_size += 2 + 8;
    }
    
    // optional double max_rotation_acceleration = 29;
    if (has_max_rotation_acceleration()) {
      total_size += 2 + 8;
    }
    
  }
  // repeated double roll_torque_desired = 3;
  {
    int data_size = 0;
    data_size = 8 * this->roll_torque_desired_size();
    total_size += 1 * this->roll_torque_desired_size() + data_size;
  }
  
  // repeated double opspace_force_desired = 4;
  {
    int data_size = 0;
    data_size = 8 * this->opspace_force_desired_size();
    total_size += 1 * this->opspace_force_desired_size() + data_size;
  }
  
  // repeated double local_position_desired = 5;
  {
    int data_size = 0;
    data_size = 8 * this->local_position_desired_size();
    total_size += 1 * this->local_position_desired_size() + data_size;
  }
  
  // repeated double local_velocity_desired = 6;
  {
    int data_size = 0;
    data_size = 8 * this->local_velocity_desired_size();
    total_size += 1 * this->local_velocity_desired_size() + data_size;
  }
  
  // repeated double local_acceleration_desired = 7;
  {
    int data_size = 0;
    data_size = 8 * this->local_acceleration_desired_size();
    total_size += 1 * this->local_acceleration_desired_size() + data_size;
  }
  
  // repeated double global_position_desired = 8;
  {
    int data_size = 0;
    data_size = 8 * this->global_position_desired_size();
    total_size += 1 * this->global_position_desired_size() + data_size;
  }
  
  // repeated double global_velocity_desired = 9;
  {
    int data_size = 0;
    data_size = 8 * this->global_velocity_desired_size();
    total_size += 1 * this->global_velocity_desired_size() + data_size;
  }
  
  // repeated double global_acceleration_desired = 10;
  {
    int data_size = 0;
    data_size = 8 * this->global_acceleration_desired_size();
    total_size += 1 * this->global_acceleration_desired_size() + data_size;
  }
  
  // repeated double steer_torque_desired = 11;
  {
    int data_size = 0;
    data_size = 8 * this->steer_torque_desired_size();
    total_size += 1 * this->steer_torque_desired_size() + data_size;
  }
  
  // repeated double steer_velocity_desired = 15;
  {
    int data_size = 0;
    data_size = 8 * this->steer_velocity_desired_size();
    total_size += 1 * this->steer_velocity_desired_size() + data_size;
  }
  
  // repeated double roll_velocity_desired = 16;
  {
    int data_size = 0;
    data_size = 8 * this->roll_velocity_desired_size();
    total_size += 2 * this->roll_velocity_desired_size() + data_size;
  }
  
  // repeated .OMNIBASE_CASTER_MODE caster_mode = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->caster_mode_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->caster_mode(i));
    }
    total_size += 2 * this->caster_mode_size() + data_size;
  }
  
  // repeated double traj_goal = 20;
  {
    int data_size = 0;
    data_size = 8 * this->traj_goal_size();
    total_size += 2 * this->traj_goal_size() + data_size;
  }
  
  // repeated double global_position = 21;
  {
    int data_size = 0;
    data_size = 8 * this->global_position_size();
    total_size += 2 * this->global_position_size() + data_size;
  }
  
  // repeated double local_position = 22;
  {
    int data_size = 0;
    data_size = 8 * this->local_position_size();
    total_size += 2 * this->local_position_size() + data_size;
  }
  
  // repeated .M3OmniVia vias = 25;
  total_size += 2 * this->vias_size();
  for (int i = 0; i < this->vias_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vias(i));
  }
  
  // repeated double steer_theta_desired = 30;
  {
    int data_size = 0;
    data_size = 8 * this->steer_theta_desired_size();
    total_size += 2 * this->steer_theta_desired_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3OmnibaseCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3OmnibaseCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3OmnibaseCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3OmnibaseCommand::MergeFrom(const M3OmnibaseCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  roll_torque_desired_.MergeFrom(from.roll_torque_desired_);
  opspace_force_desired_.MergeFrom(from.opspace_force_desired_);
  local_position_desired_.MergeFrom(from.local_position_desired_);
  local_velocity_desired_.MergeFrom(from.local_velocity_desired_);
  local_acceleration_desired_.MergeFrom(from.local_acceleration_desired_);
  global_position_desired_.MergeFrom(from.global_position_desired_);
  global_velocity_desired_.MergeFrom(from.global_velocity_desired_);
  global_acceleration_desired_.MergeFrom(from.global_acceleration_desired_);
  steer_torque_desired_.MergeFrom(from.steer_torque_desired_);
  steer_velocity_desired_.MergeFrom(from.steer_velocity_desired_);
  roll_velocity_desired_.MergeFrom(from.roll_velocity_desired_);
  caster_mode_.MergeFrom(from.caster_mode_);
  traj_goal_.MergeFrom(from.traj_goal_);
  global_position_.MergeFrom(from.global_position_);
  local_position_.MergeFrom(from.local_position_);
  vias_.MergeFrom(from.vias_);
  steer_theta_desired_.MergeFrom(from.steer_theta_desired_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ctrl_mode()) {
      set_ctrl_mode(from.ctrl_mode());
    }
    if (from.has_traj_mode()) {
      set_traj_mode(from.traj_mode());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_joystick_x()) {
      set_joystick_x(from.joystick_x());
    }
    if (from.has_joystick_y()) {
      set_joystick_y(from.joystick_y());
    }
    if (from.has_joystick_yaw()) {
      set_joystick_yaw(from.joystick_yaw());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_joystick_button()) {
      set_joystick_button(from.joystick_button());
    }
    if (from.has_adjust_local_position()) {
      set_adjust_local_position(from.adjust_local_position());
    }
    if (from.has_adjust_global_position()) {
      set_adjust_global_position(from.adjust_global_position());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_max_linear_velocity()) {
      set_max_linear_velocity(from.max_linear_velocity());
    }
    if (from.has_max_rotation_velocity()) {
      set_max_rotation_velocity(from.max_rotation_velocity());
    }
    if (from.has_max_linear_acceleration()) {
      set_max_linear_acceleration(from.max_linear_acceleration());
    }
    if (from.has_max_rotation_acceleration()) {
      set_max_rotation_acceleration(from.max_rotation_acceleration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3OmnibaseCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3OmnibaseCommand::CopyFrom(const M3OmnibaseCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3OmnibaseCommand::IsInitialized() const {
  
  return true;
}

void M3OmnibaseCommand::Swap(M3OmnibaseCommand* other) {
  if (other != this) {
    std::swap(ctrl_mode_, other->ctrl_mode_);
    std::swap(traj_mode_, other->traj_mode_);
    roll_torque_desired_.Swap(&other->roll_torque_desired_);
    opspace_force_desired_.Swap(&other->opspace_force_desired_);
    local_position_desired_.Swap(&other->local_position_desired_);
    local_velocity_desired_.Swap(&other->local_velocity_desired_);
    local_acceleration_desired_.Swap(&other->local_acceleration_desired_);
    global_position_desired_.Swap(&other->global_position_desired_);
    global_velocity_desired_.Swap(&other->global_velocity_desired_);
    global_acceleration_desired_.Swap(&other->global_acceleration_desired_);
    steer_torque_desired_.Swap(&other->steer_torque_desired_);
    std::swap(joystick_x_, other->joystick_x_);
    std::swap(joystick_y_, other->joystick_y_);
    std::swap(joystick_yaw_, other->joystick_yaw_);
    steer_velocity_desired_.Swap(&other->steer_velocity_desired_);
    roll_velocity_desired_.Swap(&other->roll_velocity_desired_);
    std::swap(joystick_button_, other->joystick_button_);
    caster_mode_.Swap(&other->caster_mode_);
    traj_goal_.Swap(&other->traj_goal_);
    global_position_.Swap(&other->global_position_);
    local_position_.Swap(&other->local_position_);
    std::swap(adjust_local_position_, other->adjust_local_position_);
    std::swap(adjust_global_position_, other->adjust_global_position_);
    vias_.Swap(&other->vias_);
    std::swap(max_linear_velocity_, other->max_linear_velocity_);
    std::swap(max_rotation_velocity_, other->max_rotation_velocity_);
    std::swap(max_linear_acceleration_, other->max_linear_acceleration_);
    std::swap(max_rotation_acceleration_, other->max_rotation_acceleration_);
    steer_theta_desired_.Swap(&other->steer_theta_desired_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3OmnibaseCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3OmnibaseCommand_descriptor_;
  metadata.reflection = M3OmnibaseCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3OmniVia::kIdxFieldNumber;
const int M3OmniVia::kPositionDesiredFieldNumber;
const int M3OmniVia::kLinVelocityAvgFieldNumber;
const int M3OmniVia::kAngVelocityAvgFieldNumber;
#endif  // !_MSC_VER

M3OmniVia::M3OmniVia()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3OmniVia::InitAsDefaultInstance() {
}

M3OmniVia::M3OmniVia(const M3OmniVia& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3OmniVia::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0;
  lin_velocity_avg_ = 0;
  ang_velocity_avg_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3OmniVia::~M3OmniVia() {
  SharedDtor();
}

void M3OmniVia::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3OmniVia::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3OmniVia::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3OmniVia_descriptor_;
}

const M3OmniVia& M3OmniVia::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_omnibase_2eproto();  return *default_instance_;
}

M3OmniVia* M3OmniVia::default_instance_ = NULL;

M3OmniVia* M3OmniVia::New() const {
  return new M3OmniVia;
}

void M3OmniVia::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0;
    lin_velocity_avg_ = 0;
    ang_velocity_avg_ = 0;
  }
  position_desired_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3OmniVia::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_position_desired;
        break;
      }
      
      // repeated double position_desired = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_position_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_position_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_position_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_position_desired;
        if (input->ExpectTag(25)) goto parse_lin_velocity_avg;
        break;
      }
      
      // optional double lin_velocity_avg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lin_velocity_avg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lin_velocity_avg_)));
          set_has_lin_velocity_avg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_ang_velocity_avg;
        break;
      }
      
      // optional double ang_velocity_avg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ang_velocity_avg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ang_velocity_avg_)));
          set_has_ang_velocity_avg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3OmniVia::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }
  
  // repeated double position_desired = 2;
  for (int i = 0; i < this->position_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->position_desired(i), output);
  }
  
  // optional double lin_velocity_avg = 3;
  if (has_lin_velocity_avg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lin_velocity_avg(), output);
  }
  
  // optional double ang_velocity_avg = 4;
  if (has_ang_velocity_avg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ang_velocity_avg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3OmniVia::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }
  
  // repeated double position_desired = 2;
  for (int i = 0; i < this->position_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->position_desired(i), target);
  }
  
  // optional double lin_velocity_avg = 3;
  if (has_lin_velocity_avg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lin_velocity_avg(), target);
  }
  
  // optional double ang_velocity_avg = 4;
  if (has_ang_velocity_avg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ang_velocity_avg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3OmniVia::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }
    
    // optional double lin_velocity_avg = 3;
    if (has_lin_velocity_avg()) {
      total_size += 1 + 8;
    }
    
    // optional double ang_velocity_avg = 4;
    if (has_ang_velocity_avg()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated double position_desired = 2;
  {
    int data_size = 0;
    data_size = 8 * this->position_desired_size();
    total_size += 1 * this->position_desired_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3OmniVia::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3OmniVia* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3OmniVia*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3OmniVia::MergeFrom(const M3OmniVia& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_desired_.MergeFrom(from.position_desired_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_lin_velocity_avg()) {
      set_lin_velocity_avg(from.lin_velocity_avg());
    }
    if (from.has_ang_velocity_avg()) {
      set_ang_velocity_avg(from.ang_velocity_avg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3OmniVia::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3OmniVia::CopyFrom(const M3OmniVia& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3OmniVia::IsInitialized() const {
  
  return true;
}

void M3OmniVia::Swap(M3OmniVia* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    position_desired_.Swap(&other->position_desired_);
    std::swap(lin_velocity_avg_, other->lin_velocity_avg_);
    std::swap(ang_velocity_avg_, other->ang_velocity_avg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3OmniVia::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3OmniVia_descriptor_;
  metadata.reflection = M3OmniVia_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
