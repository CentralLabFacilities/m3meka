// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "omnibase_shm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* M3OmnibaseShmStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3OmnibaseShmStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3OmnibaseShmCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3OmnibaseShmCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3OmnibaseShmParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3OmnibaseShmParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_omnibase_5fshm_2eproto() {
  protobuf_AddDesc_omnibase_5fshm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "omnibase_shm.proto");
  GOOGLE_CHECK(file != NULL);
  M3OmnibaseShmStatus_descriptor_ = file->message_type(0);
  static const int M3OmnibaseShmStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseShmStatus, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseShmStatus, test_),
  };
  M3OmnibaseShmStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3OmnibaseShmStatus_descriptor_,
      M3OmnibaseShmStatus::default_instance_,
      M3OmnibaseShmStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseShmStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseShmStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3OmnibaseShmStatus));
  M3OmnibaseShmCommand_descriptor_ = file->message_type(1);
  static const int M3OmnibaseShmCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseShmCommand, test_),
  };
  M3OmnibaseShmCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3OmnibaseShmCommand_descriptor_,
      M3OmnibaseShmCommand::default_instance_,
      M3OmnibaseShmCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseShmCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseShmCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3OmnibaseShmCommand));
  M3OmnibaseShmParam_descriptor_ = file->message_type(2);
  static const int M3OmnibaseShmParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseShmParam, test_),
  };
  M3OmnibaseShmParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3OmnibaseShmParam_descriptor_,
      M3OmnibaseShmParam::default_instance_,
      M3OmnibaseShmParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseShmParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3OmnibaseShmParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3OmnibaseShmParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_omnibase_5fshm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3OmnibaseShmStatus_descriptor_, &M3OmnibaseShmStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3OmnibaseShmCommand_descriptor_, &M3OmnibaseShmCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3OmnibaseShmParam_descriptor_, &M3OmnibaseShmParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_omnibase_5fshm_2eproto() {
  delete M3OmnibaseShmStatus::default_instance_;
  delete M3OmnibaseShmStatus_reflection_;
  delete M3OmnibaseShmCommand::default_instance_;
  delete M3OmnibaseShmCommand_reflection_;
  delete M3OmnibaseShmParam::default_instance_;
  delete M3OmnibaseShmParam_reflection_;
}

void protobuf_AddDesc_omnibase_5fshm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_component_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022omnibase_shm.proto\032\024component_base.pro"
    "to\"@\n\023M3OmnibaseShmStatus\022\033\n\004base\030\001 \001(\0132"
    "\r.M3BaseStatus\022\014\n\004test\030\002 \001(\001\"$\n\024M3Omniba"
    "seShmCommand\022\014\n\004test\030\001 \001(\001\"\"\n\022M3Omnibase"
    "ShmParam\022\014\n\004test\030\001 \001(\001B\002H\001", 186);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "omnibase_shm.proto", &protobuf_RegisterTypes);
  M3OmnibaseShmStatus::default_instance_ = new M3OmnibaseShmStatus();
  M3OmnibaseShmCommand::default_instance_ = new M3OmnibaseShmCommand();
  M3OmnibaseShmParam::default_instance_ = new M3OmnibaseShmParam();
  M3OmnibaseShmStatus::default_instance_->InitAsDefaultInstance();
  M3OmnibaseShmCommand::default_instance_->InitAsDefaultInstance();
  M3OmnibaseShmParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_omnibase_5fshm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_omnibase_5fshm_2eproto {
  StaticDescriptorInitializer_omnibase_5fshm_2eproto() {
    protobuf_AddDesc_omnibase_5fshm_2eproto();
  }
} static_descriptor_initializer_omnibase_5fshm_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int M3OmnibaseShmStatus::kBaseFieldNumber;
const int M3OmnibaseShmStatus::kTestFieldNumber;
#endif  // !_MSC_VER

M3OmnibaseShmStatus::M3OmnibaseShmStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3OmnibaseShmStatus::InitAsDefaultInstance() {
  base_ = const_cast< ::M3BaseStatus*>(&::M3BaseStatus::default_instance());
}

M3OmnibaseShmStatus::M3OmnibaseShmStatus(const M3OmnibaseShmStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3OmnibaseShmStatus::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  test_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3OmnibaseShmStatus::~M3OmnibaseShmStatus() {
  SharedDtor();
}

void M3OmnibaseShmStatus::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void M3OmnibaseShmStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3OmnibaseShmStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3OmnibaseShmStatus_descriptor_;
}

const M3OmnibaseShmStatus& M3OmnibaseShmStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_omnibase_5fshm_2eproto();  return *default_instance_;
}

M3OmnibaseShmStatus* M3OmnibaseShmStatus::default_instance_ = NULL;

M3OmnibaseShmStatus* M3OmnibaseShmStatus::New() const {
  return new M3OmnibaseShmStatus;
}

void M3OmnibaseShmStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::M3BaseStatus::Clear();
    }
    test_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3OmnibaseShmStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseStatus base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_test;
        break;
      }
      
      // optional double test = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &test_)));
          set_has_test();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3OmnibaseShmStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // optional double test = 2;
  if (has_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3OmnibaseShmStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional double test = 2;
  if (has_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3OmnibaseShmStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseStatus base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional double test = 2;
    if (has_test()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3OmnibaseShmStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3OmnibaseShmStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3OmnibaseShmStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3OmnibaseShmStatus::MergeFrom(const M3OmnibaseShmStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::M3BaseStatus::MergeFrom(from.base());
    }
    if (from.has_test()) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3OmnibaseShmStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3OmnibaseShmStatus::CopyFrom(const M3OmnibaseShmStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3OmnibaseShmStatus::IsInitialized() const {
  
  return true;
}

void M3OmnibaseShmStatus::Swap(M3OmnibaseShmStatus* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3OmnibaseShmStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3OmnibaseShmStatus_descriptor_;
  metadata.reflection = M3OmnibaseShmStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3OmnibaseShmCommand::kTestFieldNumber;
#endif  // !_MSC_VER

M3OmnibaseShmCommand::M3OmnibaseShmCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3OmnibaseShmCommand::InitAsDefaultInstance() {
}

M3OmnibaseShmCommand::M3OmnibaseShmCommand(const M3OmnibaseShmCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3OmnibaseShmCommand::SharedCtor() {
  _cached_size_ = 0;
  test_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3OmnibaseShmCommand::~M3OmnibaseShmCommand() {
  SharedDtor();
}

void M3OmnibaseShmCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3OmnibaseShmCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3OmnibaseShmCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3OmnibaseShmCommand_descriptor_;
}

const M3OmnibaseShmCommand& M3OmnibaseShmCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_omnibase_5fshm_2eproto();  return *default_instance_;
}

M3OmnibaseShmCommand* M3OmnibaseShmCommand::default_instance_ = NULL;

M3OmnibaseShmCommand* M3OmnibaseShmCommand::New() const {
  return new M3OmnibaseShmCommand;
}

void M3OmnibaseShmCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3OmnibaseShmCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &test_)));
          set_has_test();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3OmnibaseShmCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double test = 1;
  if (has_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3OmnibaseShmCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double test = 1;
  if (has_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3OmnibaseShmCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double test = 1;
    if (has_test()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3OmnibaseShmCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3OmnibaseShmCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3OmnibaseShmCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3OmnibaseShmCommand::MergeFrom(const M3OmnibaseShmCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test()) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3OmnibaseShmCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3OmnibaseShmCommand::CopyFrom(const M3OmnibaseShmCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3OmnibaseShmCommand::IsInitialized() const {
  
  return true;
}

void M3OmnibaseShmCommand::Swap(M3OmnibaseShmCommand* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3OmnibaseShmCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3OmnibaseShmCommand_descriptor_;
  metadata.reflection = M3OmnibaseShmCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3OmnibaseShmParam::kTestFieldNumber;
#endif  // !_MSC_VER

M3OmnibaseShmParam::M3OmnibaseShmParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3OmnibaseShmParam::InitAsDefaultInstance() {
}

M3OmnibaseShmParam::M3OmnibaseShmParam(const M3OmnibaseShmParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3OmnibaseShmParam::SharedCtor() {
  _cached_size_ = 0;
  test_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3OmnibaseShmParam::~M3OmnibaseShmParam() {
  SharedDtor();
}

void M3OmnibaseShmParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3OmnibaseShmParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3OmnibaseShmParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3OmnibaseShmParam_descriptor_;
}

const M3OmnibaseShmParam& M3OmnibaseShmParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_omnibase_5fshm_2eproto();  return *default_instance_;
}

M3OmnibaseShmParam* M3OmnibaseShmParam::default_instance_ = NULL;

M3OmnibaseShmParam* M3OmnibaseShmParam::New() const {
  return new M3OmnibaseShmParam;
}

void M3OmnibaseShmParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3OmnibaseShmParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &test_)));
          set_has_test();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3OmnibaseShmParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double test = 1;
  if (has_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3OmnibaseShmParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double test = 1;
  if (has_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3OmnibaseShmParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double test = 1;
    if (has_test()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3OmnibaseShmParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3OmnibaseShmParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3OmnibaseShmParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3OmnibaseShmParam::MergeFrom(const M3OmnibaseShmParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test()) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3OmnibaseShmParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3OmnibaseShmParam::CopyFrom(const M3OmnibaseShmParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3OmnibaseShmParam::IsInitialized() const {
  
  return true;
}

void M3OmnibaseShmParam::Swap(M3OmnibaseShmParam* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3OmnibaseShmParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3OmnibaseShmParam_descriptor_;
  metadata.reflection = M3OmnibaseShmParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
