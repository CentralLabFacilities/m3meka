// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hand_ua.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* M3HandUAStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3HandUAStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3HandUACommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3HandUACommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3HandUAParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3HandUAParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hand_5fua_2eproto() {
  protobuf_AddDesc_hand_5fua_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hand_ua.proto");
  GOOGLE_CHECK(file != NULL);
  M3HandUAStatus_descriptor_ = file->message_type(0);
  static const int M3HandUAStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HandUAStatus, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HandUAStatus, theta_thumb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HandUAStatus, theta_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HandUAStatus, theta_ring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HandUAStatus, theta_pinky_),
  };
  M3HandUAStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3HandUAStatus_descriptor_,
      M3HandUAStatus::default_instance_,
      M3HandUAStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HandUAStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HandUAStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3HandUAStatus));
  M3HandUACommand_descriptor_ = file->message_type(1);
  static const int M3HandUACommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HandUACommand, test_),
  };
  M3HandUACommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3HandUACommand_descriptor_,
      M3HandUACommand::default_instance_,
      M3HandUACommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HandUACommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HandUACommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3HandUACommand));
  M3HandUAParam_descriptor_ = file->message_type(2);
  static const int M3HandUAParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HandUAParam, flex_factor_thumb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HandUAParam, flex_factor_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HandUAParam, flex_factor_ring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HandUAParam, flex_factor_pinky_),
  };
  M3HandUAParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3HandUAParam_descriptor_,
      M3HandUAParam::default_instance_,
      M3HandUAParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HandUAParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3HandUAParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3HandUAParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hand_5fua_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3HandUAStatus_descriptor_, &M3HandUAStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3HandUACommand_descriptor_, &M3HandUACommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3HandUAParam_descriptor_, &M3HandUAParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hand_5fua_2eproto() {
  delete M3HandUAStatus::default_instance_;
  delete M3HandUAStatus_reflection_;
  delete M3HandUACommand::default_instance_;
  delete M3HandUACommand_reflection_;
  delete M3HandUAParam::default_instance_;
  delete M3HandUAParam_reflection_;
}

void protobuf_AddDesc_hand_5fua_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_component_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rhand_ua.proto\032\024component_base.proto\"\200\001"
    "\n\016M3HandUAStatus\022\033\n\004base\030\001 \001(\0132\r.M3BaseS"
    "tatus\022\023\n\013theta_thumb\030\002 \003(\001\022\023\n\013theta_inde"
    "x\030\003 \003(\001\022\022\n\ntheta_ring\030\004 \003(\001\022\023\n\013theta_pin"
    "ky\030\005 \003(\001\"\037\n\017M3HandUACommand\022\014\n\004test\030\001 \001("
    "\001\"z\n\rM3HandUAParam\022\031\n\021flex_factor_thumb\030"
    "\001 \003(\001\022\031\n\021flex_factor_index\030\002 \003(\001\022\030\n\020flex"
    "_factor_ring\030\003 \003(\001\022\031\n\021flex_factor_pinky\030"
    "\004 \003(\001B\002H\001", 329);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hand_ua.proto", &protobuf_RegisterTypes);
  M3HandUAStatus::default_instance_ = new M3HandUAStatus();
  M3HandUACommand::default_instance_ = new M3HandUACommand();
  M3HandUAParam::default_instance_ = new M3HandUAParam();
  M3HandUAStatus::default_instance_->InitAsDefaultInstance();
  M3HandUACommand::default_instance_->InitAsDefaultInstance();
  M3HandUAParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hand_5fua_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hand_5fua_2eproto {
  StaticDescriptorInitializer_hand_5fua_2eproto() {
    protobuf_AddDesc_hand_5fua_2eproto();
  }
} static_descriptor_initializer_hand_5fua_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int M3HandUAStatus::kBaseFieldNumber;
const int M3HandUAStatus::kThetaThumbFieldNumber;
const int M3HandUAStatus::kThetaIndexFieldNumber;
const int M3HandUAStatus::kThetaRingFieldNumber;
const int M3HandUAStatus::kThetaPinkyFieldNumber;
#endif  // !_MSC_VER

M3HandUAStatus::M3HandUAStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3HandUAStatus::InitAsDefaultInstance() {
  base_ = const_cast< ::M3BaseStatus*>(&::M3BaseStatus::default_instance());
}

M3HandUAStatus::M3HandUAStatus(const M3HandUAStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3HandUAStatus::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3HandUAStatus::~M3HandUAStatus() {
  SharedDtor();
}

void M3HandUAStatus::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void M3HandUAStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3HandUAStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3HandUAStatus_descriptor_;
}

const M3HandUAStatus& M3HandUAStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hand_5fua_2eproto();  return *default_instance_;
}

M3HandUAStatus* M3HandUAStatus::default_instance_ = NULL;

M3HandUAStatus* M3HandUAStatus::New() const {
  return new M3HandUAStatus;
}

void M3HandUAStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::M3BaseStatus::Clear();
    }
  }
  theta_thumb_.Clear();
  theta_index_.Clear();
  theta_ring_.Clear();
  theta_pinky_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3HandUAStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseStatus base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_theta_thumb;
        break;
      }
      
      // repeated double theta_thumb = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_theta_thumb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_theta_thumb())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_theta_thumb())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_theta_thumb;
        if (input->ExpectTag(25)) goto parse_theta_index;
        break;
      }
      
      // repeated double theta_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_theta_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_theta_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_theta_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_theta_index;
        if (input->ExpectTag(33)) goto parse_theta_ring;
        break;
      }
      
      // repeated double theta_ring = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_theta_ring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_theta_ring())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_theta_ring())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_theta_ring;
        if (input->ExpectTag(41)) goto parse_theta_pinky;
        break;
      }
      
      // repeated double theta_pinky = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_theta_pinky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_theta_pinky())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_theta_pinky())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_theta_pinky;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3HandUAStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // repeated double theta_thumb = 2;
  for (int i = 0; i < this->theta_thumb_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->theta_thumb(i), output);
  }
  
  // repeated double theta_index = 3;
  for (int i = 0; i < this->theta_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->theta_index(i), output);
  }
  
  // repeated double theta_ring = 4;
  for (int i = 0; i < this->theta_ring_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->theta_ring(i), output);
  }
  
  // repeated double theta_pinky = 5;
  for (int i = 0; i < this->theta_pinky_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->theta_pinky(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3HandUAStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // repeated double theta_thumb = 2;
  for (int i = 0; i < this->theta_thumb_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->theta_thumb(i), target);
  }
  
  // repeated double theta_index = 3;
  for (int i = 0; i < this->theta_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->theta_index(i), target);
  }
  
  // repeated double theta_ring = 4;
  for (int i = 0; i < this->theta_ring_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->theta_ring(i), target);
  }
  
  // repeated double theta_pinky = 5;
  for (int i = 0; i < this->theta_pinky_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->theta_pinky(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3HandUAStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseStatus base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
  }
  // repeated double theta_thumb = 2;
  {
    int data_size = 0;
    data_size = 8 * this->theta_thumb_size();
    total_size += 1 * this->theta_thumb_size() + data_size;
  }
  
  // repeated double theta_index = 3;
  {
    int data_size = 0;
    data_size = 8 * this->theta_index_size();
    total_size += 1 * this->theta_index_size() + data_size;
  }
  
  // repeated double theta_ring = 4;
  {
    int data_size = 0;
    data_size = 8 * this->theta_ring_size();
    total_size += 1 * this->theta_ring_size() + data_size;
  }
  
  // repeated double theta_pinky = 5;
  {
    int data_size = 0;
    data_size = 8 * this->theta_pinky_size();
    total_size += 1 * this->theta_pinky_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3HandUAStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3HandUAStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3HandUAStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3HandUAStatus::MergeFrom(const M3HandUAStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  theta_thumb_.MergeFrom(from.theta_thumb_);
  theta_index_.MergeFrom(from.theta_index_);
  theta_ring_.MergeFrom(from.theta_ring_);
  theta_pinky_.MergeFrom(from.theta_pinky_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::M3BaseStatus::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3HandUAStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3HandUAStatus::CopyFrom(const M3HandUAStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3HandUAStatus::IsInitialized() const {
  
  return true;
}

void M3HandUAStatus::Swap(M3HandUAStatus* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    theta_thumb_.Swap(&other->theta_thumb_);
    theta_index_.Swap(&other->theta_index_);
    theta_ring_.Swap(&other->theta_ring_);
    theta_pinky_.Swap(&other->theta_pinky_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3HandUAStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3HandUAStatus_descriptor_;
  metadata.reflection = M3HandUAStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3HandUACommand::kTestFieldNumber;
#endif  // !_MSC_VER

M3HandUACommand::M3HandUACommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3HandUACommand::InitAsDefaultInstance() {
}

M3HandUACommand::M3HandUACommand(const M3HandUACommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3HandUACommand::SharedCtor() {
  _cached_size_ = 0;
  test_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3HandUACommand::~M3HandUACommand() {
  SharedDtor();
}

void M3HandUACommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3HandUACommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3HandUACommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3HandUACommand_descriptor_;
}

const M3HandUACommand& M3HandUACommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hand_5fua_2eproto();  return *default_instance_;
}

M3HandUACommand* M3HandUACommand::default_instance_ = NULL;

M3HandUACommand* M3HandUACommand::New() const {
  return new M3HandUACommand;
}

void M3HandUACommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3HandUACommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &test_)));
          set_has_test();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3HandUACommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double test = 1;
  if (has_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3HandUACommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double test = 1;
  if (has_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3HandUACommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double test = 1;
    if (has_test()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3HandUACommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3HandUACommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3HandUACommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3HandUACommand::MergeFrom(const M3HandUACommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test()) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3HandUACommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3HandUACommand::CopyFrom(const M3HandUACommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3HandUACommand::IsInitialized() const {
  
  return true;
}

void M3HandUACommand::Swap(M3HandUACommand* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3HandUACommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3HandUACommand_descriptor_;
  metadata.reflection = M3HandUACommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3HandUAParam::kFlexFactorThumbFieldNumber;
const int M3HandUAParam::kFlexFactorIndexFieldNumber;
const int M3HandUAParam::kFlexFactorRingFieldNumber;
const int M3HandUAParam::kFlexFactorPinkyFieldNumber;
#endif  // !_MSC_VER

M3HandUAParam::M3HandUAParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3HandUAParam::InitAsDefaultInstance() {
}

M3HandUAParam::M3HandUAParam(const M3HandUAParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3HandUAParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3HandUAParam::~M3HandUAParam() {
  SharedDtor();
}

void M3HandUAParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3HandUAParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3HandUAParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3HandUAParam_descriptor_;
}

const M3HandUAParam& M3HandUAParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hand_5fua_2eproto();  return *default_instance_;
}

M3HandUAParam* M3HandUAParam::default_instance_ = NULL;

M3HandUAParam* M3HandUAParam::New() const {
  return new M3HandUAParam;
}

void M3HandUAParam::Clear() {
  flex_factor_thumb_.Clear();
  flex_factor_index_.Clear();
  flex_factor_ring_.Clear();
  flex_factor_pinky_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3HandUAParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double flex_factor_thumb = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_flex_factor_thumb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_flex_factor_thumb())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_flex_factor_thumb())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_flex_factor_thumb;
        if (input->ExpectTag(17)) goto parse_flex_factor_index;
        break;
      }
      
      // repeated double flex_factor_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_flex_factor_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_flex_factor_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_flex_factor_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_flex_factor_index;
        if (input->ExpectTag(25)) goto parse_flex_factor_ring;
        break;
      }
      
      // repeated double flex_factor_ring = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_flex_factor_ring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_flex_factor_ring())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_flex_factor_ring())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_flex_factor_ring;
        if (input->ExpectTag(33)) goto parse_flex_factor_pinky;
        break;
      }
      
      // repeated double flex_factor_pinky = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_flex_factor_pinky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_flex_factor_pinky())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_flex_factor_pinky())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_flex_factor_pinky;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3HandUAParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double flex_factor_thumb = 1;
  for (int i = 0; i < this->flex_factor_thumb_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->flex_factor_thumb(i), output);
  }
  
  // repeated double flex_factor_index = 2;
  for (int i = 0; i < this->flex_factor_index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->flex_factor_index(i), output);
  }
  
  // repeated double flex_factor_ring = 3;
  for (int i = 0; i < this->flex_factor_ring_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->flex_factor_ring(i), output);
  }
  
  // repeated double flex_factor_pinky = 4;
  for (int i = 0; i < this->flex_factor_pinky_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->flex_factor_pinky(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3HandUAParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double flex_factor_thumb = 1;
  for (int i = 0; i < this->flex_factor_thumb_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->flex_factor_thumb(i), target);
  }
  
  // repeated double flex_factor_index = 2;
  for (int i = 0; i < this->flex_factor_index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->flex_factor_index(i), target);
  }
  
  // repeated double flex_factor_ring = 3;
  for (int i = 0; i < this->flex_factor_ring_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->flex_factor_ring(i), target);
  }
  
  // repeated double flex_factor_pinky = 4;
  for (int i = 0; i < this->flex_factor_pinky_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->flex_factor_pinky(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3HandUAParam::ByteSize() const {
  int total_size = 0;
  
  // repeated double flex_factor_thumb = 1;
  {
    int data_size = 0;
    data_size = 8 * this->flex_factor_thumb_size();
    total_size += 1 * this->flex_factor_thumb_size() + data_size;
  }
  
  // repeated double flex_factor_index = 2;
  {
    int data_size = 0;
    data_size = 8 * this->flex_factor_index_size();
    total_size += 1 * this->flex_factor_index_size() + data_size;
  }
  
  // repeated double flex_factor_ring = 3;
  {
    int data_size = 0;
    data_size = 8 * this->flex_factor_ring_size();
    total_size += 1 * this->flex_factor_ring_size() + data_size;
  }
  
  // repeated double flex_factor_pinky = 4;
  {
    int data_size = 0;
    data_size = 8 * this->flex_factor_pinky_size();
    total_size += 1 * this->flex_factor_pinky_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3HandUAParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3HandUAParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3HandUAParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3HandUAParam::MergeFrom(const M3HandUAParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  flex_factor_thumb_.MergeFrom(from.flex_factor_thumb_);
  flex_factor_index_.MergeFrom(from.flex_factor_index_);
  flex_factor_ring_.MergeFrom(from.flex_factor_ring_);
  flex_factor_pinky_.MergeFrom(from.flex_factor_pinky_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3HandUAParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3HandUAParam::CopyFrom(const M3HandUAParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3HandUAParam::IsInitialized() const {
  
  return true;
}

void M3HandUAParam::Swap(M3HandUAParam* other) {
  if (other != this) {
    flex_factor_thumb_.Swap(&other->flex_factor_thumb_);
    flex_factor_index_.Swap(&other->flex_factor_index_);
    flex_factor_ring_.Swap(&other->flex_factor_ring_);
    flex_factor_pinky_.Swap(&other->flex_factor_pinky_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3HandUAParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3HandUAParam_descriptor_;
  metadata.reflection = M3HandUAParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
