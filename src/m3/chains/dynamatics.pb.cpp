// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dynamatics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* M3DynamaticsStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3DynamaticsStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3DynamaticsParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3DynamaticsParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3DynamaticsCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3DynamaticsCommand_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dynamatics_2eproto() {
  protobuf_AddDesc_dynamatics_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dynamatics.proto");
  GOOGLE_CHECK(file != NULL);
  M3DynamaticsStatus_descriptor_ = file->message_type(0);
  static const int M3DynamaticsStatus_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3DynamaticsStatus, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3DynamaticsStatus, end_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3DynamaticsStatus, end_rot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3DynamaticsStatus, j_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3DynamaticsStatus, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3DynamaticsStatus, end_twist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3DynamaticsStatus, base_wrench_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3DynamaticsStatus, child_wrench_),
  };
  M3DynamaticsStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3DynamaticsStatus_descriptor_,
      M3DynamaticsStatus::default_instance_,
      M3DynamaticsStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3DynamaticsStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3DynamaticsStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3DynamaticsStatus));
  M3DynamaticsParam_descriptor_ = file->message_type(1);
  static const int M3DynamaticsParam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3DynamaticsParam, payload_mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3DynamaticsParam, payload_com_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3DynamaticsParam, payload_inertia_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3DynamaticsParam, use_velocities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3DynamaticsParam, use_accelerations_),
  };
  M3DynamaticsParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3DynamaticsParam_descriptor_,
      M3DynamaticsParam::default_instance_,
      M3DynamaticsParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3DynamaticsParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3DynamaticsParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3DynamaticsParam));
  M3DynamaticsCommand_descriptor_ = file->message_type(2);
  static const int M3DynamaticsCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3DynamaticsCommand, test_),
  };
  M3DynamaticsCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3DynamaticsCommand_descriptor_,
      M3DynamaticsCommand::default_instance_,
      M3DynamaticsCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3DynamaticsCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3DynamaticsCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3DynamaticsCommand));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dynamatics_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3DynamaticsStatus_descriptor_, &M3DynamaticsStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3DynamaticsParam_descriptor_, &M3DynamaticsParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3DynamaticsCommand_descriptor_, &M3DynamaticsCommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dynamatics_2eproto() {
  delete M3DynamaticsStatus::default_instance_;
  delete M3DynamaticsStatus_reflection_;
  delete M3DynamaticsParam::default_instance_;
  delete M3DynamaticsParam_reflection_;
  delete M3DynamaticsCommand::default_instance_;
  delete M3DynamaticsCommand_reflection_;
}

void protobuf_AddDesc_dynamatics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_component_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020dynamatics.proto\032\024component_base.proto"
    "\"\247\001\n\022M3DynamaticsStatus\022\033\n\004base\030\001 \001(\0132\r."
    "M3BaseStatus\022\017\n\007end_pos\030\002 \003(\001\022\017\n\007end_rot"
    "\030\003 \003(\001\022\t\n\001J\030\004 \003(\001\022\t\n\001G\030\005 \003(\001\022\021\n\tend_twis"
    "t\030\006 \003(\001\022\023\n\013base_wrench\030\007 \003(\001\022\024\n\014child_wr"
    "ench\030\010 \003(\001\"\212\001\n\021M3DynamaticsParam\022\024\n\014payl"
    "oad_mass\030\001 \001(\001\022\023\n\013payload_com\030\002 \003(\001\022\027\n\017p"
    "ayload_inertia\030\003 \003(\001\022\026\n\016use_velocities\030\004"
    " \001(\010\022\031\n\021use_accelerations\030\005 \001(\010\"#\n\023M3Dyn"
    "amaticsCommand\022\014\n\004test\030\001 \001(\001B\002H\001", 392);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dynamatics.proto", &protobuf_RegisterTypes);
  M3DynamaticsStatus::default_instance_ = new M3DynamaticsStatus();
  M3DynamaticsParam::default_instance_ = new M3DynamaticsParam();
  M3DynamaticsCommand::default_instance_ = new M3DynamaticsCommand();
  M3DynamaticsStatus::default_instance_->InitAsDefaultInstance();
  M3DynamaticsParam::default_instance_->InitAsDefaultInstance();
  M3DynamaticsCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dynamatics_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dynamatics_2eproto {
  StaticDescriptorInitializer_dynamatics_2eproto() {
    protobuf_AddDesc_dynamatics_2eproto();
  }
} static_descriptor_initializer_dynamatics_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int M3DynamaticsStatus::kBaseFieldNumber;
const int M3DynamaticsStatus::kEndPosFieldNumber;
const int M3DynamaticsStatus::kEndRotFieldNumber;
const int M3DynamaticsStatus::kJFieldNumber;
const int M3DynamaticsStatus::kGFieldNumber;
const int M3DynamaticsStatus::kEndTwistFieldNumber;
const int M3DynamaticsStatus::kBaseWrenchFieldNumber;
const int M3DynamaticsStatus::kChildWrenchFieldNumber;
#endif  // !_MSC_VER

M3DynamaticsStatus::M3DynamaticsStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3DynamaticsStatus::InitAsDefaultInstance() {
  base_ = const_cast< ::M3BaseStatus*>(&::M3BaseStatus::default_instance());
}

M3DynamaticsStatus::M3DynamaticsStatus(const M3DynamaticsStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3DynamaticsStatus::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3DynamaticsStatus::~M3DynamaticsStatus() {
  SharedDtor();
}

void M3DynamaticsStatus::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void M3DynamaticsStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3DynamaticsStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3DynamaticsStatus_descriptor_;
}

const M3DynamaticsStatus& M3DynamaticsStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dynamatics_2eproto();  return *default_instance_;
}

M3DynamaticsStatus* M3DynamaticsStatus::default_instance_ = NULL;

M3DynamaticsStatus* M3DynamaticsStatus::New() const {
  return new M3DynamaticsStatus;
}

void M3DynamaticsStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::M3BaseStatus::Clear();
    }
  }
  end_pos_.Clear();
  end_rot_.Clear();
  j_.Clear();
  g_.Clear();
  end_twist_.Clear();
  base_wrench_.Clear();
  child_wrench_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3DynamaticsStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseStatus base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_end_pos;
        break;
      }
      
      // repeated double end_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_end_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_end_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_end_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_end_pos;
        if (input->ExpectTag(25)) goto parse_end_rot;
        break;
      }
      
      // repeated double end_rot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_end_rot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_end_rot())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_end_rot())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_end_rot;
        if (input->ExpectTag(33)) goto parse_J;
        break;
      }
      
      // repeated double J = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_J:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_j())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_j())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_J;
        if (input->ExpectTag(41)) goto parse_G;
        break;
      }
      
      // repeated double G = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_G:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_g())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_g())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_G;
        if (input->ExpectTag(49)) goto parse_end_twist;
        break;
      }
      
      // repeated double end_twist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_end_twist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49, input, this->mutable_end_twist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_end_twist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_end_twist;
        if (input->ExpectTag(57)) goto parse_base_wrench;
        break;
      }
      
      // repeated double base_wrench = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_base_wrench:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57, input, this->mutable_base_wrench())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_base_wrench())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_base_wrench;
        if (input->ExpectTag(65)) goto parse_child_wrench;
        break;
      }
      
      // repeated double child_wrench = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_child_wrench:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 65, input, this->mutable_child_wrench())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_child_wrench())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_child_wrench;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3DynamaticsStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // repeated double end_pos = 2;
  for (int i = 0; i < this->end_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->end_pos(i), output);
  }
  
  // repeated double end_rot = 3;
  for (int i = 0; i < this->end_rot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->end_rot(i), output);
  }
  
  // repeated double J = 4;
  for (int i = 0; i < this->j_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->j(i), output);
  }
  
  // repeated double G = 5;
  for (int i = 0; i < this->g_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->g(i), output);
  }
  
  // repeated double end_twist = 6;
  for (int i = 0; i < this->end_twist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->end_twist(i), output);
  }
  
  // repeated double base_wrench = 7;
  for (int i = 0; i < this->base_wrench_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->base_wrench(i), output);
  }
  
  // repeated double child_wrench = 8;
  for (int i = 0; i < this->child_wrench_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      8, this->child_wrench(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3DynamaticsStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // repeated double end_pos = 2;
  for (int i = 0; i < this->end_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->end_pos(i), target);
  }
  
  // repeated double end_rot = 3;
  for (int i = 0; i < this->end_rot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->end_rot(i), target);
  }
  
  // repeated double J = 4;
  for (int i = 0; i < this->j_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->j(i), target);
  }
  
  // repeated double G = 5;
  for (int i = 0; i < this->g_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->g(i), target);
  }
  
  // repeated double end_twist = 6;
  for (int i = 0; i < this->end_twist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(6, this->end_twist(i), target);
  }
  
  // repeated double base_wrench = 7;
  for (int i = 0; i < this->base_wrench_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(7, this->base_wrench(i), target);
  }
  
  // repeated double child_wrench = 8;
  for (int i = 0; i < this->child_wrench_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(8, this->child_wrench(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3DynamaticsStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseStatus base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
  }
  // repeated double end_pos = 2;
  {
    int data_size = 0;
    data_size = 8 * this->end_pos_size();
    total_size += 1 * this->end_pos_size() + data_size;
  }
  
  // repeated double end_rot = 3;
  {
    int data_size = 0;
    data_size = 8 * this->end_rot_size();
    total_size += 1 * this->end_rot_size() + data_size;
  }
  
  // repeated double J = 4;
  {
    int data_size = 0;
    data_size = 8 * this->j_size();
    total_size += 1 * this->j_size() + data_size;
  }
  
  // repeated double G = 5;
  {
    int data_size = 0;
    data_size = 8 * this->g_size();
    total_size += 1 * this->g_size() + data_size;
  }
  
  // repeated double end_twist = 6;
  {
    int data_size = 0;
    data_size = 8 * this->end_twist_size();
    total_size += 1 * this->end_twist_size() + data_size;
  }
  
  // repeated double base_wrench = 7;
  {
    int data_size = 0;
    data_size = 8 * this->base_wrench_size();
    total_size += 1 * this->base_wrench_size() + data_size;
  }
  
  // repeated double child_wrench = 8;
  {
    int data_size = 0;
    data_size = 8 * this->child_wrench_size();
    total_size += 1 * this->child_wrench_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3DynamaticsStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3DynamaticsStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3DynamaticsStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3DynamaticsStatus::MergeFrom(const M3DynamaticsStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  end_pos_.MergeFrom(from.end_pos_);
  end_rot_.MergeFrom(from.end_rot_);
  j_.MergeFrom(from.j_);
  g_.MergeFrom(from.g_);
  end_twist_.MergeFrom(from.end_twist_);
  base_wrench_.MergeFrom(from.base_wrench_);
  child_wrench_.MergeFrom(from.child_wrench_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::M3BaseStatus::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3DynamaticsStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3DynamaticsStatus::CopyFrom(const M3DynamaticsStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3DynamaticsStatus::IsInitialized() const {
  
  return true;
}

void M3DynamaticsStatus::Swap(M3DynamaticsStatus* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    end_pos_.Swap(&other->end_pos_);
    end_rot_.Swap(&other->end_rot_);
    j_.Swap(&other->j_);
    g_.Swap(&other->g_);
    end_twist_.Swap(&other->end_twist_);
    base_wrench_.Swap(&other->base_wrench_);
    child_wrench_.Swap(&other->child_wrench_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3DynamaticsStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3DynamaticsStatus_descriptor_;
  metadata.reflection = M3DynamaticsStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3DynamaticsParam::kPayloadMassFieldNumber;
const int M3DynamaticsParam::kPayloadComFieldNumber;
const int M3DynamaticsParam::kPayloadInertiaFieldNumber;
const int M3DynamaticsParam::kUseVelocitiesFieldNumber;
const int M3DynamaticsParam::kUseAccelerationsFieldNumber;
#endif  // !_MSC_VER

M3DynamaticsParam::M3DynamaticsParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3DynamaticsParam::InitAsDefaultInstance() {
}

M3DynamaticsParam::M3DynamaticsParam(const M3DynamaticsParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3DynamaticsParam::SharedCtor() {
  _cached_size_ = 0;
  payload_mass_ = 0;
  use_velocities_ = false;
  use_accelerations_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3DynamaticsParam::~M3DynamaticsParam() {
  SharedDtor();
}

void M3DynamaticsParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3DynamaticsParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3DynamaticsParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3DynamaticsParam_descriptor_;
}

const M3DynamaticsParam& M3DynamaticsParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dynamatics_2eproto();  return *default_instance_;
}

M3DynamaticsParam* M3DynamaticsParam::default_instance_ = NULL;

M3DynamaticsParam* M3DynamaticsParam::New() const {
  return new M3DynamaticsParam;
}

void M3DynamaticsParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    payload_mass_ = 0;
    use_velocities_ = false;
    use_accelerations_ = false;
  }
  payload_com_.Clear();
  payload_inertia_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3DynamaticsParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double payload_mass = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &payload_mass_)));
          set_has_payload_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_payload_com;
        break;
      }
      
      // repeated double payload_com = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_payload_com:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_payload_com())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_payload_com())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_payload_com;
        if (input->ExpectTag(25)) goto parse_payload_inertia;
        break;
      }
      
      // repeated double payload_inertia = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_payload_inertia:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_payload_inertia())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_payload_inertia())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_payload_inertia;
        if (input->ExpectTag(32)) goto parse_use_velocities;
        break;
      }
      
      // optional bool use_velocities = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_velocities:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_velocities_)));
          set_has_use_velocities();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_use_accelerations;
        break;
      }
      
      // optional bool use_accelerations = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_accelerations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_accelerations_)));
          set_has_use_accelerations();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3DynamaticsParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double payload_mass = 1;
  if (has_payload_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->payload_mass(), output);
  }
  
  // repeated double payload_com = 2;
  for (int i = 0; i < this->payload_com_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->payload_com(i), output);
  }
  
  // repeated double payload_inertia = 3;
  for (int i = 0; i < this->payload_inertia_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->payload_inertia(i), output);
  }
  
  // optional bool use_velocities = 4;
  if (has_use_velocities()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->use_velocities(), output);
  }
  
  // optional bool use_accelerations = 5;
  if (has_use_accelerations()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_accelerations(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3DynamaticsParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double payload_mass = 1;
  if (has_payload_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->payload_mass(), target);
  }
  
  // repeated double payload_com = 2;
  for (int i = 0; i < this->payload_com_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->payload_com(i), target);
  }
  
  // repeated double payload_inertia = 3;
  for (int i = 0; i < this->payload_inertia_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->payload_inertia(i), target);
  }
  
  // optional bool use_velocities = 4;
  if (has_use_velocities()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->use_velocities(), target);
  }
  
  // optional bool use_accelerations = 5;
  if (has_use_accelerations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_accelerations(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3DynamaticsParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double payload_mass = 1;
    if (has_payload_mass()) {
      total_size += 1 + 8;
    }
    
    // optional bool use_velocities = 4;
    if (has_use_velocities()) {
      total_size += 1 + 1;
    }
    
    // optional bool use_accelerations = 5;
    if (has_use_accelerations()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated double payload_com = 2;
  {
    int data_size = 0;
    data_size = 8 * this->payload_com_size();
    total_size += 1 * this->payload_com_size() + data_size;
  }
  
  // repeated double payload_inertia = 3;
  {
    int data_size = 0;
    data_size = 8 * this->payload_inertia_size();
    total_size += 1 * this->payload_inertia_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3DynamaticsParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3DynamaticsParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3DynamaticsParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3DynamaticsParam::MergeFrom(const M3DynamaticsParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  payload_com_.MergeFrom(from.payload_com_);
  payload_inertia_.MergeFrom(from.payload_inertia_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payload_mass()) {
      set_payload_mass(from.payload_mass());
    }
    if (from.has_use_velocities()) {
      set_use_velocities(from.use_velocities());
    }
    if (from.has_use_accelerations()) {
      set_use_accelerations(from.use_accelerations());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3DynamaticsParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3DynamaticsParam::CopyFrom(const M3DynamaticsParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3DynamaticsParam::IsInitialized() const {
  
  return true;
}

void M3DynamaticsParam::Swap(M3DynamaticsParam* other) {
  if (other != this) {
    std::swap(payload_mass_, other->payload_mass_);
    payload_com_.Swap(&other->payload_com_);
    payload_inertia_.Swap(&other->payload_inertia_);
    std::swap(use_velocities_, other->use_velocities_);
    std::swap(use_accelerations_, other->use_accelerations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3DynamaticsParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3DynamaticsParam_descriptor_;
  metadata.reflection = M3DynamaticsParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3DynamaticsCommand::kTestFieldNumber;
#endif  // !_MSC_VER

M3DynamaticsCommand::M3DynamaticsCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3DynamaticsCommand::InitAsDefaultInstance() {
}

M3DynamaticsCommand::M3DynamaticsCommand(const M3DynamaticsCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3DynamaticsCommand::SharedCtor() {
  _cached_size_ = 0;
  test_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3DynamaticsCommand::~M3DynamaticsCommand() {
  SharedDtor();
}

void M3DynamaticsCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3DynamaticsCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3DynamaticsCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3DynamaticsCommand_descriptor_;
}

const M3DynamaticsCommand& M3DynamaticsCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dynamatics_2eproto();  return *default_instance_;
}

M3DynamaticsCommand* M3DynamaticsCommand::default_instance_ = NULL;

M3DynamaticsCommand* M3DynamaticsCommand::New() const {
  return new M3DynamaticsCommand;
}

void M3DynamaticsCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3DynamaticsCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &test_)));
          set_has_test();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3DynamaticsCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double test = 1;
  if (has_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3DynamaticsCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double test = 1;
  if (has_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3DynamaticsCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double test = 1;
    if (has_test()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3DynamaticsCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3DynamaticsCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3DynamaticsCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3DynamaticsCommand::MergeFrom(const M3DynamaticsCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test()) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3DynamaticsCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3DynamaticsCommand::CopyFrom(const M3DynamaticsCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3DynamaticsCommand::IsInitialized() const {
  
  return true;
}

void M3DynamaticsCommand::Swap(M3DynamaticsCommand* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3DynamaticsCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3DynamaticsCommand_descriptor_;
  metadata.reflection = M3DynamaticsCommand_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
