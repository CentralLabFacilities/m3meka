// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ctrl_simple.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* M3CtrlSimpleStatusCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3CtrlSimpleStatusCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3CtrlSimpleStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3CtrlSimpleStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3ParamTrajectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3ParamTrajectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3CtrlSimpleParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3CtrlSimpleParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3ParamPID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3ParamPID_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3CtrlSimpleCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3CtrlSimpleCommand_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CTRL_SIMPLE_MODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CTRL_SIMPLE_TRAJ_MODE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ctrl_5fsimple_2eproto() {
  protobuf_AddDesc_ctrl_5fsimple_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ctrl_simple.proto");
  GOOGLE_CHECK(file != NULL);
  M3CtrlSimpleStatusCommand_descriptor_ = file->message_type(0);
  static const int M3CtrlSimpleStatusCommand_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleStatusCommand, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleStatusCommand, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleStatusCommand, torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleStatusCommand, stiffness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleStatusCommand, pwm_),
  };
  M3CtrlSimpleStatusCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3CtrlSimpleStatusCommand_descriptor_,
      M3CtrlSimpleStatusCommand::default_instance_,
      M3CtrlSimpleStatusCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleStatusCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleStatusCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3CtrlSimpleStatusCommand));
  M3CtrlSimpleStatus_descriptor_ = file->message_type(1);
  static const int M3CtrlSimpleStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleStatus, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleStatus, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleStatus, actuator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleStatus, torque_gravity_),
  };
  M3CtrlSimpleStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3CtrlSimpleStatus_descriptor_,
      M3CtrlSimpleStatus::default_instance_,
      M3CtrlSimpleStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3CtrlSimpleStatus));
  M3ParamTrajectory_descriptor_ = file->message_type(2);
  static const int M3ParamTrajectory_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ParamTrajectory, freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ParamTrajectory, amp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ParamTrajectory, zero_),
  };
  M3ParamTrajectory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3ParamTrajectory_descriptor_,
      M3ParamTrajectory::default_instance_,
      M3ParamTrajectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ParamTrajectory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ParamTrajectory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3ParamTrajectory));
  M3CtrlSimpleParam_descriptor_ = file->message_type(3);
  static const int M3CtrlSimpleParam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleParam, traj_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleParam, traj_torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleParam, traj_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleParam, pid_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleParam, pid_torque_),
  };
  M3CtrlSimpleParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3CtrlSimpleParam_descriptor_,
      M3CtrlSimpleParam::default_instance_,
      M3CtrlSimpleParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3CtrlSimpleParam));
  M3ParamPID_descriptor_ = file->message_type(4);
  static const int M3ParamPID_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ParamPID, k_p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ParamPID, k_i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ParamPID, k_d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ParamPID, k_i_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ParamPID, k_i_range_),
  };
  M3ParamPID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3ParamPID_descriptor_,
      M3ParamPID::default_instance_,
      M3ParamPID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ParamPID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ParamPID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3ParamPID));
  M3CtrlSimpleCommand_descriptor_ = file->message_type(5);
  static const int M3CtrlSimpleCommand_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleCommand, ctrl_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleCommand, traj_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleCommand, desired_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleCommand, desired_theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleCommand, desired_torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleCommand, desired_stiffness_),
  };
  M3CtrlSimpleCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3CtrlSimpleCommand_descriptor_,
      M3CtrlSimpleCommand::default_instance_,
      M3CtrlSimpleCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3CtrlSimpleCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3CtrlSimpleCommand));
  CTRL_SIMPLE_MODE_descriptor_ = file->enum_type(0);
  CTRL_SIMPLE_TRAJ_MODE_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ctrl_5fsimple_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3CtrlSimpleStatusCommand_descriptor_, &M3CtrlSimpleStatusCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3CtrlSimpleStatus_descriptor_, &M3CtrlSimpleStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3ParamTrajectory_descriptor_, &M3ParamTrajectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3CtrlSimpleParam_descriptor_, &M3CtrlSimpleParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3ParamPID_descriptor_, &M3ParamPID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3CtrlSimpleCommand_descriptor_, &M3CtrlSimpleCommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ctrl_5fsimple_2eproto() {
  delete M3CtrlSimpleStatusCommand::default_instance_;
  delete M3CtrlSimpleStatusCommand_reflection_;
  delete M3CtrlSimpleStatus::default_instance_;
  delete M3CtrlSimpleStatus_reflection_;
  delete M3ParamTrajectory::default_instance_;
  delete M3ParamTrajectory_reflection_;
  delete M3CtrlSimpleParam::default_instance_;
  delete M3CtrlSimpleParam_reflection_;
  delete M3ParamPID::default_instance_;
  delete M3ParamPID_reflection_;
  delete M3CtrlSimpleCommand::default_instance_;
  delete M3CtrlSimpleCommand_reflection_;
}

void protobuf_AddDesc_ctrl_5fsimple_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_component_5fbase_2eproto();
  ::protobuf_AddDesc_actuator_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ctrl_simple.proto\032\024component_base.prot"
    "o\032\016actuator.proto\"k\n\031M3CtrlSimpleStatusC"
    "ommand\022\r\n\005theta\030\001 \001(\001\022\017\n\007current\030\002 \001(\001\022\016"
    "\n\006torque\030\003 \001(\001\022\021\n\tstiffness\030\004 \001(\001\022\013\n\003pwm"
    "\030\005 \001(\001\"\233\001\n\022M3CtrlSimpleStatus\022\033\n\004base\030\001 "
    "\001(\0132\r.M3BaseStatus\022+\n\007command\030\002 \001(\0132\032.M3"
    "CtrlSimpleStatusCommand\022#\n\010actuator\030\003 \001("
    "\0132\021.M3ActuatorStatus\022\026\n\016torque_gravity\030\004"
    " \001(\001\"<\n\021M3ParamTrajectory\022\014\n\004freq\030\001 \001(\001\022"
    "\013\n\003amp\030\002 \001(\001\022\014\n\004zero\030\003 \001(\001\"\317\001\n\021M3CtrlSim"
    "pleParam\022(\n\014traj_current\030\001 \001(\0132\022.M3Param"
    "Trajectory\022\'\n\013traj_torque\030\002 \001(\0132\022.M3Para"
    "mTrajectory\022&\n\ntraj_theta\030\003 \001(\0132\022.M3Para"
    "mTrajectory\022\036\n\tpid_theta\030\004 \001(\0132\013.M3Param"
    "PID\022\037\n\npid_torque\030\005 \001(\0132\013.M3ParamPID\"Y\n\n"
    "M3ParamPID\022\013\n\003k_p\030\001 \001(\001\022\013\n\003k_i\030\002 \001(\001\022\013\n\003"
    "k_d\030\003 \001(\001\022\021\n\tk_i_limit\030\004 \001(\001\022\021\n\tk_i_rang"
    "e\030\005 \001(\001\"\311\001\n\023M3CtrlSimpleCommand\022$\n\tctrl_"
    "mode\030\001 \001(\0162\021.CTRL_SIMPLE_MODE\022)\n\ttraj_mo"
    "de\030\002 \001(\0162\026.CTRL_SIMPLE_TRAJ_MODE\022\027\n\017desi"
    "red_current\030\003 \001(\001\022\025\n\rdesired_theta\030\004 \001(\001"
    "\022\026\n\016desired_torque\030\005 \001(\001\022\031\n\021desired_stif"
    "fness\030\006 \001(\001*\256\001\n\020CTRL_SIMPLE_MODE\022\021\n\rCTRL"
    "_MODE_OFF\020\000\022\025\n\021CTRL_MODE_CURRENT\020\001\022\024\n\020CT"
    "RL_MODE_TORQUE\020\002\022\027\n\023CTRL_MODE_TORQUE_GC\020"
    "\003\022\023\n\017CTRL_MODE_THETA\020\004\022\027\n\023CTRL_MODE_THET"
    "A_IMP\020\005\022\023\n\017CTRL_MODE_BRAKE\020\006*E\n\025CTRL_SIM"
    "PLE_TRAJ_MODE\022\014\n\010TRAJ_OFF\020\000\022\017\n\013TRAJ_SQUA"
    "RE\020\001\022\r\n\tTRAJ_SINE\020\002B\002H\001", 1143);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ctrl_simple.proto", &protobuf_RegisterTypes);
  M3CtrlSimpleStatusCommand::default_instance_ = new M3CtrlSimpleStatusCommand();
  M3CtrlSimpleStatus::default_instance_ = new M3CtrlSimpleStatus();
  M3ParamTrajectory::default_instance_ = new M3ParamTrajectory();
  M3CtrlSimpleParam::default_instance_ = new M3CtrlSimpleParam();
  M3ParamPID::default_instance_ = new M3ParamPID();
  M3CtrlSimpleCommand::default_instance_ = new M3CtrlSimpleCommand();
  M3CtrlSimpleStatusCommand::default_instance_->InitAsDefaultInstance();
  M3CtrlSimpleStatus::default_instance_->InitAsDefaultInstance();
  M3ParamTrajectory::default_instance_->InitAsDefaultInstance();
  M3CtrlSimpleParam::default_instance_->InitAsDefaultInstance();
  M3ParamPID::default_instance_->InitAsDefaultInstance();
  M3CtrlSimpleCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ctrl_5fsimple_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ctrl_5fsimple_2eproto {
  StaticDescriptorInitializer_ctrl_5fsimple_2eproto() {
    protobuf_AddDesc_ctrl_5fsimple_2eproto();
  }
} static_descriptor_initializer_ctrl_5fsimple_2eproto_;

const ::google::protobuf::EnumDescriptor* CTRL_SIMPLE_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTRL_SIMPLE_MODE_descriptor_;
}
bool CTRL_SIMPLE_MODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CTRL_SIMPLE_TRAJ_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTRL_SIMPLE_TRAJ_MODE_descriptor_;
}
bool CTRL_SIMPLE_TRAJ_MODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int M3CtrlSimpleStatusCommand::kThetaFieldNumber;
const int M3CtrlSimpleStatusCommand::kCurrentFieldNumber;
const int M3CtrlSimpleStatusCommand::kTorqueFieldNumber;
const int M3CtrlSimpleStatusCommand::kStiffnessFieldNumber;
const int M3CtrlSimpleStatusCommand::kPwmFieldNumber;
#endif  // !_MSC_VER

M3CtrlSimpleStatusCommand::M3CtrlSimpleStatusCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3CtrlSimpleStatusCommand::InitAsDefaultInstance() {
}

M3CtrlSimpleStatusCommand::M3CtrlSimpleStatusCommand(const M3CtrlSimpleStatusCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3CtrlSimpleStatusCommand::SharedCtor() {
  _cached_size_ = 0;
  theta_ = 0;
  current_ = 0;
  torque_ = 0;
  stiffness_ = 0;
  pwm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3CtrlSimpleStatusCommand::~M3CtrlSimpleStatusCommand() {
  SharedDtor();
}

void M3CtrlSimpleStatusCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3CtrlSimpleStatusCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3CtrlSimpleStatusCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3CtrlSimpleStatusCommand_descriptor_;
}

const M3CtrlSimpleStatusCommand& M3CtrlSimpleStatusCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5fsimple_2eproto();  return *default_instance_;
}

M3CtrlSimpleStatusCommand* M3CtrlSimpleStatusCommand::default_instance_ = NULL;

M3CtrlSimpleStatusCommand* M3CtrlSimpleStatusCommand::New() const {
  return new M3CtrlSimpleStatusCommand;
}

void M3CtrlSimpleStatusCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    theta_ = 0;
    current_ = 0;
    torque_ = 0;
    stiffness_ = 0;
    pwm_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3CtrlSimpleStatusCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double theta = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
          set_has_theta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_current;
        break;
      }
      
      // optional double current = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &current_)));
          set_has_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_torque;
        break;
      }
      
      // optional double torque = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_torque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &torque_)));
          set_has_torque();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_stiffness;
        break;
      }
      
      // optional double stiffness = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_stiffness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stiffness_)));
          set_has_stiffness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_pwm;
        break;
      }
      
      // optional double pwm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pwm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pwm_)));
          set_has_pwm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3CtrlSimpleStatusCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double theta = 1;
  if (has_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->theta(), output);
  }
  
  // optional double current = 2;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->current(), output);
  }
  
  // optional double torque = 3;
  if (has_torque()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->torque(), output);
  }
  
  // optional double stiffness = 4;
  if (has_stiffness()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->stiffness(), output);
  }
  
  // optional double pwm = 5;
  if (has_pwm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->pwm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3CtrlSimpleStatusCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double theta = 1;
  if (has_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->theta(), target);
  }
  
  // optional double current = 2;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->current(), target);
  }
  
  // optional double torque = 3;
  if (has_torque()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->torque(), target);
  }
  
  // optional double stiffness = 4;
  if (has_stiffness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->stiffness(), target);
  }
  
  // optional double pwm = 5;
  if (has_pwm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->pwm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3CtrlSimpleStatusCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double theta = 1;
    if (has_theta()) {
      total_size += 1 + 8;
    }
    
    // optional double current = 2;
    if (has_current()) {
      total_size += 1 + 8;
    }
    
    // optional double torque = 3;
    if (has_torque()) {
      total_size += 1 + 8;
    }
    
    // optional double stiffness = 4;
    if (has_stiffness()) {
      total_size += 1 + 8;
    }
    
    // optional double pwm = 5;
    if (has_pwm()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3CtrlSimpleStatusCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3CtrlSimpleStatusCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3CtrlSimpleStatusCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3CtrlSimpleStatusCommand::MergeFrom(const M3CtrlSimpleStatusCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_theta()) {
      set_theta(from.theta());
    }
    if (from.has_current()) {
      set_current(from.current());
    }
    if (from.has_torque()) {
      set_torque(from.torque());
    }
    if (from.has_stiffness()) {
      set_stiffness(from.stiffness());
    }
    if (from.has_pwm()) {
      set_pwm(from.pwm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3CtrlSimpleStatusCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3CtrlSimpleStatusCommand::CopyFrom(const M3CtrlSimpleStatusCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3CtrlSimpleStatusCommand::IsInitialized() const {
  
  return true;
}

void M3CtrlSimpleStatusCommand::Swap(M3CtrlSimpleStatusCommand* other) {
  if (other != this) {
    std::swap(theta_, other->theta_);
    std::swap(current_, other->current_);
    std::swap(torque_, other->torque_);
    std::swap(stiffness_, other->stiffness_);
    std::swap(pwm_, other->pwm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3CtrlSimpleStatusCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3CtrlSimpleStatusCommand_descriptor_;
  metadata.reflection = M3CtrlSimpleStatusCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3CtrlSimpleStatus::kBaseFieldNumber;
const int M3CtrlSimpleStatus::kCommandFieldNumber;
const int M3CtrlSimpleStatus::kActuatorFieldNumber;
const int M3CtrlSimpleStatus::kTorqueGravityFieldNumber;
#endif  // !_MSC_VER

M3CtrlSimpleStatus::M3CtrlSimpleStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3CtrlSimpleStatus::InitAsDefaultInstance() {
  base_ = const_cast< ::M3BaseStatus*>(&::M3BaseStatus::default_instance());
  command_ = const_cast< ::M3CtrlSimpleStatusCommand*>(&::M3CtrlSimpleStatusCommand::default_instance());
  actuator_ = const_cast< ::M3ActuatorStatus*>(&::M3ActuatorStatus::default_instance());
}

M3CtrlSimpleStatus::M3CtrlSimpleStatus(const M3CtrlSimpleStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3CtrlSimpleStatus::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  command_ = NULL;
  actuator_ = NULL;
  torque_gravity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3CtrlSimpleStatus::~M3CtrlSimpleStatus() {
  SharedDtor();
}

void M3CtrlSimpleStatus::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete command_;
    delete actuator_;
  }
}

void M3CtrlSimpleStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3CtrlSimpleStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3CtrlSimpleStatus_descriptor_;
}

const M3CtrlSimpleStatus& M3CtrlSimpleStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5fsimple_2eproto();  return *default_instance_;
}

M3CtrlSimpleStatus* M3CtrlSimpleStatus::default_instance_ = NULL;

M3CtrlSimpleStatus* M3CtrlSimpleStatus::New() const {
  return new M3CtrlSimpleStatus;
}

void M3CtrlSimpleStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::M3BaseStatus::Clear();
    }
    if (has_command()) {
      if (command_ != NULL) command_->::M3CtrlSimpleStatusCommand::Clear();
    }
    if (has_actuator()) {
      if (actuator_ != NULL) actuator_->::M3ActuatorStatus::Clear();
    }
    torque_gravity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3CtrlSimpleStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseStatus base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_command;
        break;
      }
      
      // optional .M3CtrlSimpleStatusCommand command = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_actuator;
        break;
      }
      
      // optional .M3ActuatorStatus actuator = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actuator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actuator()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_torque_gravity;
        break;
      }
      
      // optional double torque_gravity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_torque_gravity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &torque_gravity_)));
          set_has_torque_gravity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3CtrlSimpleStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // optional .M3CtrlSimpleStatusCommand command = 2;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->command(), output);
  }
  
  // optional .M3ActuatorStatus actuator = 3;
  if (has_actuator()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->actuator(), output);
  }
  
  // optional double torque_gravity = 4;
  if (has_torque_gravity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->torque_gravity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3CtrlSimpleStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional .M3CtrlSimpleStatusCommand command = 2;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->command(), target);
  }
  
  // optional .M3ActuatorStatus actuator = 3;
  if (has_actuator()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->actuator(), target);
  }
  
  // optional double torque_gravity = 4;
  if (has_torque_gravity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->torque_gravity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3CtrlSimpleStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseStatus base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional .M3CtrlSimpleStatusCommand command = 2;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }
    
    // optional .M3ActuatorStatus actuator = 3;
    if (has_actuator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actuator());
    }
    
    // optional double torque_gravity = 4;
    if (has_torque_gravity()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3CtrlSimpleStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3CtrlSimpleStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3CtrlSimpleStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3CtrlSimpleStatus::MergeFrom(const M3CtrlSimpleStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::M3BaseStatus::MergeFrom(from.base());
    }
    if (from.has_command()) {
      mutable_command()->::M3CtrlSimpleStatusCommand::MergeFrom(from.command());
    }
    if (from.has_actuator()) {
      mutable_actuator()->::M3ActuatorStatus::MergeFrom(from.actuator());
    }
    if (from.has_torque_gravity()) {
      set_torque_gravity(from.torque_gravity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3CtrlSimpleStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3CtrlSimpleStatus::CopyFrom(const M3CtrlSimpleStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3CtrlSimpleStatus::IsInitialized() const {
  
  return true;
}

void M3CtrlSimpleStatus::Swap(M3CtrlSimpleStatus* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(command_, other->command_);
    std::swap(actuator_, other->actuator_);
    std::swap(torque_gravity_, other->torque_gravity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3CtrlSimpleStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3CtrlSimpleStatus_descriptor_;
  metadata.reflection = M3CtrlSimpleStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3ParamTrajectory::kFreqFieldNumber;
const int M3ParamTrajectory::kAmpFieldNumber;
const int M3ParamTrajectory::kZeroFieldNumber;
#endif  // !_MSC_VER

M3ParamTrajectory::M3ParamTrajectory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3ParamTrajectory::InitAsDefaultInstance() {
}

M3ParamTrajectory::M3ParamTrajectory(const M3ParamTrajectory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3ParamTrajectory::SharedCtor() {
  _cached_size_ = 0;
  freq_ = 0;
  amp_ = 0;
  zero_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3ParamTrajectory::~M3ParamTrajectory() {
  SharedDtor();
}

void M3ParamTrajectory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3ParamTrajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3ParamTrajectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3ParamTrajectory_descriptor_;
}

const M3ParamTrajectory& M3ParamTrajectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5fsimple_2eproto();  return *default_instance_;
}

M3ParamTrajectory* M3ParamTrajectory::default_instance_ = NULL;

M3ParamTrajectory* M3ParamTrajectory::New() const {
  return new M3ParamTrajectory;
}

void M3ParamTrajectory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    freq_ = 0;
    amp_ = 0;
    zero_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3ParamTrajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double freq = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &freq_)));
          set_has_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_amp;
        break;
      }
      
      // optional double amp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_amp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amp_)));
          set_has_amp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_zero;
        break;
      }
      
      // optional double zero = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_zero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zero_)));
          set_has_zero();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3ParamTrajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double freq = 1;
  if (has_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->freq(), output);
  }
  
  // optional double amp = 2;
  if (has_amp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->amp(), output);
  }
  
  // optional double zero = 3;
  if (has_zero()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->zero(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3ParamTrajectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double freq = 1;
  if (has_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->freq(), target);
  }
  
  // optional double amp = 2;
  if (has_amp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->amp(), target);
  }
  
  // optional double zero = 3;
  if (has_zero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->zero(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3ParamTrajectory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double freq = 1;
    if (has_freq()) {
      total_size += 1 + 8;
    }
    
    // optional double amp = 2;
    if (has_amp()) {
      total_size += 1 + 8;
    }
    
    // optional double zero = 3;
    if (has_zero()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3ParamTrajectory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3ParamTrajectory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3ParamTrajectory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3ParamTrajectory::MergeFrom(const M3ParamTrajectory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_freq()) {
      set_freq(from.freq());
    }
    if (from.has_amp()) {
      set_amp(from.amp());
    }
    if (from.has_zero()) {
      set_zero(from.zero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3ParamTrajectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3ParamTrajectory::CopyFrom(const M3ParamTrajectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3ParamTrajectory::IsInitialized() const {
  
  return true;
}

void M3ParamTrajectory::Swap(M3ParamTrajectory* other) {
  if (other != this) {
    std::swap(freq_, other->freq_);
    std::swap(amp_, other->amp_);
    std::swap(zero_, other->zero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3ParamTrajectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3ParamTrajectory_descriptor_;
  metadata.reflection = M3ParamTrajectory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3CtrlSimpleParam::kTrajCurrentFieldNumber;
const int M3CtrlSimpleParam::kTrajTorqueFieldNumber;
const int M3CtrlSimpleParam::kTrajThetaFieldNumber;
const int M3CtrlSimpleParam::kPidThetaFieldNumber;
const int M3CtrlSimpleParam::kPidTorqueFieldNumber;
#endif  // !_MSC_VER

M3CtrlSimpleParam::M3CtrlSimpleParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3CtrlSimpleParam::InitAsDefaultInstance() {
  traj_current_ = const_cast< ::M3ParamTrajectory*>(&::M3ParamTrajectory::default_instance());
  traj_torque_ = const_cast< ::M3ParamTrajectory*>(&::M3ParamTrajectory::default_instance());
  traj_theta_ = const_cast< ::M3ParamTrajectory*>(&::M3ParamTrajectory::default_instance());
  pid_theta_ = const_cast< ::M3ParamPID*>(&::M3ParamPID::default_instance());
  pid_torque_ = const_cast< ::M3ParamPID*>(&::M3ParamPID::default_instance());
}

M3CtrlSimpleParam::M3CtrlSimpleParam(const M3CtrlSimpleParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3CtrlSimpleParam::SharedCtor() {
  _cached_size_ = 0;
  traj_current_ = NULL;
  traj_torque_ = NULL;
  traj_theta_ = NULL;
  pid_theta_ = NULL;
  pid_torque_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3CtrlSimpleParam::~M3CtrlSimpleParam() {
  SharedDtor();
}

void M3CtrlSimpleParam::SharedDtor() {
  if (this != default_instance_) {
    delete traj_current_;
    delete traj_torque_;
    delete traj_theta_;
    delete pid_theta_;
    delete pid_torque_;
  }
}

void M3CtrlSimpleParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3CtrlSimpleParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3CtrlSimpleParam_descriptor_;
}

const M3CtrlSimpleParam& M3CtrlSimpleParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5fsimple_2eproto();  return *default_instance_;
}

M3CtrlSimpleParam* M3CtrlSimpleParam::default_instance_ = NULL;

M3CtrlSimpleParam* M3CtrlSimpleParam::New() const {
  return new M3CtrlSimpleParam;
}

void M3CtrlSimpleParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_traj_current()) {
      if (traj_current_ != NULL) traj_current_->::M3ParamTrajectory::Clear();
    }
    if (has_traj_torque()) {
      if (traj_torque_ != NULL) traj_torque_->::M3ParamTrajectory::Clear();
    }
    if (has_traj_theta()) {
      if (traj_theta_ != NULL) traj_theta_->::M3ParamTrajectory::Clear();
    }
    if (has_pid_theta()) {
      if (pid_theta_ != NULL) pid_theta_->::M3ParamPID::Clear();
    }
    if (has_pid_torque()) {
      if (pid_torque_ != NULL) pid_torque_->::M3ParamPID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3CtrlSimpleParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3ParamTrajectory traj_current = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traj_current()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_traj_torque;
        break;
      }
      
      // optional .M3ParamTrajectory traj_torque = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_traj_torque:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traj_torque()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_traj_theta;
        break;
      }
      
      // optional .M3ParamTrajectory traj_theta = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_traj_theta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traj_theta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pid_theta;
        break;
      }
      
      // optional .M3ParamPID pid_theta = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pid_theta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pid_theta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pid_torque;
        break;
      }
      
      // optional .M3ParamPID pid_torque = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pid_torque:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pid_torque()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3CtrlSimpleParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .M3ParamTrajectory traj_current = 1;
  if (has_traj_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->traj_current(), output);
  }
  
  // optional .M3ParamTrajectory traj_torque = 2;
  if (has_traj_torque()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->traj_torque(), output);
  }
  
  // optional .M3ParamTrajectory traj_theta = 3;
  if (has_traj_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->traj_theta(), output);
  }
  
  // optional .M3ParamPID pid_theta = 4;
  if (has_pid_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pid_theta(), output);
  }
  
  // optional .M3ParamPID pid_torque = 5;
  if (has_pid_torque()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pid_torque(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3CtrlSimpleParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3ParamTrajectory traj_current = 1;
  if (has_traj_current()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->traj_current(), target);
  }
  
  // optional .M3ParamTrajectory traj_torque = 2;
  if (has_traj_torque()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->traj_torque(), target);
  }
  
  // optional .M3ParamTrajectory traj_theta = 3;
  if (has_traj_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->traj_theta(), target);
  }
  
  // optional .M3ParamPID pid_theta = 4;
  if (has_pid_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pid_theta(), target);
  }
  
  // optional .M3ParamPID pid_torque = 5;
  if (has_pid_torque()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pid_torque(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3CtrlSimpleParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3ParamTrajectory traj_current = 1;
    if (has_traj_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traj_current());
    }
    
    // optional .M3ParamTrajectory traj_torque = 2;
    if (has_traj_torque()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traj_torque());
    }
    
    // optional .M3ParamTrajectory traj_theta = 3;
    if (has_traj_theta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traj_theta());
    }
    
    // optional .M3ParamPID pid_theta = 4;
    if (has_pid_theta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pid_theta());
    }
    
    // optional .M3ParamPID pid_torque = 5;
    if (has_pid_torque()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pid_torque());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3CtrlSimpleParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3CtrlSimpleParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3CtrlSimpleParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3CtrlSimpleParam::MergeFrom(const M3CtrlSimpleParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_traj_current()) {
      mutable_traj_current()->::M3ParamTrajectory::MergeFrom(from.traj_current());
    }
    if (from.has_traj_torque()) {
      mutable_traj_torque()->::M3ParamTrajectory::MergeFrom(from.traj_torque());
    }
    if (from.has_traj_theta()) {
      mutable_traj_theta()->::M3ParamTrajectory::MergeFrom(from.traj_theta());
    }
    if (from.has_pid_theta()) {
      mutable_pid_theta()->::M3ParamPID::MergeFrom(from.pid_theta());
    }
    if (from.has_pid_torque()) {
      mutable_pid_torque()->::M3ParamPID::MergeFrom(from.pid_torque());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3CtrlSimpleParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3CtrlSimpleParam::CopyFrom(const M3CtrlSimpleParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3CtrlSimpleParam::IsInitialized() const {
  
  return true;
}

void M3CtrlSimpleParam::Swap(M3CtrlSimpleParam* other) {
  if (other != this) {
    std::swap(traj_current_, other->traj_current_);
    std::swap(traj_torque_, other->traj_torque_);
    std::swap(traj_theta_, other->traj_theta_);
    std::swap(pid_theta_, other->pid_theta_);
    std::swap(pid_torque_, other->pid_torque_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3CtrlSimpleParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3CtrlSimpleParam_descriptor_;
  metadata.reflection = M3CtrlSimpleParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3ParamPID::kKPFieldNumber;
const int M3ParamPID::kKIFieldNumber;
const int M3ParamPID::kKDFieldNumber;
const int M3ParamPID::kKILimitFieldNumber;
const int M3ParamPID::kKIRangeFieldNumber;
#endif  // !_MSC_VER

M3ParamPID::M3ParamPID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3ParamPID::InitAsDefaultInstance() {
}

M3ParamPID::M3ParamPID(const M3ParamPID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3ParamPID::SharedCtor() {
  _cached_size_ = 0;
  k_p_ = 0;
  k_i_ = 0;
  k_d_ = 0;
  k_i_limit_ = 0;
  k_i_range_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3ParamPID::~M3ParamPID() {
  SharedDtor();
}

void M3ParamPID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3ParamPID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3ParamPID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3ParamPID_descriptor_;
}

const M3ParamPID& M3ParamPID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5fsimple_2eproto();  return *default_instance_;
}

M3ParamPID* M3ParamPID::default_instance_ = NULL;

M3ParamPID* M3ParamPID::New() const {
  return new M3ParamPID;
}

void M3ParamPID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    k_p_ = 0;
    k_i_ = 0;
    k_d_ = 0;
    k_i_limit_ = 0;
    k_i_range_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3ParamPID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double k_p = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k_p_)));
          set_has_k_p();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_k_i;
        break;
      }
      
      // optional double k_i = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_k_i:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k_i_)));
          set_has_k_i();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_k_d;
        break;
      }
      
      // optional double k_d = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_k_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k_d_)));
          set_has_k_d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_k_i_limit;
        break;
      }
      
      // optional double k_i_limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_k_i_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k_i_limit_)));
          set_has_k_i_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_k_i_range;
        break;
      }
      
      // optional double k_i_range = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_k_i_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k_i_range_)));
          set_has_k_i_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3ParamPID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double k_p = 1;
  if (has_k_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->k_p(), output);
  }
  
  // optional double k_i = 2;
  if (has_k_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->k_i(), output);
  }
  
  // optional double k_d = 3;
  if (has_k_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->k_d(), output);
  }
  
  // optional double k_i_limit = 4;
  if (has_k_i_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->k_i_limit(), output);
  }
  
  // optional double k_i_range = 5;
  if (has_k_i_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->k_i_range(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3ParamPID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double k_p = 1;
  if (has_k_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->k_p(), target);
  }
  
  // optional double k_i = 2;
  if (has_k_i()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->k_i(), target);
  }
  
  // optional double k_d = 3;
  if (has_k_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->k_d(), target);
  }
  
  // optional double k_i_limit = 4;
  if (has_k_i_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->k_i_limit(), target);
  }
  
  // optional double k_i_range = 5;
  if (has_k_i_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->k_i_range(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3ParamPID::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double k_p = 1;
    if (has_k_p()) {
      total_size += 1 + 8;
    }
    
    // optional double k_i = 2;
    if (has_k_i()) {
      total_size += 1 + 8;
    }
    
    // optional double k_d = 3;
    if (has_k_d()) {
      total_size += 1 + 8;
    }
    
    // optional double k_i_limit = 4;
    if (has_k_i_limit()) {
      total_size += 1 + 8;
    }
    
    // optional double k_i_range = 5;
    if (has_k_i_range()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3ParamPID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3ParamPID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3ParamPID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3ParamPID::MergeFrom(const M3ParamPID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k_p()) {
      set_k_p(from.k_p());
    }
    if (from.has_k_i()) {
      set_k_i(from.k_i());
    }
    if (from.has_k_d()) {
      set_k_d(from.k_d());
    }
    if (from.has_k_i_limit()) {
      set_k_i_limit(from.k_i_limit());
    }
    if (from.has_k_i_range()) {
      set_k_i_range(from.k_i_range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3ParamPID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3ParamPID::CopyFrom(const M3ParamPID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3ParamPID::IsInitialized() const {
  
  return true;
}

void M3ParamPID::Swap(M3ParamPID* other) {
  if (other != this) {
    std::swap(k_p_, other->k_p_);
    std::swap(k_i_, other->k_i_);
    std::swap(k_d_, other->k_d_);
    std::swap(k_i_limit_, other->k_i_limit_);
    std::swap(k_i_range_, other->k_i_range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3ParamPID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3ParamPID_descriptor_;
  metadata.reflection = M3ParamPID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3CtrlSimpleCommand::kCtrlModeFieldNumber;
const int M3CtrlSimpleCommand::kTrajModeFieldNumber;
const int M3CtrlSimpleCommand::kDesiredCurrentFieldNumber;
const int M3CtrlSimpleCommand::kDesiredThetaFieldNumber;
const int M3CtrlSimpleCommand::kDesiredTorqueFieldNumber;
const int M3CtrlSimpleCommand::kDesiredStiffnessFieldNumber;
#endif  // !_MSC_VER

M3CtrlSimpleCommand::M3CtrlSimpleCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3CtrlSimpleCommand::InitAsDefaultInstance() {
}

M3CtrlSimpleCommand::M3CtrlSimpleCommand(const M3CtrlSimpleCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3CtrlSimpleCommand::SharedCtor() {
  _cached_size_ = 0;
  ctrl_mode_ = 0;
  traj_mode_ = 0;
  desired_current_ = 0;
  desired_theta_ = 0;
  desired_torque_ = 0;
  desired_stiffness_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3CtrlSimpleCommand::~M3CtrlSimpleCommand() {
  SharedDtor();
}

void M3CtrlSimpleCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3CtrlSimpleCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3CtrlSimpleCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3CtrlSimpleCommand_descriptor_;
}

const M3CtrlSimpleCommand& M3CtrlSimpleCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ctrl_5fsimple_2eproto();  return *default_instance_;
}

M3CtrlSimpleCommand* M3CtrlSimpleCommand::default_instance_ = NULL;

M3CtrlSimpleCommand* M3CtrlSimpleCommand::New() const {
  return new M3CtrlSimpleCommand;
}

void M3CtrlSimpleCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ctrl_mode_ = 0;
    traj_mode_ = 0;
    desired_current_ = 0;
    desired_theta_ = 0;
    desired_torque_ = 0;
    desired_stiffness_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3CtrlSimpleCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CTRL_SIMPLE_MODE ctrl_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (CTRL_SIMPLE_MODE_IsValid(value)) {
            set_ctrl_mode(static_cast< CTRL_SIMPLE_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_traj_mode;
        break;
      }
      
      // optional .CTRL_SIMPLE_TRAJ_MODE traj_mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_traj_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (CTRL_SIMPLE_TRAJ_MODE_IsValid(value)) {
            set_traj_mode(static_cast< CTRL_SIMPLE_TRAJ_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_desired_current;
        break;
      }
      
      // optional double desired_current = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_desired_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &desired_current_)));
          set_has_desired_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_desired_theta;
        break;
      }
      
      // optional double desired_theta = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_desired_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &desired_theta_)));
          set_has_desired_theta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_desired_torque;
        break;
      }
      
      // optional double desired_torque = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_desired_torque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &desired_torque_)));
          set_has_desired_torque();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_desired_stiffness;
        break;
      }
      
      // optional double desired_stiffness = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_desired_stiffness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &desired_stiffness_)));
          set_has_desired_stiffness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3CtrlSimpleCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CTRL_SIMPLE_MODE ctrl_mode = 1;
  if (has_ctrl_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ctrl_mode(), output);
  }
  
  // optional .CTRL_SIMPLE_TRAJ_MODE traj_mode = 2;
  if (has_traj_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->traj_mode(), output);
  }
  
  // optional double desired_current = 3;
  if (has_desired_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->desired_current(), output);
  }
  
  // optional double desired_theta = 4;
  if (has_desired_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->desired_theta(), output);
  }
  
  // optional double desired_torque = 5;
  if (has_desired_torque()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->desired_torque(), output);
  }
  
  // optional double desired_stiffness = 6;
  if (has_desired_stiffness()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->desired_stiffness(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3CtrlSimpleCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CTRL_SIMPLE_MODE ctrl_mode = 1;
  if (has_ctrl_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ctrl_mode(), target);
  }
  
  // optional .CTRL_SIMPLE_TRAJ_MODE traj_mode = 2;
  if (has_traj_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->traj_mode(), target);
  }
  
  // optional double desired_current = 3;
  if (has_desired_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->desired_current(), target);
  }
  
  // optional double desired_theta = 4;
  if (has_desired_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->desired_theta(), target);
  }
  
  // optional double desired_torque = 5;
  if (has_desired_torque()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->desired_torque(), target);
  }
  
  // optional double desired_stiffness = 6;
  if (has_desired_stiffness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->desired_stiffness(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3CtrlSimpleCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CTRL_SIMPLE_MODE ctrl_mode = 1;
    if (has_ctrl_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ctrl_mode());
    }
    
    // optional .CTRL_SIMPLE_TRAJ_MODE traj_mode = 2;
    if (has_traj_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->traj_mode());
    }
    
    // optional double desired_current = 3;
    if (has_desired_current()) {
      total_size += 1 + 8;
    }
    
    // optional double desired_theta = 4;
    if (has_desired_theta()) {
      total_size += 1 + 8;
    }
    
    // optional double desired_torque = 5;
    if (has_desired_torque()) {
      total_size += 1 + 8;
    }
    
    // optional double desired_stiffness = 6;
    if (has_desired_stiffness()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3CtrlSimpleCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3CtrlSimpleCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3CtrlSimpleCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3CtrlSimpleCommand::MergeFrom(const M3CtrlSimpleCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ctrl_mode()) {
      set_ctrl_mode(from.ctrl_mode());
    }
    if (from.has_traj_mode()) {
      set_traj_mode(from.traj_mode());
    }
    if (from.has_desired_current()) {
      set_desired_current(from.desired_current());
    }
    if (from.has_desired_theta()) {
      set_desired_theta(from.desired_theta());
    }
    if (from.has_desired_torque()) {
      set_desired_torque(from.desired_torque());
    }
    if (from.has_desired_stiffness()) {
      set_desired_stiffness(from.desired_stiffness());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3CtrlSimpleCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3CtrlSimpleCommand::CopyFrom(const M3CtrlSimpleCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3CtrlSimpleCommand::IsInitialized() const {
  
  return true;
}

void M3CtrlSimpleCommand::Swap(M3CtrlSimpleCommand* other) {
  if (other != this) {
    std::swap(ctrl_mode_, other->ctrl_mode_);
    std::swap(traj_mode_, other->traj_mode_);
    std::swap(desired_current_, other->desired_current_);
    std::swap(desired_theta_, other->desired_theta_);
    std::swap(desired_torque_, other->desired_torque_);
    std::swap(desired_stiffness_, other->desired_stiffness_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3CtrlSimpleCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3CtrlSimpleCommand_descriptor_;
  metadata.reflection = M3CtrlSimpleCommand_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
