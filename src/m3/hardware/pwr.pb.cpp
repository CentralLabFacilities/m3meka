// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pwr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* M3PwrStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3PwrStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3PwrParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3PwrParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3PwrCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3PwrCommand_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pwr_2eproto() {
  protobuf_AddDesc_pwr_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pwr.proto");
  GOOGLE_CHECK(file != NULL);
  M3PwrStatus_descriptor_ = file->message_type(0);
  static const int M3PwrStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrStatus, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrStatus, bus_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrStatus, current_digital_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrStatus, motor_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrStatus, bus_current_),
  };
  M3PwrStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3PwrStatus_descriptor_,
      M3PwrStatus::default_instance_,
      M3PwrStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3PwrStatus));
  M3PwrParam_descriptor_ = file->message_type(1);
  static const int M3PwrParam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrParam, max_current_digital_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrParam, max_bus_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrParam, min_bus_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrParam, max_bus_current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrParam, charge_bus_voltage_),
  };
  M3PwrParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3PwrParam_descriptor_,
      M3PwrParam::default_instance_,
      M3PwrParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3PwrParam));
  M3PwrCommand_descriptor_ = file->message_type(2);
  static const int M3PwrCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrCommand, enable_motor_),
  };
  M3PwrCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3PwrCommand_descriptor_,
      M3PwrCommand::default_instance_,
      M3PwrCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3PwrCommand));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pwr_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3PwrStatus_descriptor_, &M3PwrStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3PwrParam_descriptor_, &M3PwrParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3PwrCommand_descriptor_, &M3PwrCommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pwr_2eproto() {
  delete M3PwrStatus::default_instance_;
  delete M3PwrStatus_reflection_;
  delete M3PwrParam::default_instance_;
  delete M3PwrParam_reflection_;
  delete M3PwrCommand::default_instance_;
  delete M3PwrCommand_reflection_;
}

void protobuf_AddDesc_pwr_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_component_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tpwr.proto\032\024component_base.proto\"\204\001\n\013M3"
    "PwrStatus\022\033\n\004base\030\001 \001(\0132\r.M3BaseStatus\022\023"
    "\n\013bus_voltage\030\002 \001(\001\022\027\n\017current_digital\030\003"
    " \001(\001\022\025\n\rmotor_enabled\030\004 \001(\010\022\023\n\013bus_curre"
    "nt\030\005 \001(\001\"\220\001\n\nM3PwrParam\022\033\n\023max_current_d"
    "igital\030\001 \001(\001\022\027\n\017max_bus_voltage\030\002 \001(\001\022\027\n"
    "\017min_bus_voltage\030\003 \001(\001\022\027\n\017max_bus_curren"
    "t\030\004 \001(\001\022\032\n\022charge_bus_voltage\030\005 \001(\001\"$\n\014M"
    "3PwrCommand\022\024\n\014enable_motor\030\003 \001(\010B\002H\001", 357);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pwr.proto", &protobuf_RegisterTypes);
  M3PwrStatus::default_instance_ = new M3PwrStatus();
  M3PwrParam::default_instance_ = new M3PwrParam();
  M3PwrCommand::default_instance_ = new M3PwrCommand();
  M3PwrStatus::default_instance_->InitAsDefaultInstance();
  M3PwrParam::default_instance_->InitAsDefaultInstance();
  M3PwrCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pwr_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pwr_2eproto {
  StaticDescriptorInitializer_pwr_2eproto() {
    protobuf_AddDesc_pwr_2eproto();
  }
} static_descriptor_initializer_pwr_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int M3PwrStatus::kBaseFieldNumber;
const int M3PwrStatus::kBusVoltageFieldNumber;
const int M3PwrStatus::kCurrentDigitalFieldNumber;
const int M3PwrStatus::kMotorEnabledFieldNumber;
const int M3PwrStatus::kBusCurrentFieldNumber;
#endif  // !_MSC_VER

M3PwrStatus::M3PwrStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3PwrStatus::InitAsDefaultInstance() {
  base_ = const_cast< ::M3BaseStatus*>(&::M3BaseStatus::default_instance());
}

M3PwrStatus::M3PwrStatus(const M3PwrStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3PwrStatus::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  bus_voltage_ = 0;
  current_digital_ = 0;
  motor_enabled_ = false;
  bus_current_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3PwrStatus::~M3PwrStatus() {
  SharedDtor();
}

void M3PwrStatus::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void M3PwrStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3PwrStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3PwrStatus_descriptor_;
}

const M3PwrStatus& M3PwrStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwr_2eproto();  return *default_instance_;
}

M3PwrStatus* M3PwrStatus::default_instance_ = NULL;

M3PwrStatus* M3PwrStatus::New() const {
  return new M3PwrStatus;
}

void M3PwrStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::M3BaseStatus::Clear();
    }
    bus_voltage_ = 0;
    current_digital_ = 0;
    motor_enabled_ = false;
    bus_current_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3PwrStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseStatus base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_bus_voltage;
        break;
      }
      
      // optional double bus_voltage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bus_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bus_voltage_)));
          set_has_bus_voltage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_current_digital;
        break;
      }
      
      // optional double current_digital = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_current_digital:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &current_digital_)));
          set_has_current_digital();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_motor_enabled;
        break;
      }
      
      // optional bool motor_enabled = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_motor_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &motor_enabled_)));
          set_has_motor_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_bus_current;
        break;
      }
      
      // optional double bus_current = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bus_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bus_current_)));
          set_has_bus_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3PwrStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // optional double bus_voltage = 2;
  if (has_bus_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->bus_voltage(), output);
  }
  
  // optional double current_digital = 3;
  if (has_current_digital()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->current_digital(), output);
  }
  
  // optional bool motor_enabled = 4;
  if (has_motor_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->motor_enabled(), output);
  }
  
  // optional double bus_current = 5;
  if (has_bus_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->bus_current(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3PwrStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional double bus_voltage = 2;
  if (has_bus_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->bus_voltage(), target);
  }
  
  // optional double current_digital = 3;
  if (has_current_digital()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->current_digital(), target);
  }
  
  // optional bool motor_enabled = 4;
  if (has_motor_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->motor_enabled(), target);
  }
  
  // optional double bus_current = 5;
  if (has_bus_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->bus_current(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3PwrStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseStatus base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional double bus_voltage = 2;
    if (has_bus_voltage()) {
      total_size += 1 + 8;
    }
    
    // optional double current_digital = 3;
    if (has_current_digital()) {
      total_size += 1 + 8;
    }
    
    // optional bool motor_enabled = 4;
    if (has_motor_enabled()) {
      total_size += 1 + 1;
    }
    
    // optional double bus_current = 5;
    if (has_bus_current()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3PwrStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3PwrStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3PwrStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3PwrStatus::MergeFrom(const M3PwrStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::M3BaseStatus::MergeFrom(from.base());
    }
    if (from.has_bus_voltage()) {
      set_bus_voltage(from.bus_voltage());
    }
    if (from.has_current_digital()) {
      set_current_digital(from.current_digital());
    }
    if (from.has_motor_enabled()) {
      set_motor_enabled(from.motor_enabled());
    }
    if (from.has_bus_current()) {
      set_bus_current(from.bus_current());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3PwrStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3PwrStatus::CopyFrom(const M3PwrStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3PwrStatus::IsInitialized() const {
  
  return true;
}

void M3PwrStatus::Swap(M3PwrStatus* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(bus_voltage_, other->bus_voltage_);
    std::swap(current_digital_, other->current_digital_);
    std::swap(motor_enabled_, other->motor_enabled_);
    std::swap(bus_current_, other->bus_current_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3PwrStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3PwrStatus_descriptor_;
  metadata.reflection = M3PwrStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3PwrParam::kMaxCurrentDigitalFieldNumber;
const int M3PwrParam::kMaxBusVoltageFieldNumber;
const int M3PwrParam::kMinBusVoltageFieldNumber;
const int M3PwrParam::kMaxBusCurrentFieldNumber;
const int M3PwrParam::kChargeBusVoltageFieldNumber;
#endif  // !_MSC_VER

M3PwrParam::M3PwrParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3PwrParam::InitAsDefaultInstance() {
}

M3PwrParam::M3PwrParam(const M3PwrParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3PwrParam::SharedCtor() {
  _cached_size_ = 0;
  max_current_digital_ = 0;
  max_bus_voltage_ = 0;
  min_bus_voltage_ = 0;
  max_bus_current_ = 0;
  charge_bus_voltage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3PwrParam::~M3PwrParam() {
  SharedDtor();
}

void M3PwrParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3PwrParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3PwrParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3PwrParam_descriptor_;
}

const M3PwrParam& M3PwrParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwr_2eproto();  return *default_instance_;
}

M3PwrParam* M3PwrParam::default_instance_ = NULL;

M3PwrParam* M3PwrParam::New() const {
  return new M3PwrParam;
}

void M3PwrParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_current_digital_ = 0;
    max_bus_voltage_ = 0;
    min_bus_voltage_ = 0;
    max_bus_current_ = 0;
    charge_bus_voltage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3PwrParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double max_current_digital = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_current_digital_)));
          set_has_max_current_digital();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_max_bus_voltage;
        break;
      }
      
      // optional double max_bus_voltage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_bus_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_bus_voltage_)));
          set_has_max_bus_voltage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_min_bus_voltage;
        break;
      }
      
      // optional double min_bus_voltage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_min_bus_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_bus_voltage_)));
          set_has_min_bus_voltage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_max_bus_current;
        break;
      }
      
      // optional double max_bus_current = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_bus_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_bus_current_)));
          set_has_max_bus_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_charge_bus_voltage;
        break;
      }
      
      // optional double charge_bus_voltage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_charge_bus_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &charge_bus_voltage_)));
          set_has_charge_bus_voltage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3PwrParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double max_current_digital = 1;
  if (has_max_current_digital()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_current_digital(), output);
  }
  
  // optional double max_bus_voltage = 2;
  if (has_max_bus_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_bus_voltage(), output);
  }
  
  // optional double min_bus_voltage = 3;
  if (has_min_bus_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min_bus_voltage(), output);
  }
  
  // optional double max_bus_current = 4;
  if (has_max_bus_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_bus_current(), output);
  }
  
  // optional double charge_bus_voltage = 5;
  if (has_charge_bus_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->charge_bus_voltage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3PwrParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double max_current_digital = 1;
  if (has_max_current_digital()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_current_digital(), target);
  }
  
  // optional double max_bus_voltage = 2;
  if (has_max_bus_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_bus_voltage(), target);
  }
  
  // optional double min_bus_voltage = 3;
  if (has_min_bus_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min_bus_voltage(), target);
  }
  
  // optional double max_bus_current = 4;
  if (has_max_bus_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_bus_current(), target);
  }
  
  // optional double charge_bus_voltage = 5;
  if (has_charge_bus_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->charge_bus_voltage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3PwrParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double max_current_digital = 1;
    if (has_max_current_digital()) {
      total_size += 1 + 8;
    }
    
    // optional double max_bus_voltage = 2;
    if (has_max_bus_voltage()) {
      total_size += 1 + 8;
    }
    
    // optional double min_bus_voltage = 3;
    if (has_min_bus_voltage()) {
      total_size += 1 + 8;
    }
    
    // optional double max_bus_current = 4;
    if (has_max_bus_current()) {
      total_size += 1 + 8;
    }
    
    // optional double charge_bus_voltage = 5;
    if (has_charge_bus_voltage()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3PwrParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3PwrParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3PwrParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3PwrParam::MergeFrom(const M3PwrParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_current_digital()) {
      set_max_current_digital(from.max_current_digital());
    }
    if (from.has_max_bus_voltage()) {
      set_max_bus_voltage(from.max_bus_voltage());
    }
    if (from.has_min_bus_voltage()) {
      set_min_bus_voltage(from.min_bus_voltage());
    }
    if (from.has_max_bus_current()) {
      set_max_bus_current(from.max_bus_current());
    }
    if (from.has_charge_bus_voltage()) {
      set_charge_bus_voltage(from.charge_bus_voltage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3PwrParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3PwrParam::CopyFrom(const M3PwrParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3PwrParam::IsInitialized() const {
  
  return true;
}

void M3PwrParam::Swap(M3PwrParam* other) {
  if (other != this) {
    std::swap(max_current_digital_, other->max_current_digital_);
    std::swap(max_bus_voltage_, other->max_bus_voltage_);
    std::swap(min_bus_voltage_, other->min_bus_voltage_);
    std::swap(max_bus_current_, other->max_bus_current_);
    std::swap(charge_bus_voltage_, other->charge_bus_voltage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3PwrParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3PwrParam_descriptor_;
  metadata.reflection = M3PwrParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3PwrCommand::kEnableMotorFieldNumber;
#endif  // !_MSC_VER

M3PwrCommand::M3PwrCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3PwrCommand::InitAsDefaultInstance() {
}

M3PwrCommand::M3PwrCommand(const M3PwrCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3PwrCommand::SharedCtor() {
  _cached_size_ = 0;
  enable_motor_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3PwrCommand::~M3PwrCommand() {
  SharedDtor();
}

void M3PwrCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3PwrCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3PwrCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3PwrCommand_descriptor_;
}

const M3PwrCommand& M3PwrCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwr_2eproto();  return *default_instance_;
}

M3PwrCommand* M3PwrCommand::default_instance_ = NULL;

M3PwrCommand* M3PwrCommand::New() const {
  return new M3PwrCommand;
}

void M3PwrCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enable_motor_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3PwrCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable_motor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_motor_)));
          set_has_enable_motor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3PwrCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool enable_motor = 3;
  if (has_enable_motor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enable_motor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3PwrCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool enable_motor = 3;
  if (has_enable_motor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enable_motor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3PwrCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enable_motor = 3;
    if (has_enable_motor()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3PwrCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3PwrCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3PwrCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3PwrCommand::MergeFrom(const M3PwrCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable_motor()) {
      set_enable_motor(from.enable_motor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3PwrCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3PwrCommand::CopyFrom(const M3PwrCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3PwrCommand::IsInitialized() const {
  
  return true;
}

void M3PwrCommand::Swap(M3PwrCommand* other) {
  if (other != this) {
    std::swap(enable_motor_, other->enable_motor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3PwrCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3PwrCommand_descriptor_;
  metadata.reflection = M3PwrCommand_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
