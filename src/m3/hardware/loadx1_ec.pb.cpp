// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "loadx1_ec.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* M3LoadX1EcStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3LoadX1EcStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3LoadX1EcCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3LoadX1EcCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3LoadX1EcParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3LoadX1EcParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_loadx1_5fec_2eproto() {
  protobuf_AddDesc_loadx1_5fec_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "loadx1_ec.proto");
  GOOGLE_CHECK(file != NULL);
  M3LoadX1EcStatus_descriptor_ = file->message_type(0);
  static const int M3LoadX1EcStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1EcStatus, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1EcStatus, ethercat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1EcStatus, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1EcStatus, adc_torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1EcStatus, flags_),
  };
  M3LoadX1EcStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3LoadX1EcStatus_descriptor_,
      M3LoadX1EcStatus::default_instance_,
      M3LoadX1EcStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1EcStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1EcStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3LoadX1EcStatus));
  M3LoadX1EcCommand_descriptor_ = file->message_type(1);
  static const int M3LoadX1EcCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1EcCommand, dummy_),
  };
  M3LoadX1EcCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3LoadX1EcCommand_descriptor_,
      M3LoadX1EcCommand::default_instance_,
      M3LoadX1EcCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1EcCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1EcCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3LoadX1EcCommand));
  M3LoadX1EcParam_descriptor_ = file->message_type(2);
  static const int M3LoadX1EcParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1EcParam, dummy_),
  };
  M3LoadX1EcParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3LoadX1EcParam_descriptor_,
      M3LoadX1EcParam::default_instance_,
      M3LoadX1EcParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1EcParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1EcParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3LoadX1EcParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_loadx1_5fec_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3LoadX1EcStatus_descriptor_, &M3LoadX1EcStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3LoadX1EcCommand_descriptor_, &M3LoadX1EcCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3LoadX1EcParam_descriptor_, &M3LoadX1EcParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_loadx1_5fec_2eproto() {
  delete M3LoadX1EcStatus::default_instance_;
  delete M3LoadX1EcStatus_reflection_;
  delete M3LoadX1EcCommand::default_instance_;
  delete M3LoadX1EcCommand_reflection_;
  delete M3LoadX1EcParam::default_instance_;
  delete M3LoadX1EcParam_reflection_;
}

void protobuf_AddDesc_loadx1_5fec_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_component_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017loadx1_ec.proto\032\024component_base.proto\""
    "\212\001\n\020M3LoadX1EcStatus\022\033\n\004base\030\001 \001(\0132\r.M3B"
    "aseStatus\022#\n\010ethercat\030\002 \001(\0132\021.M3EtherCAT"
    "Status\022\021\n\ttimestamp\030\003 \001(\004\022\022\n\nadc_torque\030"
    "\004 \001(\005\022\r\n\005flags\030\005 \001(\005\"\"\n\021M3LoadX1EcComman"
    "d\022\r\n\005dummy\030\001 \001(\005\" \n\017M3LoadX1EcParam\022\r\n\005d"
    "ummy\030\001 \001(\005B\002H\001", 254);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "loadx1_ec.proto", &protobuf_RegisterTypes);
  M3LoadX1EcStatus::default_instance_ = new M3LoadX1EcStatus();
  M3LoadX1EcCommand::default_instance_ = new M3LoadX1EcCommand();
  M3LoadX1EcParam::default_instance_ = new M3LoadX1EcParam();
  M3LoadX1EcStatus::default_instance_->InitAsDefaultInstance();
  M3LoadX1EcCommand::default_instance_->InitAsDefaultInstance();
  M3LoadX1EcParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_loadx1_5fec_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_loadx1_5fec_2eproto {
  StaticDescriptorInitializer_loadx1_5fec_2eproto() {
    protobuf_AddDesc_loadx1_5fec_2eproto();
  }
} static_descriptor_initializer_loadx1_5fec_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int M3LoadX1EcStatus::kBaseFieldNumber;
const int M3LoadX1EcStatus::kEthercatFieldNumber;
const int M3LoadX1EcStatus::kTimestampFieldNumber;
const int M3LoadX1EcStatus::kAdcTorqueFieldNumber;
const int M3LoadX1EcStatus::kFlagsFieldNumber;
#endif  // !_MSC_VER

M3LoadX1EcStatus::M3LoadX1EcStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3LoadX1EcStatus::InitAsDefaultInstance() {
  base_ = const_cast< ::M3BaseStatus*>(&::M3BaseStatus::default_instance());
  ethercat_ = const_cast< ::M3EtherCATStatus*>(&::M3EtherCATStatus::default_instance());
}

M3LoadX1EcStatus::M3LoadX1EcStatus(const M3LoadX1EcStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3LoadX1EcStatus::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  ethercat_ = NULL;
  timestamp_ = GOOGLE_ULONGLONG(0);
  adc_torque_ = 0;
  flags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3LoadX1EcStatus::~M3LoadX1EcStatus() {
  SharedDtor();
}

void M3LoadX1EcStatus::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete ethercat_;
  }
}

void M3LoadX1EcStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3LoadX1EcStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3LoadX1EcStatus_descriptor_;
}

const M3LoadX1EcStatus& M3LoadX1EcStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loadx1_5fec_2eproto();  return *default_instance_;
}

M3LoadX1EcStatus* M3LoadX1EcStatus::default_instance_ = NULL;

M3LoadX1EcStatus* M3LoadX1EcStatus::New() const {
  return new M3LoadX1EcStatus;
}

void M3LoadX1EcStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::M3BaseStatus::Clear();
    }
    if (has_ethercat()) {
      if (ethercat_ != NULL) ethercat_->::M3EtherCATStatus::Clear();
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
    adc_torque_ = 0;
    flags_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3LoadX1EcStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseStatus base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ethercat;
        break;
      }
      
      // optional .M3EtherCATStatus ethercat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ethercat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ethercat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }
      
      // optional uint64 timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_adc_torque;
        break;
      }
      
      // optional int32 adc_torque = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adc_torque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adc_torque_)));
          set_has_adc_torque();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_flags;
        break;
      }
      
      // optional int32 flags = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3LoadX1EcStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // optional .M3EtherCATStatus ethercat = 2;
  if (has_ethercat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ethercat(), output);
  }
  
  // optional uint64 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }
  
  // optional int32 adc_torque = 4;
  if (has_adc_torque()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->adc_torque(), output);
  }
  
  // optional int32 flags = 5;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->flags(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3LoadX1EcStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional .M3EtherCATStatus ethercat = 2;
  if (has_ethercat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ethercat(), target);
  }
  
  // optional uint64 timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }
  
  // optional int32 adc_torque = 4;
  if (has_adc_torque()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->adc_torque(), target);
  }
  
  // optional int32 flags = 5;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->flags(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3LoadX1EcStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseStatus base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional .M3EtherCATStatus ethercat = 2;
    if (has_ethercat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ethercat());
    }
    
    // optional uint64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }
    
    // optional int32 adc_torque = 4;
    if (has_adc_torque()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_torque());
    }
    
    // optional int32 flags = 5;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3LoadX1EcStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3LoadX1EcStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3LoadX1EcStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3LoadX1EcStatus::MergeFrom(const M3LoadX1EcStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::M3BaseStatus::MergeFrom(from.base());
    }
    if (from.has_ethercat()) {
      mutable_ethercat()->::M3EtherCATStatus::MergeFrom(from.ethercat());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_adc_torque()) {
      set_adc_torque(from.adc_torque());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3LoadX1EcStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3LoadX1EcStatus::CopyFrom(const M3LoadX1EcStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3LoadX1EcStatus::IsInitialized() const {
  
  return true;
}

void M3LoadX1EcStatus::Swap(M3LoadX1EcStatus* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(ethercat_, other->ethercat_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(adc_torque_, other->adc_torque_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3LoadX1EcStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3LoadX1EcStatus_descriptor_;
  metadata.reflection = M3LoadX1EcStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3LoadX1EcCommand::kDummyFieldNumber;
#endif  // !_MSC_VER

M3LoadX1EcCommand::M3LoadX1EcCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3LoadX1EcCommand::InitAsDefaultInstance() {
}

M3LoadX1EcCommand::M3LoadX1EcCommand(const M3LoadX1EcCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3LoadX1EcCommand::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3LoadX1EcCommand::~M3LoadX1EcCommand() {
  SharedDtor();
}

void M3LoadX1EcCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3LoadX1EcCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3LoadX1EcCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3LoadX1EcCommand_descriptor_;
}

const M3LoadX1EcCommand& M3LoadX1EcCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loadx1_5fec_2eproto();  return *default_instance_;
}

M3LoadX1EcCommand* M3LoadX1EcCommand::default_instance_ = NULL;

M3LoadX1EcCommand* M3LoadX1EcCommand::New() const {
  return new M3LoadX1EcCommand;
}

void M3LoadX1EcCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3LoadX1EcCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3LoadX1EcCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dummy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3LoadX1EcCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dummy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3LoadX1EcCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dummy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3LoadX1EcCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3LoadX1EcCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3LoadX1EcCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3LoadX1EcCommand::MergeFrom(const M3LoadX1EcCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3LoadX1EcCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3LoadX1EcCommand::CopyFrom(const M3LoadX1EcCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3LoadX1EcCommand::IsInitialized() const {
  
  return true;
}

void M3LoadX1EcCommand::Swap(M3LoadX1EcCommand* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3LoadX1EcCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3LoadX1EcCommand_descriptor_;
  metadata.reflection = M3LoadX1EcCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3LoadX1EcParam::kDummyFieldNumber;
#endif  // !_MSC_VER

M3LoadX1EcParam::M3LoadX1EcParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3LoadX1EcParam::InitAsDefaultInstance() {
}

M3LoadX1EcParam::M3LoadX1EcParam(const M3LoadX1EcParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3LoadX1EcParam::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3LoadX1EcParam::~M3LoadX1EcParam() {
  SharedDtor();
}

void M3LoadX1EcParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3LoadX1EcParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3LoadX1EcParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3LoadX1EcParam_descriptor_;
}

const M3LoadX1EcParam& M3LoadX1EcParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loadx1_5fec_2eproto();  return *default_instance_;
}

M3LoadX1EcParam* M3LoadX1EcParam::default_instance_ = NULL;

M3LoadX1EcParam* M3LoadX1EcParam::New() const {
  return new M3LoadX1EcParam;
}

void M3LoadX1EcParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3LoadX1EcParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3LoadX1EcParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dummy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3LoadX1EcParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dummy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3LoadX1EcParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dummy = 1;
    if (has_dummy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dummy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3LoadX1EcParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3LoadX1EcParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3LoadX1EcParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3LoadX1EcParam::MergeFrom(const M3LoadX1EcParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3LoadX1EcParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3LoadX1EcParam::CopyFrom(const M3LoadX1EcParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3LoadX1EcParam::IsInitialized() const {
  
  return true;
}

void M3LoadX1EcParam::Swap(M3LoadX1EcParam* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3LoadX1EcParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3LoadX1EcParam_descriptor_;
  metadata.reflection = M3LoadX1EcParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
