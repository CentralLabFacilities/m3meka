// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_monitor.proto

#ifndef PROTOBUF_robot_5fmonitor_2eproto__INCLUDED
#define PROTOBUF_robot_5fmonitor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "component_base.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_robot_5fmonitor_2eproto();
void protobuf_AssignDesc_robot_5fmonitor_2eproto();
void protobuf_ShutdownFile_robot_5fmonitor_2eproto();

class M3RobotMonitorComponentStatus;
class M3RobotMonitorStatus;
class M3RobotMonitorCommand;
class M3RobotMonitorComponentParam;
class M3RobotMonitorParam;

enum ROBOT_MONITOR_STATE {
  ROBOT_MONITOR_OKAY = 0,
  ROBOT_MONITOR_LOW_WARN = 1,
  ROBOT_MONITOR_HIGH_WARN = 2,
  ROBOT_MONITOR_LOW_ERR = 3,
  ROBOT_MONITOR_HIGH_ERR = 4
};
bool ROBOT_MONITOR_STATE_IsValid(int value);
const ROBOT_MONITOR_STATE ROBOT_MONITOR_STATE_MIN = ROBOT_MONITOR_OKAY;
const ROBOT_MONITOR_STATE ROBOT_MONITOR_STATE_MAX = ROBOT_MONITOR_HIGH_ERR;
const int ROBOT_MONITOR_STATE_ARRAYSIZE = ROBOT_MONITOR_STATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ROBOT_MONITOR_STATE_descriptor();
inline const ::std::string& ROBOT_MONITOR_STATE_Name(ROBOT_MONITOR_STATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ROBOT_MONITOR_STATE_descriptor(), value);
}
inline bool ROBOT_MONITOR_STATE_Parse(
    const ::std::string& name, ROBOT_MONITOR_STATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ROBOT_MONITOR_STATE>(
    ROBOT_MONITOR_STATE_descriptor(), name, value);
}
// ===================================================================

class M3RobotMonitorComponentStatus : public ::google::protobuf::Message {
 public:
  M3RobotMonitorComponentStatus();
  virtual ~M3RobotMonitorComponentStatus();
  
  M3RobotMonitorComponentStatus(const M3RobotMonitorComponentStatus& from);
  
  inline M3RobotMonitorComponentStatus& operator=(const M3RobotMonitorComponentStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3RobotMonitorComponentStatus& default_instance();
  
  void Swap(M3RobotMonitorComponentStatus* other);
  
  // implements Message ----------------------------------------------
  
  M3RobotMonitorComponentStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3RobotMonitorComponentStatus& from);
  void MergeFrom(const M3RobotMonitorComponentStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string component_name = 1;
  inline bool has_component_name() const;
  inline void clear_component_name();
  static const int kComponentNameFieldNumber = 1;
  inline const ::std::string& component_name() const;
  inline void set_component_name(const ::std::string& value);
  inline void set_component_name(const char* value);
  inline void set_component_name(const char* value, size_t size);
  inline ::std::string* mutable_component_name();
  inline ::std::string* release_component_name();
  
  // optional .ROBOT_MONITOR_STATE state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ROBOT_MONITOR_STATE state() const;
  inline void set_state(ROBOT_MONITOR_STATE value);
  
  // optional string msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  // @@protoc_insertion_point(class_scope:M3RobotMonitorComponentStatus)
 private:
  inline void set_has_component_name();
  inline void clear_has_component_name();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_msg();
  inline void clear_has_msg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* component_name_;
  ::std::string* msg_;
  int state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_robot_5fmonitor_2eproto();
  friend void protobuf_AssignDesc_robot_5fmonitor_2eproto();
  friend void protobuf_ShutdownFile_robot_5fmonitor_2eproto();
  
  void InitAsDefaultInstance();
  static M3RobotMonitorComponentStatus* default_instance_;
};
// -------------------------------------------------------------------

class M3RobotMonitorStatus : public ::google::protobuf::Message {
 public:
  M3RobotMonitorStatus();
  virtual ~M3RobotMonitorStatus();
  
  M3RobotMonitorStatus(const M3RobotMonitorStatus& from);
  
  inline M3RobotMonitorStatus& operator=(const M3RobotMonitorStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3RobotMonitorStatus& default_instance();
  
  void Swap(M3RobotMonitorStatus* other);
  
  // implements Message ----------------------------------------------
  
  M3RobotMonitorStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3RobotMonitorStatus& from);
  void MergeFrom(const M3RobotMonitorStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .M3BaseStatus base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::M3BaseStatus& base() const;
  inline ::M3BaseStatus* mutable_base();
  inline ::M3BaseStatus* release_base();
  
  // repeated .M3RobotMonitorComponentStatus volt_comp = 2;
  inline int volt_comp_size() const;
  inline void clear_volt_comp();
  static const int kVoltCompFieldNumber = 2;
  inline const ::M3RobotMonitorComponentStatus& volt_comp(int index) const;
  inline ::M3RobotMonitorComponentStatus* mutable_volt_comp(int index);
  inline ::M3RobotMonitorComponentStatus* add_volt_comp();
  inline const ::google::protobuf::RepeatedPtrField< ::M3RobotMonitorComponentStatus >&
      volt_comp() const;
  inline ::google::protobuf::RepeatedPtrField< ::M3RobotMonitorComponentStatus >*
      mutable_volt_comp();
  
  // repeated .M3RobotMonitorComponentStatus temp_comp = 3;
  inline int temp_comp_size() const;
  inline void clear_temp_comp();
  static const int kTempCompFieldNumber = 3;
  inline const ::M3RobotMonitorComponentStatus& temp_comp(int index) const;
  inline ::M3RobotMonitorComponentStatus* mutable_temp_comp(int index);
  inline ::M3RobotMonitorComponentStatus* add_temp_comp();
  inline const ::google::protobuf::RepeatedPtrField< ::M3RobotMonitorComponentStatus >&
      temp_comp() const;
  inline ::google::protobuf::RepeatedPtrField< ::M3RobotMonitorComponentStatus >*
      mutable_temp_comp();
  
  // @@protoc_insertion_point(class_scope:M3RobotMonitorStatus)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::M3BaseStatus* base_;
  ::google::protobuf::RepeatedPtrField< ::M3RobotMonitorComponentStatus > volt_comp_;
  ::google::protobuf::RepeatedPtrField< ::M3RobotMonitorComponentStatus > temp_comp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_robot_5fmonitor_2eproto();
  friend void protobuf_AssignDesc_robot_5fmonitor_2eproto();
  friend void protobuf_ShutdownFile_robot_5fmonitor_2eproto();
  
  void InitAsDefaultInstance();
  static M3RobotMonitorStatus* default_instance_;
};
// -------------------------------------------------------------------

class M3RobotMonitorCommand : public ::google::protobuf::Message {
 public:
  M3RobotMonitorCommand();
  virtual ~M3RobotMonitorCommand();
  
  M3RobotMonitorCommand(const M3RobotMonitorCommand& from);
  
  inline M3RobotMonitorCommand& operator=(const M3RobotMonitorCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3RobotMonitorCommand& default_instance();
  
  void Swap(M3RobotMonitorCommand* other);
  
  // implements Message ----------------------------------------------
  
  M3RobotMonitorCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3RobotMonitorCommand& from);
  void MergeFrom(const M3RobotMonitorCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 force_safe_op = 1;
  inline bool has_force_safe_op() const;
  inline void clear_force_safe_op();
  static const int kForceSafeOpFieldNumber = 1;
  inline ::google::protobuf::int32 force_safe_op() const;
  inline void set_force_safe_op(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:M3RobotMonitorCommand)
 private:
  inline void set_has_force_safe_op();
  inline void clear_has_force_safe_op();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 force_safe_op_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_robot_5fmonitor_2eproto();
  friend void protobuf_AssignDesc_robot_5fmonitor_2eproto();
  friend void protobuf_ShutdownFile_robot_5fmonitor_2eproto();
  
  void InitAsDefaultInstance();
  static M3RobotMonitorCommand* default_instance_;
};
// -------------------------------------------------------------------

class M3RobotMonitorComponentParam : public ::google::protobuf::Message {
 public:
  M3RobotMonitorComponentParam();
  virtual ~M3RobotMonitorComponentParam();
  
  M3RobotMonitorComponentParam(const M3RobotMonitorComponentParam& from);
  
  inline M3RobotMonitorComponentParam& operator=(const M3RobotMonitorComponentParam& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3RobotMonitorComponentParam& default_instance();
  
  void Swap(M3RobotMonitorComponentParam* other);
  
  // implements Message ----------------------------------------------
  
  M3RobotMonitorComponentParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3RobotMonitorComponentParam& from);
  void MergeFrom(const M3RobotMonitorComponentParam& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional double max_val_warn = 1;
  inline bool has_max_val_warn() const;
  inline void clear_max_val_warn();
  static const int kMaxValWarnFieldNumber = 1;
  inline double max_val_warn() const;
  inline void set_max_val_warn(double value);
  
  // optional double min_val_warn = 2;
  inline bool has_min_val_warn() const;
  inline void clear_min_val_warn();
  static const int kMinValWarnFieldNumber = 2;
  inline double min_val_warn() const;
  inline void set_min_val_warn(double value);
  
  // optional double max_val_err = 3;
  inline bool has_max_val_err() const;
  inline void clear_max_val_err();
  static const int kMaxValErrFieldNumber = 3;
  inline double max_val_err() const;
  inline void set_max_val_err(double value);
  
  // optional double min_val_err = 4;
  inline bool has_min_val_err() const;
  inline void clear_min_val_err();
  static const int kMinValErrFieldNumber = 4;
  inline double min_val_err() const;
  inline void set_min_val_err(double value);
  
  // optional string component_name = 5;
  inline bool has_component_name() const;
  inline void clear_component_name();
  static const int kComponentNameFieldNumber = 5;
  inline const ::std::string& component_name() const;
  inline void set_component_name(const ::std::string& value);
  inline void set_component_name(const char* value);
  inline void set_component_name(const char* value, size_t size);
  inline ::std::string* mutable_component_name();
  inline ::std::string* release_component_name();
  
  // @@protoc_insertion_point(class_scope:M3RobotMonitorComponentParam)
 private:
  inline void set_has_max_val_warn();
  inline void clear_has_max_val_warn();
  inline void set_has_min_val_warn();
  inline void clear_has_min_val_warn();
  inline void set_has_max_val_err();
  inline void clear_has_max_val_err();
  inline void set_has_min_val_err();
  inline void clear_has_min_val_err();
  inline void set_has_component_name();
  inline void clear_has_component_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double max_val_warn_;
  double min_val_warn_;
  double max_val_err_;
  double min_val_err_;
  ::std::string* component_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_robot_5fmonitor_2eproto();
  friend void protobuf_AssignDesc_robot_5fmonitor_2eproto();
  friend void protobuf_ShutdownFile_robot_5fmonitor_2eproto();
  
  void InitAsDefaultInstance();
  static M3RobotMonitorComponentParam* default_instance_;
};
// -------------------------------------------------------------------

class M3RobotMonitorParam : public ::google::protobuf::Message {
 public:
  M3RobotMonitorParam();
  virtual ~M3RobotMonitorParam();
  
  M3RobotMonitorParam(const M3RobotMonitorParam& from);
  
  inline M3RobotMonitorParam& operator=(const M3RobotMonitorParam& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3RobotMonitorParam& default_instance();
  
  void Swap(M3RobotMonitorParam* other);
  
  // implements Message ----------------------------------------------
  
  M3RobotMonitorParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3RobotMonitorParam& from);
  void MergeFrom(const M3RobotMonitorParam& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .M3RobotMonitorComponentParam volt_comp = 1;
  inline int volt_comp_size() const;
  inline void clear_volt_comp();
  static const int kVoltCompFieldNumber = 1;
  inline const ::M3RobotMonitorComponentParam& volt_comp(int index) const;
  inline ::M3RobotMonitorComponentParam* mutable_volt_comp(int index);
  inline ::M3RobotMonitorComponentParam* add_volt_comp();
  inline const ::google::protobuf::RepeatedPtrField< ::M3RobotMonitorComponentParam >&
      volt_comp() const;
  inline ::google::protobuf::RepeatedPtrField< ::M3RobotMonitorComponentParam >*
      mutable_volt_comp();
  
  // repeated .M3RobotMonitorComponentParam temp_comp = 2;
  inline int temp_comp_size() const;
  inline void clear_temp_comp();
  static const int kTempCompFieldNumber = 2;
  inline const ::M3RobotMonitorComponentParam& temp_comp(int index) const;
  inline ::M3RobotMonitorComponentParam* mutable_temp_comp(int index);
  inline ::M3RobotMonitorComponentParam* add_temp_comp();
  inline const ::google::protobuf::RepeatedPtrField< ::M3RobotMonitorComponentParam >&
      temp_comp() const;
  inline ::google::protobuf::RepeatedPtrField< ::M3RobotMonitorComponentParam >*
      mutable_temp_comp();
  
  // @@protoc_insertion_point(class_scope:M3RobotMonitorParam)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::M3RobotMonitorComponentParam > volt_comp_;
  ::google::protobuf::RepeatedPtrField< ::M3RobotMonitorComponentParam > temp_comp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_robot_5fmonitor_2eproto();
  friend void protobuf_AssignDesc_robot_5fmonitor_2eproto();
  friend void protobuf_ShutdownFile_robot_5fmonitor_2eproto();
  
  void InitAsDefaultInstance();
  static M3RobotMonitorParam* default_instance_;
};
// ===================================================================


// ===================================================================

// M3RobotMonitorComponentStatus

// optional string component_name = 1;
inline bool M3RobotMonitorComponentStatus::has_component_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3RobotMonitorComponentStatus::set_has_component_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3RobotMonitorComponentStatus::clear_has_component_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3RobotMonitorComponentStatus::clear_component_name() {
  if (component_name_ != &::google::protobuf::internal::kEmptyString) {
    component_name_->clear();
  }
  clear_has_component_name();
}
inline const ::std::string& M3RobotMonitorComponentStatus::component_name() const {
  return *component_name_;
}
inline void M3RobotMonitorComponentStatus::set_component_name(const ::std::string& value) {
  set_has_component_name();
  if (component_name_ == &::google::protobuf::internal::kEmptyString) {
    component_name_ = new ::std::string;
  }
  component_name_->assign(value);
}
inline void M3RobotMonitorComponentStatus::set_component_name(const char* value) {
  set_has_component_name();
  if (component_name_ == &::google::protobuf::internal::kEmptyString) {
    component_name_ = new ::std::string;
  }
  component_name_->assign(value);
}
inline void M3RobotMonitorComponentStatus::set_component_name(const char* value, size_t size) {
  set_has_component_name();
  if (component_name_ == &::google::protobuf::internal::kEmptyString) {
    component_name_ = new ::std::string;
  }
  component_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* M3RobotMonitorComponentStatus::mutable_component_name() {
  set_has_component_name();
  if (component_name_ == &::google::protobuf::internal::kEmptyString) {
    component_name_ = new ::std::string;
  }
  return component_name_;
}
inline ::std::string* M3RobotMonitorComponentStatus::release_component_name() {
  clear_has_component_name();
  if (component_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = component_name_;
    component_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .ROBOT_MONITOR_STATE state = 2;
inline bool M3RobotMonitorComponentStatus::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void M3RobotMonitorComponentStatus::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void M3RobotMonitorComponentStatus::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void M3RobotMonitorComponentStatus::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ROBOT_MONITOR_STATE M3RobotMonitorComponentStatus::state() const {
  return static_cast< ROBOT_MONITOR_STATE >(state_);
}
inline void M3RobotMonitorComponentStatus::set_state(ROBOT_MONITOR_STATE value) {
  GOOGLE_DCHECK(ROBOT_MONITOR_STATE_IsValid(value));
  set_has_state();
  state_ = value;
}

// optional string msg = 3;
inline bool M3RobotMonitorComponentStatus::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void M3RobotMonitorComponentStatus::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void M3RobotMonitorComponentStatus::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void M3RobotMonitorComponentStatus::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& M3RobotMonitorComponentStatus::msg() const {
  return *msg_;
}
inline void M3RobotMonitorComponentStatus::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void M3RobotMonitorComponentStatus::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void M3RobotMonitorComponentStatus::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* M3RobotMonitorComponentStatus::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* M3RobotMonitorComponentStatus::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// M3RobotMonitorStatus

// optional .M3BaseStatus base = 1;
inline bool M3RobotMonitorStatus::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3RobotMonitorStatus::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3RobotMonitorStatus::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3RobotMonitorStatus::clear_base() {
  if (base_ != NULL) base_->::M3BaseStatus::Clear();
  clear_has_base();
}
inline const ::M3BaseStatus& M3RobotMonitorStatus::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::M3BaseStatus* M3RobotMonitorStatus::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::M3BaseStatus;
  return base_;
}
inline ::M3BaseStatus* M3RobotMonitorStatus::release_base() {
  clear_has_base();
  ::M3BaseStatus* temp = base_;
  base_ = NULL;
  return temp;
}

// repeated .M3RobotMonitorComponentStatus volt_comp = 2;
inline int M3RobotMonitorStatus::volt_comp_size() const {
  return volt_comp_.size();
}
inline void M3RobotMonitorStatus::clear_volt_comp() {
  volt_comp_.Clear();
}
inline const ::M3RobotMonitorComponentStatus& M3RobotMonitorStatus::volt_comp(int index) const {
  return volt_comp_.Get(index);
}
inline ::M3RobotMonitorComponentStatus* M3RobotMonitorStatus::mutable_volt_comp(int index) {
  return volt_comp_.Mutable(index);
}
inline ::M3RobotMonitorComponentStatus* M3RobotMonitorStatus::add_volt_comp() {
  return volt_comp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::M3RobotMonitorComponentStatus >&
M3RobotMonitorStatus::volt_comp() const {
  return volt_comp_;
}
inline ::google::protobuf::RepeatedPtrField< ::M3RobotMonitorComponentStatus >*
M3RobotMonitorStatus::mutable_volt_comp() {
  return &volt_comp_;
}

// repeated .M3RobotMonitorComponentStatus temp_comp = 3;
inline int M3RobotMonitorStatus::temp_comp_size() const {
  return temp_comp_.size();
}
inline void M3RobotMonitorStatus::clear_temp_comp() {
  temp_comp_.Clear();
}
inline const ::M3RobotMonitorComponentStatus& M3RobotMonitorStatus::temp_comp(int index) const {
  return temp_comp_.Get(index);
}
inline ::M3RobotMonitorComponentStatus* M3RobotMonitorStatus::mutable_temp_comp(int index) {
  return temp_comp_.Mutable(index);
}
inline ::M3RobotMonitorComponentStatus* M3RobotMonitorStatus::add_temp_comp() {
  return temp_comp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::M3RobotMonitorComponentStatus >&
M3RobotMonitorStatus::temp_comp() const {
  return temp_comp_;
}
inline ::google::protobuf::RepeatedPtrField< ::M3RobotMonitorComponentStatus >*
M3RobotMonitorStatus::mutable_temp_comp() {
  return &temp_comp_;
}

// -------------------------------------------------------------------

// M3RobotMonitorCommand

// optional int32 force_safe_op = 1;
inline bool M3RobotMonitorCommand::has_force_safe_op() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3RobotMonitorCommand::set_has_force_safe_op() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3RobotMonitorCommand::clear_has_force_safe_op() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3RobotMonitorCommand::clear_force_safe_op() {
  force_safe_op_ = 0;
  clear_has_force_safe_op();
}
inline ::google::protobuf::int32 M3RobotMonitorCommand::force_safe_op() const {
  return force_safe_op_;
}
inline void M3RobotMonitorCommand::set_force_safe_op(::google::protobuf::int32 value) {
  set_has_force_safe_op();
  force_safe_op_ = value;
}

// -------------------------------------------------------------------

// M3RobotMonitorComponentParam

// optional double max_val_warn = 1;
inline bool M3RobotMonitorComponentParam::has_max_val_warn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3RobotMonitorComponentParam::set_has_max_val_warn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3RobotMonitorComponentParam::clear_has_max_val_warn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3RobotMonitorComponentParam::clear_max_val_warn() {
  max_val_warn_ = 0;
  clear_has_max_val_warn();
}
inline double M3RobotMonitorComponentParam::max_val_warn() const {
  return max_val_warn_;
}
inline void M3RobotMonitorComponentParam::set_max_val_warn(double value) {
  set_has_max_val_warn();
  max_val_warn_ = value;
}

// optional double min_val_warn = 2;
inline bool M3RobotMonitorComponentParam::has_min_val_warn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void M3RobotMonitorComponentParam::set_has_min_val_warn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void M3RobotMonitorComponentParam::clear_has_min_val_warn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void M3RobotMonitorComponentParam::clear_min_val_warn() {
  min_val_warn_ = 0;
  clear_has_min_val_warn();
}
inline double M3RobotMonitorComponentParam::min_val_warn() const {
  return min_val_warn_;
}
inline void M3RobotMonitorComponentParam::set_min_val_warn(double value) {
  set_has_min_val_warn();
  min_val_warn_ = value;
}

// optional double max_val_err = 3;
inline bool M3RobotMonitorComponentParam::has_max_val_err() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void M3RobotMonitorComponentParam::set_has_max_val_err() {
  _has_bits_[0] |= 0x00000004u;
}
inline void M3RobotMonitorComponentParam::clear_has_max_val_err() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void M3RobotMonitorComponentParam::clear_max_val_err() {
  max_val_err_ = 0;
  clear_has_max_val_err();
}
inline double M3RobotMonitorComponentParam::max_val_err() const {
  return max_val_err_;
}
inline void M3RobotMonitorComponentParam::set_max_val_err(double value) {
  set_has_max_val_err();
  max_val_err_ = value;
}

// optional double min_val_err = 4;
inline bool M3RobotMonitorComponentParam::has_min_val_err() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void M3RobotMonitorComponentParam::set_has_min_val_err() {
  _has_bits_[0] |= 0x00000008u;
}
inline void M3RobotMonitorComponentParam::clear_has_min_val_err() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void M3RobotMonitorComponentParam::clear_min_val_err() {
  min_val_err_ = 0;
  clear_has_min_val_err();
}
inline double M3RobotMonitorComponentParam::min_val_err() const {
  return min_val_err_;
}
inline void M3RobotMonitorComponentParam::set_min_val_err(double value) {
  set_has_min_val_err();
  min_val_err_ = value;
}

// optional string component_name = 5;
inline bool M3RobotMonitorComponentParam::has_component_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void M3RobotMonitorComponentParam::set_has_component_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void M3RobotMonitorComponentParam::clear_has_component_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void M3RobotMonitorComponentParam::clear_component_name() {
  if (component_name_ != &::google::protobuf::internal::kEmptyString) {
    component_name_->clear();
  }
  clear_has_component_name();
}
inline const ::std::string& M3RobotMonitorComponentParam::component_name() const {
  return *component_name_;
}
inline void M3RobotMonitorComponentParam::set_component_name(const ::std::string& value) {
  set_has_component_name();
  if (component_name_ == &::google::protobuf::internal::kEmptyString) {
    component_name_ = new ::std::string;
  }
  component_name_->assign(value);
}
inline void M3RobotMonitorComponentParam::set_component_name(const char* value) {
  set_has_component_name();
  if (component_name_ == &::google::protobuf::internal::kEmptyString) {
    component_name_ = new ::std::string;
  }
  component_name_->assign(value);
}
inline void M3RobotMonitorComponentParam::set_component_name(const char* value, size_t size) {
  set_has_component_name();
  if (component_name_ == &::google::protobuf::internal::kEmptyString) {
    component_name_ = new ::std::string;
  }
  component_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* M3RobotMonitorComponentParam::mutable_component_name() {
  set_has_component_name();
  if (component_name_ == &::google::protobuf::internal::kEmptyString) {
    component_name_ = new ::std::string;
  }
  return component_name_;
}
inline ::std::string* M3RobotMonitorComponentParam::release_component_name() {
  clear_has_component_name();
  if (component_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = component_name_;
    component_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// M3RobotMonitorParam

// repeated .M3RobotMonitorComponentParam volt_comp = 1;
inline int M3RobotMonitorParam::volt_comp_size() const {
  return volt_comp_.size();
}
inline void M3RobotMonitorParam::clear_volt_comp() {
  volt_comp_.Clear();
}
inline const ::M3RobotMonitorComponentParam& M3RobotMonitorParam::volt_comp(int index) const {
  return volt_comp_.Get(index);
}
inline ::M3RobotMonitorComponentParam* M3RobotMonitorParam::mutable_volt_comp(int index) {
  return volt_comp_.Mutable(index);
}
inline ::M3RobotMonitorComponentParam* M3RobotMonitorParam::add_volt_comp() {
  return volt_comp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::M3RobotMonitorComponentParam >&
M3RobotMonitorParam::volt_comp() const {
  return volt_comp_;
}
inline ::google::protobuf::RepeatedPtrField< ::M3RobotMonitorComponentParam >*
M3RobotMonitorParam::mutable_volt_comp() {
  return &volt_comp_;
}

// repeated .M3RobotMonitorComponentParam temp_comp = 2;
inline int M3RobotMonitorParam::temp_comp_size() const {
  return temp_comp_.size();
}
inline void M3RobotMonitorParam::clear_temp_comp() {
  temp_comp_.Clear();
}
inline const ::M3RobotMonitorComponentParam& M3RobotMonitorParam::temp_comp(int index) const {
  return temp_comp_.Get(index);
}
inline ::M3RobotMonitorComponentParam* M3RobotMonitorParam::mutable_temp_comp(int index) {
  return temp_comp_.Mutable(index);
}
inline ::M3RobotMonitorComponentParam* M3RobotMonitorParam::add_temp_comp() {
  return temp_comp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::M3RobotMonitorComponentParam >&
M3RobotMonitorParam::temp_comp() const {
  return temp_comp_;
}
inline ::google::protobuf::RepeatedPtrField< ::M3RobotMonitorComponentParam >*
M3RobotMonitorParam::mutable_temp_comp() {
  return &temp_comp_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ROBOT_MONITOR_STATE>() {
  return ROBOT_MONITOR_STATE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_robot_5fmonitor_2eproto__INCLUDED
