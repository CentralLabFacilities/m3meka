// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "joint.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* M3JointStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3JointStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3JointParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3JointParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3JointCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3JointCommand_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* JOINT_MODE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_joint_2eproto() {
  protobuf_AddDesc_joint_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "joint.proto");
  GOOGLE_CHECK(file != NULL);
  M3JointStatus_descriptor_ = file->message_type(0);
  static const int M3JointStatus_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointStatus, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointStatus, motor_temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointStatus, amp_temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointStatus, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointStatus, torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointStatus, torquedot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointStatus, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointStatus, thetadot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointStatus, thetadotdot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointStatus, torque_gravity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointStatus, pwm_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointStatus, ambient_temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointStatus, case_temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointStatus, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointStatus, flags_),
  };
  M3JointStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3JointStatus_descriptor_,
      M3JointStatus::default_instance_,
      M3JointStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3JointStatus));
  M3JointParam_descriptor_ = file->message_type(1);
  static const int M3JointParam_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, kq_p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, kq_i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, kq_d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, kq_i_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, max_q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, min_q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, kt_p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, kt_i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, kt_d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, kt_i_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, kq_g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, max_q_slew_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, kq_i_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, kt_i_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, max_q_pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, min_q_pad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, kq_d_pose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, kq_p_tq_gm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, kq_i_tq_gm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, kq_d_tq_gm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, kq_i_limit_tq_gm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, kq_i_range_tq_gm_),
  };
  M3JointParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3JointParam_descriptor_,
      M3JointParam::default_instance_,
      M3JointParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3JointParam));
  M3JointCommand_descriptor_ = file->message_type(2);
  static const int M3JointCommand_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointCommand, tq_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointCommand, q_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointCommand, pwm_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointCommand, q_stiffness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointCommand, ctrl_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointCommand, qdot_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointCommand, q_slew_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointCommand, brake_off_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointCommand, smoothing_mode_),
  };
  M3JointCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3JointCommand_descriptor_,
      M3JointCommand::default_instance_,
      M3JointCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3JointCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3JointCommand));
  JOINT_MODE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_joint_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3JointStatus_descriptor_, &M3JointStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3JointParam_descriptor_, &M3JointParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3JointCommand_descriptor_, &M3JointCommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_joint_2eproto() {
  delete M3JointStatus::default_instance_;
  delete M3JointStatus_reflection_;
  delete M3JointParam::default_instance_;
  delete M3JointParam_reflection_;
  delete M3JointCommand::default_instance_;
  delete M3JointCommand_reflection_;
}

void protobuf_AddDesc_joint_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_component_5fbase_2eproto();
  ::protobuf_AddDesc_smoothing_5fmode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013joint.proto\032\024component_base.proto\032\024smo"
    "othing_mode.proto\"\254\002\n\rM3JointStatus\022\033\n\004b"
    "ase\030\001 \001(\0132\r.M3BaseStatus\022\022\n\nmotor_temp\030\002"
    " \001(\001\022\020\n\010amp_temp\030\003 \001(\001\022\017\n\007current\030\004 \001(\001\022"
    "\016\n\006torque\030\006 \001(\001\022\021\n\ttorquedot\030\007 \001(\001\022\r\n\005th"
    "eta\030\010 \001(\001\022\020\n\010thetadot\030\t \001(\001\022\023\n\013thetadotd"
    "ot\030\n \001(\001\022\026\n\016torque_gravity\030\013 \001(\001\022\017\n\007pwm_"
    "cmd\030\014 \001(\005\022\024\n\014ambient_temp\030\r \001(\001\022\021\n\tcase_"
    "temp\030\016 \001(\001\022\r\n\005power\030\017 \001(\001\022\r\n\005flags\030\020 \001(\005"
    "\"\240\003\n\014M3JointParam\022\014\n\004kq_p\030\001 \001(\001\022\014\n\004kq_i\030"
    "\002 \001(\001\022\014\n\004kq_d\030\003 \001(\001\022\022\n\nkq_i_limit\030\004 \001(\001\022"
    "\r\n\005max_q\030\005 \001(\001\022\r\n\005min_q\030\006 \001(\001\022\014\n\004kt_p\030\007 "
    "\001(\001\022\014\n\004kt_i\030\010 \001(\001\022\014\n\004kt_d\030\t \001(\001\022\022\n\nkt_i_"
    "limit\030\n \001(\001\022\014\n\004kq_g\030\013 \001(\001\022\027\n\017max_q_slew_"
    "rate\030\014 \001(\001\022\022\n\nkq_i_range\030\r \001(\001\022\022\n\nkt_i_r"
    "ange\030\016 \001(\001\022\021\n\tmax_q_pad\030\017 \001(\001\022\021\n\tmin_q_p"
    "ad\030\020 \001(\001\022\021\n\tkq_d_pose\030\021 \001(\001\022\022\n\nkq_p_tq_g"
    "m\030\022 \001(\001\022\022\n\nkq_i_tq_gm\030\023 \001(\001\022\022\n\nkq_d_tq_g"
    "m\030\024 \001(\001\022\030\n\020kq_i_limit_tq_gm\030\025 \001(\001\022\030\n\020kq_"
    "i_range_tq_gm\030\026 \001(\001\"\350\001\n\016M3JointCommand\022\022"
    "\n\ntq_desired\030\001 \001(\001\022\021\n\tq_desired\030\002 \001(\001\022\023\n"
    "\013pwm_desired\030\003 \001(\005\022\023\n\013q_stiffness\030\004 \001(\001\022"
    "\036\n\tctrl_mode\030\005 \001(\0162\013.JOINT_MODE\022\024\n\014qdot_"
    "desired\030\006 \001(\001\022\023\n\013q_slew_rate\030\007 \001(\001\022\021\n\tbr"
    "ake_off\030\010 \001(\010\022\'\n\016smoothing_mode\030\t \001(\0162\017."
    "SMOOTHING_MODE*\200\002\n\nJOINT_MODE\022\022\n\016JOINT_M"
    "ODE_OFF\020\000\022\022\n\016JOINT_MODE_PWM\020\001\022\025\n\021JOINT_M"
    "ODE_TORQUE\020\002\022\024\n\020JOINT_MODE_THETA\020\003\022\030\n\024JO"
    "INT_MODE_TORQUE_GC\020\004\022\027\n\023JOINT_MODE_THETA"
    "_GC\020\005\022\027\n\023JOINT_MODE_THETA_MJ\020\006\022\032\n\026JOINT_"
    "MODE_THETA_GC_MJ\020\007\022\023\n\017JOINT_MODE_POSE\020\010\022"
    " \n\034JOINT_MODE_TORQUE_GRAV_MODEL\020\tB\002H\001", 1277);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "joint.proto", &protobuf_RegisterTypes);
  M3JointStatus::default_instance_ = new M3JointStatus();
  M3JointParam::default_instance_ = new M3JointParam();
  M3JointCommand::default_instance_ = new M3JointCommand();
  M3JointStatus::default_instance_->InitAsDefaultInstance();
  M3JointParam::default_instance_->InitAsDefaultInstance();
  M3JointCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_joint_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_joint_2eproto {
  StaticDescriptorInitializer_joint_2eproto() {
    protobuf_AddDesc_joint_2eproto();
  }
} static_descriptor_initializer_joint_2eproto_;

const ::google::protobuf::EnumDescriptor* JOINT_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JOINT_MODE_descriptor_;
}
bool JOINT_MODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int M3JointStatus::kBaseFieldNumber;
const int M3JointStatus::kMotorTempFieldNumber;
const int M3JointStatus::kAmpTempFieldNumber;
const int M3JointStatus::kCurrentFieldNumber;
const int M3JointStatus::kTorqueFieldNumber;
const int M3JointStatus::kTorquedotFieldNumber;
const int M3JointStatus::kThetaFieldNumber;
const int M3JointStatus::kThetadotFieldNumber;
const int M3JointStatus::kThetadotdotFieldNumber;
const int M3JointStatus::kTorqueGravityFieldNumber;
const int M3JointStatus::kPwmCmdFieldNumber;
const int M3JointStatus::kAmbientTempFieldNumber;
const int M3JointStatus::kCaseTempFieldNumber;
const int M3JointStatus::kPowerFieldNumber;
const int M3JointStatus::kFlagsFieldNumber;
#endif  // !_MSC_VER

M3JointStatus::M3JointStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3JointStatus::InitAsDefaultInstance() {
  base_ = const_cast< ::M3BaseStatus*>(&::M3BaseStatus::default_instance());
}

M3JointStatus::M3JointStatus(const M3JointStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3JointStatus::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  motor_temp_ = 0;
  amp_temp_ = 0;
  current_ = 0;
  torque_ = 0;
  torquedot_ = 0;
  theta_ = 0;
  thetadot_ = 0;
  thetadotdot_ = 0;
  torque_gravity_ = 0;
  pwm_cmd_ = 0;
  ambient_temp_ = 0;
  case_temp_ = 0;
  power_ = 0;
  flags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3JointStatus::~M3JointStatus() {
  SharedDtor();
}

void M3JointStatus::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void M3JointStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3JointStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3JointStatus_descriptor_;
}

const M3JointStatus& M3JointStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_joint_2eproto();  return *default_instance_;
}

M3JointStatus* M3JointStatus::default_instance_ = NULL;

M3JointStatus* M3JointStatus::New() const {
  return new M3JointStatus;
}

void M3JointStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::M3BaseStatus::Clear();
    }
    motor_temp_ = 0;
    amp_temp_ = 0;
    current_ = 0;
    torque_ = 0;
    torquedot_ = 0;
    theta_ = 0;
    thetadot_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    thetadotdot_ = 0;
    torque_gravity_ = 0;
    pwm_cmd_ = 0;
    ambient_temp_ = 0;
    case_temp_ = 0;
    power_ = 0;
    flags_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3JointStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseStatus base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_motor_temp;
        break;
      }
      
      // optional double motor_temp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_motor_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &motor_temp_)));
          set_has_motor_temp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_amp_temp;
        break;
      }
      
      // optional double amp_temp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_amp_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amp_temp_)));
          set_has_amp_temp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_current;
        break;
      }
      
      // optional double current = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &current_)));
          set_has_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_torque;
        break;
      }
      
      // optional double torque = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_torque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &torque_)));
          set_has_torque();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_torquedot;
        break;
      }
      
      // optional double torquedot = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_torquedot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &torquedot_)));
          set_has_torquedot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_theta;
        break;
      }
      
      // optional double theta = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
          set_has_theta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_thetadot;
        break;
      }
      
      // optional double thetadot = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_thetadot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &thetadot_)));
          set_has_thetadot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_thetadotdot;
        break;
      }
      
      // optional double thetadotdot = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_thetadotdot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &thetadotdot_)));
          set_has_thetadotdot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_torque_gravity;
        break;
      }
      
      // optional double torque_gravity = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_torque_gravity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &torque_gravity_)));
          set_has_torque_gravity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_pwm_cmd;
        break;
      }
      
      // optional int32 pwm_cmd = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pwm_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pwm_cmd_)));
          set_has_pwm_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_ambient_temp;
        break;
      }
      
      // optional double ambient_temp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ambient_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ambient_temp_)));
          set_has_ambient_temp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_case_temp;
        break;
      }
      
      // optional double case_temp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_case_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &case_temp_)));
          set_has_case_temp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_power;
        break;
      }
      
      // optional double power = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_flags;
        break;
      }
      
      // optional int32 flags = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3JointStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // optional double motor_temp = 2;
  if (has_motor_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->motor_temp(), output);
  }
  
  // optional double amp_temp = 3;
  if (has_amp_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->amp_temp(), output);
  }
  
  // optional double current = 4;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->current(), output);
  }
  
  // optional double torque = 6;
  if (has_torque()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->torque(), output);
  }
  
  // optional double torquedot = 7;
  if (has_torquedot()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->torquedot(), output);
  }
  
  // optional double theta = 8;
  if (has_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->theta(), output);
  }
  
  // optional double thetadot = 9;
  if (has_thetadot()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->thetadot(), output);
  }
  
  // optional double thetadotdot = 10;
  if (has_thetadotdot()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->thetadotdot(), output);
  }
  
  // optional double torque_gravity = 11;
  if (has_torque_gravity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->torque_gravity(), output);
  }
  
  // optional int32 pwm_cmd = 12;
  if (has_pwm_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->pwm_cmd(), output);
  }
  
  // optional double ambient_temp = 13;
  if (has_ambient_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->ambient_temp(), output);
  }
  
  // optional double case_temp = 14;
  if (has_case_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->case_temp(), output);
  }
  
  // optional double power = 15;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->power(), output);
  }
  
  // optional int32 flags = 16;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->flags(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3JointStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional double motor_temp = 2;
  if (has_motor_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->motor_temp(), target);
  }
  
  // optional double amp_temp = 3;
  if (has_amp_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->amp_temp(), target);
  }
  
  // optional double current = 4;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->current(), target);
  }
  
  // optional double torque = 6;
  if (has_torque()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->torque(), target);
  }
  
  // optional double torquedot = 7;
  if (has_torquedot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->torquedot(), target);
  }
  
  // optional double theta = 8;
  if (has_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->theta(), target);
  }
  
  // optional double thetadot = 9;
  if (has_thetadot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->thetadot(), target);
  }
  
  // optional double thetadotdot = 10;
  if (has_thetadotdot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->thetadotdot(), target);
  }
  
  // optional double torque_gravity = 11;
  if (has_torque_gravity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->torque_gravity(), target);
  }
  
  // optional int32 pwm_cmd = 12;
  if (has_pwm_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->pwm_cmd(), target);
  }
  
  // optional double ambient_temp = 13;
  if (has_ambient_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->ambient_temp(), target);
  }
  
  // optional double case_temp = 14;
  if (has_case_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->case_temp(), target);
  }
  
  // optional double power = 15;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->power(), target);
  }
  
  // optional int32 flags = 16;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->flags(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3JointStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseStatus base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional double motor_temp = 2;
    if (has_motor_temp()) {
      total_size += 1 + 8;
    }
    
    // optional double amp_temp = 3;
    if (has_amp_temp()) {
      total_size += 1 + 8;
    }
    
    // optional double current = 4;
    if (has_current()) {
      total_size += 1 + 8;
    }
    
    // optional double torque = 6;
    if (has_torque()) {
      total_size += 1 + 8;
    }
    
    // optional double torquedot = 7;
    if (has_torquedot()) {
      total_size += 1 + 8;
    }
    
    // optional double theta = 8;
    if (has_theta()) {
      total_size += 1 + 8;
    }
    
    // optional double thetadot = 9;
    if (has_thetadot()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double thetadotdot = 10;
    if (has_thetadotdot()) {
      total_size += 1 + 8;
    }
    
    // optional double torque_gravity = 11;
    if (has_torque_gravity()) {
      total_size += 1 + 8;
    }
    
    // optional int32 pwm_cmd = 12;
    if (has_pwm_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pwm_cmd());
    }
    
    // optional double ambient_temp = 13;
    if (has_ambient_temp()) {
      total_size += 1 + 8;
    }
    
    // optional double case_temp = 14;
    if (has_case_temp()) {
      total_size += 1 + 8;
    }
    
    // optional double power = 15;
    if (has_power()) {
      total_size += 1 + 8;
    }
    
    // optional int32 flags = 16;
    if (has_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3JointStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3JointStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3JointStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3JointStatus::MergeFrom(const M3JointStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::M3BaseStatus::MergeFrom(from.base());
    }
    if (from.has_motor_temp()) {
      set_motor_temp(from.motor_temp());
    }
    if (from.has_amp_temp()) {
      set_amp_temp(from.amp_temp());
    }
    if (from.has_current()) {
      set_current(from.current());
    }
    if (from.has_torque()) {
      set_torque(from.torque());
    }
    if (from.has_torquedot()) {
      set_torquedot(from.torquedot());
    }
    if (from.has_theta()) {
      set_theta(from.theta());
    }
    if (from.has_thetadot()) {
      set_thetadot(from.thetadot());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_thetadotdot()) {
      set_thetadotdot(from.thetadotdot());
    }
    if (from.has_torque_gravity()) {
      set_torque_gravity(from.torque_gravity());
    }
    if (from.has_pwm_cmd()) {
      set_pwm_cmd(from.pwm_cmd());
    }
    if (from.has_ambient_temp()) {
      set_ambient_temp(from.ambient_temp());
    }
    if (from.has_case_temp()) {
      set_case_temp(from.case_temp());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3JointStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3JointStatus::CopyFrom(const M3JointStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3JointStatus::IsInitialized() const {
  
  return true;
}

void M3JointStatus::Swap(M3JointStatus* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(motor_temp_, other->motor_temp_);
    std::swap(amp_temp_, other->amp_temp_);
    std::swap(current_, other->current_);
    std::swap(torque_, other->torque_);
    std::swap(torquedot_, other->torquedot_);
    std::swap(theta_, other->theta_);
    std::swap(thetadot_, other->thetadot_);
    std::swap(thetadotdot_, other->thetadotdot_);
    std::swap(torque_gravity_, other->torque_gravity_);
    std::swap(pwm_cmd_, other->pwm_cmd_);
    std::swap(ambient_temp_, other->ambient_temp_);
    std::swap(case_temp_, other->case_temp_);
    std::swap(power_, other->power_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3JointStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3JointStatus_descriptor_;
  metadata.reflection = M3JointStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3JointParam::kKqPFieldNumber;
const int M3JointParam::kKqIFieldNumber;
const int M3JointParam::kKqDFieldNumber;
const int M3JointParam::kKqILimitFieldNumber;
const int M3JointParam::kMaxQFieldNumber;
const int M3JointParam::kMinQFieldNumber;
const int M3JointParam::kKtPFieldNumber;
const int M3JointParam::kKtIFieldNumber;
const int M3JointParam::kKtDFieldNumber;
const int M3JointParam::kKtILimitFieldNumber;
const int M3JointParam::kKqGFieldNumber;
const int M3JointParam::kMaxQSlewRateFieldNumber;
const int M3JointParam::kKqIRangeFieldNumber;
const int M3JointParam::kKtIRangeFieldNumber;
const int M3JointParam::kMaxQPadFieldNumber;
const int M3JointParam::kMinQPadFieldNumber;
const int M3JointParam::kKqDPoseFieldNumber;
const int M3JointParam::kKqPTqGmFieldNumber;
const int M3JointParam::kKqITqGmFieldNumber;
const int M3JointParam::kKqDTqGmFieldNumber;
const int M3JointParam::kKqILimitTqGmFieldNumber;
const int M3JointParam::kKqIRangeTqGmFieldNumber;
#endif  // !_MSC_VER

M3JointParam::M3JointParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3JointParam::InitAsDefaultInstance() {
}

M3JointParam::M3JointParam(const M3JointParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3JointParam::SharedCtor() {
  _cached_size_ = 0;
  kq_p_ = 0;
  kq_i_ = 0;
  kq_d_ = 0;
  kq_i_limit_ = 0;
  max_q_ = 0;
  min_q_ = 0;
  kt_p_ = 0;
  kt_i_ = 0;
  kt_d_ = 0;
  kt_i_limit_ = 0;
  kq_g_ = 0;
  max_q_slew_rate_ = 0;
  kq_i_range_ = 0;
  kt_i_range_ = 0;
  max_q_pad_ = 0;
  min_q_pad_ = 0;
  kq_d_pose_ = 0;
  kq_p_tq_gm_ = 0;
  kq_i_tq_gm_ = 0;
  kq_d_tq_gm_ = 0;
  kq_i_limit_tq_gm_ = 0;
  kq_i_range_tq_gm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3JointParam::~M3JointParam() {
  SharedDtor();
}

void M3JointParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3JointParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3JointParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3JointParam_descriptor_;
}

const M3JointParam& M3JointParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_joint_2eproto();  return *default_instance_;
}

M3JointParam* M3JointParam::default_instance_ = NULL;

M3JointParam* M3JointParam::New() const {
  return new M3JointParam;
}

void M3JointParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kq_p_ = 0;
    kq_i_ = 0;
    kq_d_ = 0;
    kq_i_limit_ = 0;
    max_q_ = 0;
    min_q_ = 0;
    kt_p_ = 0;
    kt_i_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    kt_d_ = 0;
    kt_i_limit_ = 0;
    kq_g_ = 0;
    max_q_slew_rate_ = 0;
    kq_i_range_ = 0;
    kt_i_range_ = 0;
    max_q_pad_ = 0;
    min_q_pad_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    kq_d_pose_ = 0;
    kq_p_tq_gm_ = 0;
    kq_i_tq_gm_ = 0;
    kq_d_tq_gm_ = 0;
    kq_i_limit_tq_gm_ = 0;
    kq_i_range_tq_gm_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3JointParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double kq_p = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kq_p_)));
          set_has_kq_p();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_kq_i;
        break;
      }
      
      // optional double kq_i = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kq_i:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kq_i_)));
          set_has_kq_i();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_kq_d;
        break;
      }
      
      // optional double kq_d = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kq_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kq_d_)));
          set_has_kq_d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_kq_i_limit;
        break;
      }
      
      // optional double kq_i_limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kq_i_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kq_i_limit_)));
          set_has_kq_i_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_max_q;
        break;
      }
      
      // optional double max_q = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_q:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_q_)));
          set_has_max_q();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_min_q;
        break;
      }
      
      // optional double min_q = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_min_q:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_q_)));
          set_has_min_q();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_kt_p;
        break;
      }
      
      // optional double kt_p = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kt_p:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kt_p_)));
          set_has_kt_p();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_kt_i;
        break;
      }
      
      // optional double kt_i = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kt_i:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kt_i_)));
          set_has_kt_i();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_kt_d;
        break;
      }
      
      // optional double kt_d = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kt_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kt_d_)));
          set_has_kt_d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_kt_i_limit;
        break;
      }
      
      // optional double kt_i_limit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kt_i_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kt_i_limit_)));
          set_has_kt_i_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_kq_g;
        break;
      }
      
      // optional double kq_g = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kq_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kq_g_)));
          set_has_kq_g();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_max_q_slew_rate;
        break;
      }
      
      // optional double max_q_slew_rate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_q_slew_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_q_slew_rate_)));
          set_has_max_q_slew_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_kq_i_range;
        break;
      }
      
      // optional double kq_i_range = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kq_i_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kq_i_range_)));
          set_has_kq_i_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_kt_i_range;
        break;
      }
      
      // optional double kt_i_range = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kt_i_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kt_i_range_)));
          set_has_kt_i_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_max_q_pad;
        break;
      }
      
      // optional double max_q_pad = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_q_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_q_pad_)));
          set_has_max_q_pad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_min_q_pad;
        break;
      }
      
      // optional double min_q_pad = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_min_q_pad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_q_pad_)));
          set_has_min_q_pad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_kq_d_pose;
        break;
      }
      
      // optional double kq_d_pose = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kq_d_pose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kq_d_pose_)));
          set_has_kq_d_pose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_kq_p_tq_gm;
        break;
      }
      
      // optional double kq_p_tq_gm = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kq_p_tq_gm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kq_p_tq_gm_)));
          set_has_kq_p_tq_gm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_kq_i_tq_gm;
        break;
      }
      
      // optional double kq_i_tq_gm = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kq_i_tq_gm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kq_i_tq_gm_)));
          set_has_kq_i_tq_gm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_kq_d_tq_gm;
        break;
      }
      
      // optional double kq_d_tq_gm = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kq_d_tq_gm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kq_d_tq_gm_)));
          set_has_kq_d_tq_gm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_kq_i_limit_tq_gm;
        break;
      }
      
      // optional double kq_i_limit_tq_gm = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kq_i_limit_tq_gm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kq_i_limit_tq_gm_)));
          set_has_kq_i_limit_tq_gm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_kq_i_range_tq_gm;
        break;
      }
      
      // optional double kq_i_range_tq_gm = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_kq_i_range_tq_gm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kq_i_range_tq_gm_)));
          set_has_kq_i_range_tq_gm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3JointParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double kq_p = 1;
  if (has_kq_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->kq_p(), output);
  }
  
  // optional double kq_i = 2;
  if (has_kq_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->kq_i(), output);
  }
  
  // optional double kq_d = 3;
  if (has_kq_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->kq_d(), output);
  }
  
  // optional double kq_i_limit = 4;
  if (has_kq_i_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->kq_i_limit(), output);
  }
  
  // optional double max_q = 5;
  if (has_max_q()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->max_q(), output);
  }
  
  // optional double min_q = 6;
  if (has_min_q()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->min_q(), output);
  }
  
  // optional double kt_p = 7;
  if (has_kt_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->kt_p(), output);
  }
  
  // optional double kt_i = 8;
  if (has_kt_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->kt_i(), output);
  }
  
  // optional double kt_d = 9;
  if (has_kt_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->kt_d(), output);
  }
  
  // optional double kt_i_limit = 10;
  if (has_kt_i_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->kt_i_limit(), output);
  }
  
  // optional double kq_g = 11;
  if (has_kq_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->kq_g(), output);
  }
  
  // optional double max_q_slew_rate = 12;
  if (has_max_q_slew_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->max_q_slew_rate(), output);
  }
  
  // optional double kq_i_range = 13;
  if (has_kq_i_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->kq_i_range(), output);
  }
  
  // optional double kt_i_range = 14;
  if (has_kt_i_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->kt_i_range(), output);
  }
  
  // optional double max_q_pad = 15;
  if (has_max_q_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->max_q_pad(), output);
  }
  
  // optional double min_q_pad = 16;
  if (has_min_q_pad()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->min_q_pad(), output);
  }
  
  // optional double kq_d_pose = 17;
  if (has_kq_d_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->kq_d_pose(), output);
  }
  
  // optional double kq_p_tq_gm = 18;
  if (has_kq_p_tq_gm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->kq_p_tq_gm(), output);
  }
  
  // optional double kq_i_tq_gm = 19;
  if (has_kq_i_tq_gm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->kq_i_tq_gm(), output);
  }
  
  // optional double kq_d_tq_gm = 20;
  if (has_kq_d_tq_gm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->kq_d_tq_gm(), output);
  }
  
  // optional double kq_i_limit_tq_gm = 21;
  if (has_kq_i_limit_tq_gm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->kq_i_limit_tq_gm(), output);
  }
  
  // optional double kq_i_range_tq_gm = 22;
  if (has_kq_i_range_tq_gm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->kq_i_range_tq_gm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3JointParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double kq_p = 1;
  if (has_kq_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->kq_p(), target);
  }
  
  // optional double kq_i = 2;
  if (has_kq_i()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->kq_i(), target);
  }
  
  // optional double kq_d = 3;
  if (has_kq_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->kq_d(), target);
  }
  
  // optional double kq_i_limit = 4;
  if (has_kq_i_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->kq_i_limit(), target);
  }
  
  // optional double max_q = 5;
  if (has_max_q()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->max_q(), target);
  }
  
  // optional double min_q = 6;
  if (has_min_q()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->min_q(), target);
  }
  
  // optional double kt_p = 7;
  if (has_kt_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->kt_p(), target);
  }
  
  // optional double kt_i = 8;
  if (has_kt_i()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->kt_i(), target);
  }
  
  // optional double kt_d = 9;
  if (has_kt_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->kt_d(), target);
  }
  
  // optional double kt_i_limit = 10;
  if (has_kt_i_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->kt_i_limit(), target);
  }
  
  // optional double kq_g = 11;
  if (has_kq_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->kq_g(), target);
  }
  
  // optional double max_q_slew_rate = 12;
  if (has_max_q_slew_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->max_q_slew_rate(), target);
  }
  
  // optional double kq_i_range = 13;
  if (has_kq_i_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->kq_i_range(), target);
  }
  
  // optional double kt_i_range = 14;
  if (has_kt_i_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->kt_i_range(), target);
  }
  
  // optional double max_q_pad = 15;
  if (has_max_q_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->max_q_pad(), target);
  }
  
  // optional double min_q_pad = 16;
  if (has_min_q_pad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->min_q_pad(), target);
  }
  
  // optional double kq_d_pose = 17;
  if (has_kq_d_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->kq_d_pose(), target);
  }
  
  // optional double kq_p_tq_gm = 18;
  if (has_kq_p_tq_gm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->kq_p_tq_gm(), target);
  }
  
  // optional double kq_i_tq_gm = 19;
  if (has_kq_i_tq_gm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->kq_i_tq_gm(), target);
  }
  
  // optional double kq_d_tq_gm = 20;
  if (has_kq_d_tq_gm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->kq_d_tq_gm(), target);
  }
  
  // optional double kq_i_limit_tq_gm = 21;
  if (has_kq_i_limit_tq_gm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->kq_i_limit_tq_gm(), target);
  }
  
  // optional double kq_i_range_tq_gm = 22;
  if (has_kq_i_range_tq_gm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->kq_i_range_tq_gm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3JointParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double kq_p = 1;
    if (has_kq_p()) {
      total_size += 1 + 8;
    }
    
    // optional double kq_i = 2;
    if (has_kq_i()) {
      total_size += 1 + 8;
    }
    
    // optional double kq_d = 3;
    if (has_kq_d()) {
      total_size += 1 + 8;
    }
    
    // optional double kq_i_limit = 4;
    if (has_kq_i_limit()) {
      total_size += 1 + 8;
    }
    
    // optional double max_q = 5;
    if (has_max_q()) {
      total_size += 1 + 8;
    }
    
    // optional double min_q = 6;
    if (has_min_q()) {
      total_size += 1 + 8;
    }
    
    // optional double kt_p = 7;
    if (has_kt_p()) {
      total_size += 1 + 8;
    }
    
    // optional double kt_i = 8;
    if (has_kt_i()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double kt_d = 9;
    if (has_kt_d()) {
      total_size += 1 + 8;
    }
    
    // optional double kt_i_limit = 10;
    if (has_kt_i_limit()) {
      total_size += 1 + 8;
    }
    
    // optional double kq_g = 11;
    if (has_kq_g()) {
      total_size += 1 + 8;
    }
    
    // optional double max_q_slew_rate = 12;
    if (has_max_q_slew_rate()) {
      total_size += 1 + 8;
    }
    
    // optional double kq_i_range = 13;
    if (has_kq_i_range()) {
      total_size += 1 + 8;
    }
    
    // optional double kt_i_range = 14;
    if (has_kt_i_range()) {
      total_size += 1 + 8;
    }
    
    // optional double max_q_pad = 15;
    if (has_max_q_pad()) {
      total_size += 1 + 8;
    }
    
    // optional double min_q_pad = 16;
    if (has_min_q_pad()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double kq_d_pose = 17;
    if (has_kq_d_pose()) {
      total_size += 2 + 8;
    }
    
    // optional double kq_p_tq_gm = 18;
    if (has_kq_p_tq_gm()) {
      total_size += 2 + 8;
    }
    
    // optional double kq_i_tq_gm = 19;
    if (has_kq_i_tq_gm()) {
      total_size += 2 + 8;
    }
    
    // optional double kq_d_tq_gm = 20;
    if (has_kq_d_tq_gm()) {
      total_size += 2 + 8;
    }
    
    // optional double kq_i_limit_tq_gm = 21;
    if (has_kq_i_limit_tq_gm()) {
      total_size += 2 + 8;
    }
    
    // optional double kq_i_range_tq_gm = 22;
    if (has_kq_i_range_tq_gm()) {
      total_size += 2 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3JointParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3JointParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3JointParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3JointParam::MergeFrom(const M3JointParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kq_p()) {
      set_kq_p(from.kq_p());
    }
    if (from.has_kq_i()) {
      set_kq_i(from.kq_i());
    }
    if (from.has_kq_d()) {
      set_kq_d(from.kq_d());
    }
    if (from.has_kq_i_limit()) {
      set_kq_i_limit(from.kq_i_limit());
    }
    if (from.has_max_q()) {
      set_max_q(from.max_q());
    }
    if (from.has_min_q()) {
      set_min_q(from.min_q());
    }
    if (from.has_kt_p()) {
      set_kt_p(from.kt_p());
    }
    if (from.has_kt_i()) {
      set_kt_i(from.kt_i());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_kt_d()) {
      set_kt_d(from.kt_d());
    }
    if (from.has_kt_i_limit()) {
      set_kt_i_limit(from.kt_i_limit());
    }
    if (from.has_kq_g()) {
      set_kq_g(from.kq_g());
    }
    if (from.has_max_q_slew_rate()) {
      set_max_q_slew_rate(from.max_q_slew_rate());
    }
    if (from.has_kq_i_range()) {
      set_kq_i_range(from.kq_i_range());
    }
    if (from.has_kt_i_range()) {
      set_kt_i_range(from.kt_i_range());
    }
    if (from.has_max_q_pad()) {
      set_max_q_pad(from.max_q_pad());
    }
    if (from.has_min_q_pad()) {
      set_min_q_pad(from.min_q_pad());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_kq_d_pose()) {
      set_kq_d_pose(from.kq_d_pose());
    }
    if (from.has_kq_p_tq_gm()) {
      set_kq_p_tq_gm(from.kq_p_tq_gm());
    }
    if (from.has_kq_i_tq_gm()) {
      set_kq_i_tq_gm(from.kq_i_tq_gm());
    }
    if (from.has_kq_d_tq_gm()) {
      set_kq_d_tq_gm(from.kq_d_tq_gm());
    }
    if (from.has_kq_i_limit_tq_gm()) {
      set_kq_i_limit_tq_gm(from.kq_i_limit_tq_gm());
    }
    if (from.has_kq_i_range_tq_gm()) {
      set_kq_i_range_tq_gm(from.kq_i_range_tq_gm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3JointParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3JointParam::CopyFrom(const M3JointParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3JointParam::IsInitialized() const {
  
  return true;
}

void M3JointParam::Swap(M3JointParam* other) {
  if (other != this) {
    std::swap(kq_p_, other->kq_p_);
    std::swap(kq_i_, other->kq_i_);
    std::swap(kq_d_, other->kq_d_);
    std::swap(kq_i_limit_, other->kq_i_limit_);
    std::swap(max_q_, other->max_q_);
    std::swap(min_q_, other->min_q_);
    std::swap(kt_p_, other->kt_p_);
    std::swap(kt_i_, other->kt_i_);
    std::swap(kt_d_, other->kt_d_);
    std::swap(kt_i_limit_, other->kt_i_limit_);
    std::swap(kq_g_, other->kq_g_);
    std::swap(max_q_slew_rate_, other->max_q_slew_rate_);
    std::swap(kq_i_range_, other->kq_i_range_);
    std::swap(kt_i_range_, other->kt_i_range_);
    std::swap(max_q_pad_, other->max_q_pad_);
    std::swap(min_q_pad_, other->min_q_pad_);
    std::swap(kq_d_pose_, other->kq_d_pose_);
    std::swap(kq_p_tq_gm_, other->kq_p_tq_gm_);
    std::swap(kq_i_tq_gm_, other->kq_i_tq_gm_);
    std::swap(kq_d_tq_gm_, other->kq_d_tq_gm_);
    std::swap(kq_i_limit_tq_gm_, other->kq_i_limit_tq_gm_);
    std::swap(kq_i_range_tq_gm_, other->kq_i_range_tq_gm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3JointParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3JointParam_descriptor_;
  metadata.reflection = M3JointParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3JointCommand::kTqDesiredFieldNumber;
const int M3JointCommand::kQDesiredFieldNumber;
const int M3JointCommand::kPwmDesiredFieldNumber;
const int M3JointCommand::kQStiffnessFieldNumber;
const int M3JointCommand::kCtrlModeFieldNumber;
const int M3JointCommand::kQdotDesiredFieldNumber;
const int M3JointCommand::kQSlewRateFieldNumber;
const int M3JointCommand::kBrakeOffFieldNumber;
const int M3JointCommand::kSmoothingModeFieldNumber;
#endif  // !_MSC_VER

M3JointCommand::M3JointCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3JointCommand::InitAsDefaultInstance() {
}

M3JointCommand::M3JointCommand(const M3JointCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3JointCommand::SharedCtor() {
  _cached_size_ = 0;
  tq_desired_ = 0;
  q_desired_ = 0;
  pwm_desired_ = 0;
  q_stiffness_ = 0;
  ctrl_mode_ = 0;
  qdot_desired_ = 0;
  q_slew_rate_ = 0;
  brake_off_ = false;
  smoothing_mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3JointCommand::~M3JointCommand() {
  SharedDtor();
}

void M3JointCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3JointCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3JointCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3JointCommand_descriptor_;
}

const M3JointCommand& M3JointCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_joint_2eproto();  return *default_instance_;
}

M3JointCommand* M3JointCommand::default_instance_ = NULL;

M3JointCommand* M3JointCommand::New() const {
  return new M3JointCommand;
}

void M3JointCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tq_desired_ = 0;
    q_desired_ = 0;
    pwm_desired_ = 0;
    q_stiffness_ = 0;
    ctrl_mode_ = 0;
    qdot_desired_ = 0;
    q_slew_rate_ = 0;
    brake_off_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    smoothing_mode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3JointCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double tq_desired = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tq_desired_)));
          set_has_tq_desired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_q_desired;
        break;
      }
      
      // optional double q_desired = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_q_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &q_desired_)));
          set_has_q_desired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pwm_desired;
        break;
      }
      
      // optional int32 pwm_desired = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pwm_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pwm_desired_)));
          set_has_pwm_desired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_q_stiffness;
        break;
      }
      
      // optional double q_stiffness = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_q_stiffness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &q_stiffness_)));
          set_has_q_stiffness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ctrl_mode;
        break;
      }
      
      // optional .JOINT_MODE ctrl_mode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctrl_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (JOINT_MODE_IsValid(value)) {
            set_ctrl_mode(static_cast< JOINT_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_qdot_desired;
        break;
      }
      
      // optional double qdot_desired = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_qdot_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qdot_desired_)));
          set_has_qdot_desired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_q_slew_rate;
        break;
      }
      
      // optional double q_slew_rate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_q_slew_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &q_slew_rate_)));
          set_has_q_slew_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_brake_off;
        break;
      }
      
      // optional bool brake_off = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_brake_off:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &brake_off_)));
          set_has_brake_off();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_smoothing_mode;
        break;
      }
      
      // optional .SMOOTHING_MODE smoothing_mode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smoothing_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (SMOOTHING_MODE_IsValid(value)) {
            set_smoothing_mode(static_cast< SMOOTHING_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3JointCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double tq_desired = 1;
  if (has_tq_desired()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->tq_desired(), output);
  }
  
  // optional double q_desired = 2;
  if (has_q_desired()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->q_desired(), output);
  }
  
  // optional int32 pwm_desired = 3;
  if (has_pwm_desired()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pwm_desired(), output);
  }
  
  // optional double q_stiffness = 4;
  if (has_q_stiffness()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->q_stiffness(), output);
  }
  
  // optional .JOINT_MODE ctrl_mode = 5;
  if (has_ctrl_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ctrl_mode(), output);
  }
  
  // optional double qdot_desired = 6;
  if (has_qdot_desired()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->qdot_desired(), output);
  }
  
  // optional double q_slew_rate = 7;
  if (has_q_slew_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->q_slew_rate(), output);
  }
  
  // optional bool brake_off = 8;
  if (has_brake_off()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->brake_off(), output);
  }
  
  // optional .SMOOTHING_MODE smoothing_mode = 9;
  if (has_smoothing_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->smoothing_mode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3JointCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double tq_desired = 1;
  if (has_tq_desired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->tq_desired(), target);
  }
  
  // optional double q_desired = 2;
  if (has_q_desired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->q_desired(), target);
  }
  
  // optional int32 pwm_desired = 3;
  if (has_pwm_desired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pwm_desired(), target);
  }
  
  // optional double q_stiffness = 4;
  if (has_q_stiffness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->q_stiffness(), target);
  }
  
  // optional .JOINT_MODE ctrl_mode = 5;
  if (has_ctrl_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->ctrl_mode(), target);
  }
  
  // optional double qdot_desired = 6;
  if (has_qdot_desired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->qdot_desired(), target);
  }
  
  // optional double q_slew_rate = 7;
  if (has_q_slew_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->q_slew_rate(), target);
  }
  
  // optional bool brake_off = 8;
  if (has_brake_off()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->brake_off(), target);
  }
  
  // optional .SMOOTHING_MODE smoothing_mode = 9;
  if (has_smoothing_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->smoothing_mode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3JointCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double tq_desired = 1;
    if (has_tq_desired()) {
      total_size += 1 + 8;
    }
    
    // optional double q_desired = 2;
    if (has_q_desired()) {
      total_size += 1 + 8;
    }
    
    // optional int32 pwm_desired = 3;
    if (has_pwm_desired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pwm_desired());
    }
    
    // optional double q_stiffness = 4;
    if (has_q_stiffness()) {
      total_size += 1 + 8;
    }
    
    // optional .JOINT_MODE ctrl_mode = 5;
    if (has_ctrl_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ctrl_mode());
    }
    
    // optional double qdot_desired = 6;
    if (has_qdot_desired()) {
      total_size += 1 + 8;
    }
    
    // optional double q_slew_rate = 7;
    if (has_q_slew_rate()) {
      total_size += 1 + 8;
    }
    
    // optional bool brake_off = 8;
    if (has_brake_off()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .SMOOTHING_MODE smoothing_mode = 9;
    if (has_smoothing_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->smoothing_mode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3JointCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3JointCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3JointCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3JointCommand::MergeFrom(const M3JointCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tq_desired()) {
      set_tq_desired(from.tq_desired());
    }
    if (from.has_q_desired()) {
      set_q_desired(from.q_desired());
    }
    if (from.has_pwm_desired()) {
      set_pwm_desired(from.pwm_desired());
    }
    if (from.has_q_stiffness()) {
      set_q_stiffness(from.q_stiffness());
    }
    if (from.has_ctrl_mode()) {
      set_ctrl_mode(from.ctrl_mode());
    }
    if (from.has_qdot_desired()) {
      set_qdot_desired(from.qdot_desired());
    }
    if (from.has_q_slew_rate()) {
      set_q_slew_rate(from.q_slew_rate());
    }
    if (from.has_brake_off()) {
      set_brake_off(from.brake_off());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_smoothing_mode()) {
      set_smoothing_mode(from.smoothing_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3JointCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3JointCommand::CopyFrom(const M3JointCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3JointCommand::IsInitialized() const {
  
  return true;
}

void M3JointCommand::Swap(M3JointCommand* other) {
  if (other != this) {
    std::swap(tq_desired_, other->tq_desired_);
    std::swap(q_desired_, other->q_desired_);
    std::swap(pwm_desired_, other->pwm_desired_);
    std::swap(q_stiffness_, other->q_stiffness_);
    std::swap(ctrl_mode_, other->ctrl_mode_);
    std::swap(qdot_desired_, other->qdot_desired_);
    std::swap(q_slew_rate_, other->q_slew_rate_);
    std::swap(brake_off_, other->brake_off_);
    std::swap(smoothing_mode_, other->smoothing_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3JointCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3JointCommand_descriptor_;
  metadata.reflection = M3JointCommand_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
