// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ledx2_ec.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* M3LedX2EcStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3LedX2EcStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3LedX2EcRGB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3LedX2EcRGB_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3LedX2EcBranch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3LedX2EcBranch_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3LedX2EcCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3LedX2EcCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3LedX2EcParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3LedX2EcParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ledx2_5fec_2eproto() {
  protobuf_AddDesc_ledx2_5fec_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ledx2_ec.proto");
  GOOGLE_CHECK(file != NULL);
  M3LedX2EcStatus_descriptor_ = file->message_type(0);
  static const int M3LedX2EcStatus_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcStatus, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcStatus, ethercat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcStatus, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcStatus, adc_ext_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcStatus, adc_ext_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcStatus, adc_ext_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcStatus, adc_ext_d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcStatus, flags_),
  };
  M3LedX2EcStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3LedX2EcStatus_descriptor_,
      M3LedX2EcStatus::default_instance_,
      M3LedX2EcStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3LedX2EcStatus));
  M3LedX2EcRGB_descriptor_ = file->message_type(1);
  static const int M3LedX2EcRGB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcRGB, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcRGB, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcRGB, b_),
  };
  M3LedX2EcRGB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3LedX2EcRGB_descriptor_,
      M3LedX2EcRGB::default_instance_,
      M3LedX2EcRGB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcRGB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcRGB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3LedX2EcRGB));
  M3LedX2EcBranch_descriptor_ = file->message_type(2);
  static const int M3LedX2EcBranch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcBranch, board_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcBranch, board_b_),
  };
  M3LedX2EcBranch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3LedX2EcBranch_descriptor_,
      M3LedX2EcBranch::default_instance_,
      M3LedX2EcBranch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcBranch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcBranch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3LedX2EcBranch));
  M3LedX2EcCommand_descriptor_ = file->message_type(3);
  static const int M3LedX2EcCommand_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcCommand, enable_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcCommand, enable_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcCommand, branch_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcCommand, branch_b_),
  };
  M3LedX2EcCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3LedX2EcCommand_descriptor_,
      M3LedX2EcCommand::default_instance_,
      M3LedX2EcCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3LedX2EcCommand));
  M3LedX2EcParam_descriptor_ = file->message_type(4);
  static const int M3LedX2EcParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcParam, config_),
  };
  M3LedX2EcParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3LedX2EcParam_descriptor_,
      M3LedX2EcParam::default_instance_,
      M3LedX2EcParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedX2EcParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3LedX2EcParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ledx2_5fec_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3LedX2EcStatus_descriptor_, &M3LedX2EcStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3LedX2EcRGB_descriptor_, &M3LedX2EcRGB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3LedX2EcBranch_descriptor_, &M3LedX2EcBranch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3LedX2EcCommand_descriptor_, &M3LedX2EcCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3LedX2EcParam_descriptor_, &M3LedX2EcParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ledx2_5fec_2eproto() {
  delete M3LedX2EcStatus::default_instance_;
  delete M3LedX2EcStatus_reflection_;
  delete M3LedX2EcRGB::default_instance_;
  delete M3LedX2EcRGB_reflection_;
  delete M3LedX2EcBranch::default_instance_;
  delete M3LedX2EcBranch_reflection_;
  delete M3LedX2EcCommand::default_instance_;
  delete M3LedX2EcCommand_reflection_;
  delete M3LedX2EcParam::default_instance_;
  delete M3LedX2EcParam_reflection_;
}

void protobuf_AddDesc_ledx2_5fec_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_component_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ledx2_ec.proto\032\024component_base.proto\"\301"
    "\001\n\017M3LedX2EcStatus\022\033\n\004base\030\001 \001(\0132\r.M3Bas"
    "eStatus\022#\n\010ethercat\030\002 \001(\0132\021.M3EtherCATSt"
    "atus\022\021\n\ttimestamp\030\003 \001(\005\022\021\n\tadc_ext_a\030\004 \001"
    "(\005\022\021\n\tadc_ext_b\030\005 \001(\005\022\021\n\tadc_ext_c\030\006 \001(\005"
    "\022\021\n\tadc_ext_d\030\007 \001(\005\022\r\n\005flags\030\010 \001(\005\"/\n\014M3"
    "LedX2EcRGB\022\t\n\001r\030\001 \001(\005\022\t\n\001g\030\002 \001(\005\022\t\n\001b\030\003 "
    "\001(\005\"Q\n\017M3LedX2EcBranch\022\036\n\007board_a\030\001 \001(\0132"
    "\r.M3LedX2EcRGB\022\036\n\007board_b\030\002 \001(\0132\r.M3LedX"
    "2EcRGB\"~\n\020M3LedX2EcCommand\022\020\n\010enable_a\030\001"
    " \001(\005\022\020\n\010enable_b\030\002 \001(\005\022\"\n\010branch_a\030\003 \001(\013"
    "2\020.M3LedX2EcBranch\022\"\n\010branch_b\030\004 \001(\0132\020.M"
    "3LedX2EcBranch\" \n\016M3LedX2EcParam\022\016\n\006conf"
    "ig\030\001 \001(\005B\002H\001", 532);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ledx2_ec.proto", &protobuf_RegisterTypes);
  M3LedX2EcStatus::default_instance_ = new M3LedX2EcStatus();
  M3LedX2EcRGB::default_instance_ = new M3LedX2EcRGB();
  M3LedX2EcBranch::default_instance_ = new M3LedX2EcBranch();
  M3LedX2EcCommand::default_instance_ = new M3LedX2EcCommand();
  M3LedX2EcParam::default_instance_ = new M3LedX2EcParam();
  M3LedX2EcStatus::default_instance_->InitAsDefaultInstance();
  M3LedX2EcRGB::default_instance_->InitAsDefaultInstance();
  M3LedX2EcBranch::default_instance_->InitAsDefaultInstance();
  M3LedX2EcCommand::default_instance_->InitAsDefaultInstance();
  M3LedX2EcParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ledx2_5fec_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ledx2_5fec_2eproto {
  StaticDescriptorInitializer_ledx2_5fec_2eproto() {
    protobuf_AddDesc_ledx2_5fec_2eproto();
  }
} static_descriptor_initializer_ledx2_5fec_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int M3LedX2EcStatus::kBaseFieldNumber;
const int M3LedX2EcStatus::kEthercatFieldNumber;
const int M3LedX2EcStatus::kTimestampFieldNumber;
const int M3LedX2EcStatus::kAdcExtAFieldNumber;
const int M3LedX2EcStatus::kAdcExtBFieldNumber;
const int M3LedX2EcStatus::kAdcExtCFieldNumber;
const int M3LedX2EcStatus::kAdcExtDFieldNumber;
const int M3LedX2EcStatus::kFlagsFieldNumber;
#endif  // !_MSC_VER

M3LedX2EcStatus::M3LedX2EcStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3LedX2EcStatus::InitAsDefaultInstance() {
  base_ = const_cast< ::M3BaseStatus*>(&::M3BaseStatus::default_instance());
  ethercat_ = const_cast< ::M3EtherCATStatus*>(&::M3EtherCATStatus::default_instance());
}

M3LedX2EcStatus::M3LedX2EcStatus(const M3LedX2EcStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3LedX2EcStatus::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  ethercat_ = NULL;
  timestamp_ = 0;
  adc_ext_a_ = 0;
  adc_ext_b_ = 0;
  adc_ext_c_ = 0;
  adc_ext_d_ = 0;
  flags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3LedX2EcStatus::~M3LedX2EcStatus() {
  SharedDtor();
}

void M3LedX2EcStatus::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete ethercat_;
  }
}

void M3LedX2EcStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3LedX2EcStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3LedX2EcStatus_descriptor_;
}

const M3LedX2EcStatus& M3LedX2EcStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ledx2_5fec_2eproto();  return *default_instance_;
}

M3LedX2EcStatus* M3LedX2EcStatus::default_instance_ = NULL;

M3LedX2EcStatus* M3LedX2EcStatus::New() const {
  return new M3LedX2EcStatus;
}

void M3LedX2EcStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::M3BaseStatus::Clear();
    }
    if (has_ethercat()) {
      if (ethercat_ != NULL) ethercat_->::M3EtherCATStatus::Clear();
    }
    timestamp_ = 0;
    adc_ext_a_ = 0;
    adc_ext_b_ = 0;
    adc_ext_c_ = 0;
    adc_ext_d_ = 0;
    flags_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3LedX2EcStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseStatus base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ethercat;
        break;
      }
      
      // optional .M3EtherCATStatus ethercat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ethercat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ethercat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }
      
      // optional int32 timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_adc_ext_a;
        break;
      }
      
      // optional int32 adc_ext_a = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adc_ext_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adc_ext_a_)));
          set_has_adc_ext_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_adc_ext_b;
        break;
      }
      
      // optional int32 adc_ext_b = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adc_ext_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adc_ext_b_)));
          set_has_adc_ext_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_adc_ext_c;
        break;
      }
      
      // optional int32 adc_ext_c = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adc_ext_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adc_ext_c_)));
          set_has_adc_ext_c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_adc_ext_d;
        break;
      }
      
      // optional int32 adc_ext_d = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adc_ext_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adc_ext_d_)));
          set_has_adc_ext_d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_flags;
        break;
      }
      
      // optional int32 flags = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3LedX2EcStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // optional .M3EtherCATStatus ethercat = 2;
  if (has_ethercat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ethercat(), output);
  }
  
  // optional int32 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timestamp(), output);
  }
  
  // optional int32 adc_ext_a = 4;
  if (has_adc_ext_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->adc_ext_a(), output);
  }
  
  // optional int32 adc_ext_b = 5;
  if (has_adc_ext_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->adc_ext_b(), output);
  }
  
  // optional int32 adc_ext_c = 6;
  if (has_adc_ext_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->adc_ext_c(), output);
  }
  
  // optional int32 adc_ext_d = 7;
  if (has_adc_ext_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->adc_ext_d(), output);
  }
  
  // optional int32 flags = 8;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->flags(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3LedX2EcStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional .M3EtherCATStatus ethercat = 2;
  if (has_ethercat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ethercat(), target);
  }
  
  // optional int32 timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timestamp(), target);
  }
  
  // optional int32 adc_ext_a = 4;
  if (has_adc_ext_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->adc_ext_a(), target);
  }
  
  // optional int32 adc_ext_b = 5;
  if (has_adc_ext_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->adc_ext_b(), target);
  }
  
  // optional int32 adc_ext_c = 6;
  if (has_adc_ext_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->adc_ext_c(), target);
  }
  
  // optional int32 adc_ext_d = 7;
  if (has_adc_ext_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->adc_ext_d(), target);
  }
  
  // optional int32 flags = 8;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->flags(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3LedX2EcStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseStatus base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional .M3EtherCATStatus ethercat = 2;
    if (has_ethercat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ethercat());
    }
    
    // optional int32 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }
    
    // optional int32 adc_ext_a = 4;
    if (has_adc_ext_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_ext_a());
    }
    
    // optional int32 adc_ext_b = 5;
    if (has_adc_ext_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_ext_b());
    }
    
    // optional int32 adc_ext_c = 6;
    if (has_adc_ext_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_ext_c());
    }
    
    // optional int32 adc_ext_d = 7;
    if (has_adc_ext_d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_ext_d());
    }
    
    // optional int32 flags = 8;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3LedX2EcStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3LedX2EcStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3LedX2EcStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3LedX2EcStatus::MergeFrom(const M3LedX2EcStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::M3BaseStatus::MergeFrom(from.base());
    }
    if (from.has_ethercat()) {
      mutable_ethercat()->::M3EtherCATStatus::MergeFrom(from.ethercat());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_adc_ext_a()) {
      set_adc_ext_a(from.adc_ext_a());
    }
    if (from.has_adc_ext_b()) {
      set_adc_ext_b(from.adc_ext_b());
    }
    if (from.has_adc_ext_c()) {
      set_adc_ext_c(from.adc_ext_c());
    }
    if (from.has_adc_ext_d()) {
      set_adc_ext_d(from.adc_ext_d());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3LedX2EcStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3LedX2EcStatus::CopyFrom(const M3LedX2EcStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3LedX2EcStatus::IsInitialized() const {
  
  return true;
}

void M3LedX2EcStatus::Swap(M3LedX2EcStatus* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(ethercat_, other->ethercat_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(adc_ext_a_, other->adc_ext_a_);
    std::swap(adc_ext_b_, other->adc_ext_b_);
    std::swap(adc_ext_c_, other->adc_ext_c_);
    std::swap(adc_ext_d_, other->adc_ext_d_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3LedX2EcStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3LedX2EcStatus_descriptor_;
  metadata.reflection = M3LedX2EcStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3LedX2EcRGB::kRFieldNumber;
const int M3LedX2EcRGB::kGFieldNumber;
const int M3LedX2EcRGB::kBFieldNumber;
#endif  // !_MSC_VER

M3LedX2EcRGB::M3LedX2EcRGB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3LedX2EcRGB::InitAsDefaultInstance() {
}

M3LedX2EcRGB::M3LedX2EcRGB(const M3LedX2EcRGB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3LedX2EcRGB::SharedCtor() {
  _cached_size_ = 0;
  r_ = 0;
  g_ = 0;
  b_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3LedX2EcRGB::~M3LedX2EcRGB() {
  SharedDtor();
}

void M3LedX2EcRGB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3LedX2EcRGB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3LedX2EcRGB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3LedX2EcRGB_descriptor_;
}

const M3LedX2EcRGB& M3LedX2EcRGB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ledx2_5fec_2eproto();  return *default_instance_;
}

M3LedX2EcRGB* M3LedX2EcRGB::default_instance_ = NULL;

M3LedX2EcRGB* M3LedX2EcRGB::New() const {
  return new M3LedX2EcRGB;
}

void M3LedX2EcRGB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    r_ = 0;
    g_ = 0;
    b_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3LedX2EcRGB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 r = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_g;
        break;
      }
      
      // optional int32 g = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_b;
        break;
      }
      
      // optional int32 b = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3LedX2EcRGB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 r = 1;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->r(), output);
  }
  
  // optional int32 g = 2;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->g(), output);
  }
  
  // optional int32 b = 3;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->b(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3LedX2EcRGB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 r = 1;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->r(), target);
  }
  
  // optional int32 g = 2;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->g(), target);
  }
  
  // optional int32 b = 3;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->b(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3LedX2EcRGB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 r = 1;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->r());
    }
    
    // optional int32 g = 2;
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g());
    }
    
    // optional int32 b = 3;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3LedX2EcRGB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3LedX2EcRGB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3LedX2EcRGB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3LedX2EcRGB::MergeFrom(const M3LedX2EcRGB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3LedX2EcRGB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3LedX2EcRGB::CopyFrom(const M3LedX2EcRGB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3LedX2EcRGB::IsInitialized() const {
  
  return true;
}

void M3LedX2EcRGB::Swap(M3LedX2EcRGB* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(g_, other->g_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3LedX2EcRGB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3LedX2EcRGB_descriptor_;
  metadata.reflection = M3LedX2EcRGB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3LedX2EcBranch::kBoardAFieldNumber;
const int M3LedX2EcBranch::kBoardBFieldNumber;
#endif  // !_MSC_VER

M3LedX2EcBranch::M3LedX2EcBranch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3LedX2EcBranch::InitAsDefaultInstance() {
  board_a_ = const_cast< ::M3LedX2EcRGB*>(&::M3LedX2EcRGB::default_instance());
  board_b_ = const_cast< ::M3LedX2EcRGB*>(&::M3LedX2EcRGB::default_instance());
}

M3LedX2EcBranch::M3LedX2EcBranch(const M3LedX2EcBranch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3LedX2EcBranch::SharedCtor() {
  _cached_size_ = 0;
  board_a_ = NULL;
  board_b_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3LedX2EcBranch::~M3LedX2EcBranch() {
  SharedDtor();
}

void M3LedX2EcBranch::SharedDtor() {
  if (this != default_instance_) {
    delete board_a_;
    delete board_b_;
  }
}

void M3LedX2EcBranch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3LedX2EcBranch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3LedX2EcBranch_descriptor_;
}

const M3LedX2EcBranch& M3LedX2EcBranch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ledx2_5fec_2eproto();  return *default_instance_;
}

M3LedX2EcBranch* M3LedX2EcBranch::default_instance_ = NULL;

M3LedX2EcBranch* M3LedX2EcBranch::New() const {
  return new M3LedX2EcBranch;
}

void M3LedX2EcBranch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_board_a()) {
      if (board_a_ != NULL) board_a_->::M3LedX2EcRGB::Clear();
    }
    if (has_board_b()) {
      if (board_b_ != NULL) board_b_->::M3LedX2EcRGB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3LedX2EcBranch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3LedX2EcRGB board_a = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_board_a()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_board_b;
        break;
      }
      
      // optional .M3LedX2EcRGB board_b = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_board_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_board_b()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3LedX2EcBranch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .M3LedX2EcRGB board_a = 1;
  if (has_board_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->board_a(), output);
  }
  
  // optional .M3LedX2EcRGB board_b = 2;
  if (has_board_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->board_b(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3LedX2EcBranch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3LedX2EcRGB board_a = 1;
  if (has_board_a()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->board_a(), target);
  }
  
  // optional .M3LedX2EcRGB board_b = 2;
  if (has_board_b()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->board_b(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3LedX2EcBranch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3LedX2EcRGB board_a = 1;
    if (has_board_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->board_a());
    }
    
    // optional .M3LedX2EcRGB board_b = 2;
    if (has_board_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->board_b());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3LedX2EcBranch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3LedX2EcBranch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3LedX2EcBranch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3LedX2EcBranch::MergeFrom(const M3LedX2EcBranch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_board_a()) {
      mutable_board_a()->::M3LedX2EcRGB::MergeFrom(from.board_a());
    }
    if (from.has_board_b()) {
      mutable_board_b()->::M3LedX2EcRGB::MergeFrom(from.board_b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3LedX2EcBranch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3LedX2EcBranch::CopyFrom(const M3LedX2EcBranch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3LedX2EcBranch::IsInitialized() const {
  
  return true;
}

void M3LedX2EcBranch::Swap(M3LedX2EcBranch* other) {
  if (other != this) {
    std::swap(board_a_, other->board_a_);
    std::swap(board_b_, other->board_b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3LedX2EcBranch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3LedX2EcBranch_descriptor_;
  metadata.reflection = M3LedX2EcBranch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3LedX2EcCommand::kEnableAFieldNumber;
const int M3LedX2EcCommand::kEnableBFieldNumber;
const int M3LedX2EcCommand::kBranchAFieldNumber;
const int M3LedX2EcCommand::kBranchBFieldNumber;
#endif  // !_MSC_VER

M3LedX2EcCommand::M3LedX2EcCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3LedX2EcCommand::InitAsDefaultInstance() {
  branch_a_ = const_cast< ::M3LedX2EcBranch*>(&::M3LedX2EcBranch::default_instance());
  branch_b_ = const_cast< ::M3LedX2EcBranch*>(&::M3LedX2EcBranch::default_instance());
}

M3LedX2EcCommand::M3LedX2EcCommand(const M3LedX2EcCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3LedX2EcCommand::SharedCtor() {
  _cached_size_ = 0;
  enable_a_ = 0;
  enable_b_ = 0;
  branch_a_ = NULL;
  branch_b_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3LedX2EcCommand::~M3LedX2EcCommand() {
  SharedDtor();
}

void M3LedX2EcCommand::SharedDtor() {
  if (this != default_instance_) {
    delete branch_a_;
    delete branch_b_;
  }
}

void M3LedX2EcCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3LedX2EcCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3LedX2EcCommand_descriptor_;
}

const M3LedX2EcCommand& M3LedX2EcCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ledx2_5fec_2eproto();  return *default_instance_;
}

M3LedX2EcCommand* M3LedX2EcCommand::default_instance_ = NULL;

M3LedX2EcCommand* M3LedX2EcCommand::New() const {
  return new M3LedX2EcCommand;
}

void M3LedX2EcCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enable_a_ = 0;
    enable_b_ = 0;
    if (has_branch_a()) {
      if (branch_a_ != NULL) branch_a_->::M3LedX2EcBranch::Clear();
    }
    if (has_branch_b()) {
      if (branch_b_ != NULL) branch_b_->::M3LedX2EcBranch::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3LedX2EcCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 enable_a = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enable_a_)));
          set_has_enable_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enable_b;
        break;
      }
      
      // optional int32 enable_b = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enable_b_)));
          set_has_enable_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_branch_a;
        break;
      }
      
      // optional .M3LedX2EcBranch branch_a = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_branch_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_branch_a()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_branch_b;
        break;
      }
      
      // optional .M3LedX2EcBranch branch_b = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_branch_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_branch_b()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3LedX2EcCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 enable_a = 1;
  if (has_enable_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->enable_a(), output);
  }
  
  // optional int32 enable_b = 2;
  if (has_enable_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->enable_b(), output);
  }
  
  // optional .M3LedX2EcBranch branch_a = 3;
  if (has_branch_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->branch_a(), output);
  }
  
  // optional .M3LedX2EcBranch branch_b = 4;
  if (has_branch_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->branch_b(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3LedX2EcCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 enable_a = 1;
  if (has_enable_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->enable_a(), target);
  }
  
  // optional int32 enable_b = 2;
  if (has_enable_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->enable_b(), target);
  }
  
  // optional .M3LedX2EcBranch branch_a = 3;
  if (has_branch_a()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->branch_a(), target);
  }
  
  // optional .M3LedX2EcBranch branch_b = 4;
  if (has_branch_b()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->branch_b(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3LedX2EcCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 enable_a = 1;
    if (has_enable_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enable_a());
    }
    
    // optional int32 enable_b = 2;
    if (has_enable_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enable_b());
    }
    
    // optional .M3LedX2EcBranch branch_a = 3;
    if (has_branch_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->branch_a());
    }
    
    // optional .M3LedX2EcBranch branch_b = 4;
    if (has_branch_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->branch_b());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3LedX2EcCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3LedX2EcCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3LedX2EcCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3LedX2EcCommand::MergeFrom(const M3LedX2EcCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable_a()) {
      set_enable_a(from.enable_a());
    }
    if (from.has_enable_b()) {
      set_enable_b(from.enable_b());
    }
    if (from.has_branch_a()) {
      mutable_branch_a()->::M3LedX2EcBranch::MergeFrom(from.branch_a());
    }
    if (from.has_branch_b()) {
      mutable_branch_b()->::M3LedX2EcBranch::MergeFrom(from.branch_b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3LedX2EcCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3LedX2EcCommand::CopyFrom(const M3LedX2EcCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3LedX2EcCommand::IsInitialized() const {
  
  return true;
}

void M3LedX2EcCommand::Swap(M3LedX2EcCommand* other) {
  if (other != this) {
    std::swap(enable_a_, other->enable_a_);
    std::swap(enable_b_, other->enable_b_);
    std::swap(branch_a_, other->branch_a_);
    std::swap(branch_b_, other->branch_b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3LedX2EcCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3LedX2EcCommand_descriptor_;
  metadata.reflection = M3LedX2EcCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3LedX2EcParam::kConfigFieldNumber;
#endif  // !_MSC_VER

M3LedX2EcParam::M3LedX2EcParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3LedX2EcParam::InitAsDefaultInstance() {
}

M3LedX2EcParam::M3LedX2EcParam(const M3LedX2EcParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3LedX2EcParam::SharedCtor() {
  _cached_size_ = 0;
  config_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3LedX2EcParam::~M3LedX2EcParam() {
  SharedDtor();
}

void M3LedX2EcParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3LedX2EcParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3LedX2EcParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3LedX2EcParam_descriptor_;
}

const M3LedX2EcParam& M3LedX2EcParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ledx2_5fec_2eproto();  return *default_instance_;
}

M3LedX2EcParam* M3LedX2EcParam::default_instance_ = NULL;

M3LedX2EcParam* M3LedX2EcParam::New() const {
  return new M3LedX2EcParam;
}

void M3LedX2EcParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    config_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3LedX2EcParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 config = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_)));
          set_has_config();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3LedX2EcParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 config = 1;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->config(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3LedX2EcParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 config = 1;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->config(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3LedX2EcParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 config = 1;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3LedX2EcParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3LedX2EcParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3LedX2EcParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3LedX2EcParam::MergeFrom(const M3LedX2EcParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config()) {
      set_config(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3LedX2EcParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3LedX2EcParam::CopyFrom(const M3LedX2EcParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3LedX2EcParam::IsInitialized() const {
  
  return true;
}

void M3LedX2EcParam::Swap(M3LedX2EcParam* other) {
  if (other != this) {
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3LedX2EcParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3LedX2EcParam_descriptor_;
  metadata.reflection = M3LedX2EcParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
