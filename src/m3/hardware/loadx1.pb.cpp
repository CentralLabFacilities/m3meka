// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "loadx1.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* M3LoadX1Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3LoadX1Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3LoadX1Param_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3LoadX1Param_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3LoadX1Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3LoadX1Command_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_loadx1_2eproto() {
  protobuf_AddDesc_loadx1_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "loadx1.proto");
  GOOGLE_CHECK(file != NULL);
  M3LoadX1Status_descriptor_ = file->message_type(0);
  static const int M3LoadX1Status_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1Status, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1Status, torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1Status, torquedot_),
  };
  M3LoadX1Status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3LoadX1Status_descriptor_,
      M3LoadX1Status::default_instance_,
      M3LoadX1Status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1Status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1Status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3LoadX1Status));
  M3LoadX1Param_descriptor_ = file->message_type(1);
  static const int M3LoadX1Param_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1Param, dummy_),
  };
  M3LoadX1Param_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3LoadX1Param_descriptor_,
      M3LoadX1Param::default_instance_,
      M3LoadX1Param_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1Param, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1Param, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3LoadX1Param));
  M3LoadX1Command_descriptor_ = file->message_type(2);
  static const int M3LoadX1Command_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1Command, dummy_),
  };
  M3LoadX1Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3LoadX1Command_descriptor_,
      M3LoadX1Command::default_instance_,
      M3LoadX1Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX1Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3LoadX1Command));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_loadx1_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3LoadX1Status_descriptor_, &M3LoadX1Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3LoadX1Param_descriptor_, &M3LoadX1Param::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3LoadX1Command_descriptor_, &M3LoadX1Command::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_loadx1_2eproto() {
  delete M3LoadX1Status::default_instance_;
  delete M3LoadX1Status_reflection_;
  delete M3LoadX1Param::default_instance_;
  delete M3LoadX1Param_reflection_;
  delete M3LoadX1Command::default_instance_;
  delete M3LoadX1Command_reflection_;
}

void protobuf_AddDesc_loadx1_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_component_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014loadx1.proto\032\024component_base.proto\"P\n\016"
    "M3LoadX1Status\022\033\n\004base\030\001 \001(\0132\r.M3BaseSta"
    "tus\022\016\n\006torque\030\006 \001(\001\022\021\n\ttorquedot\030\007 \001(\001\"\036"
    "\n\rM3LoadX1Param\022\r\n\005dummy\030\001 \001(\001\" \n\017M3Load"
    "X1Command\022\r\n\005dummy\030\001 \001(\001B\002H\001", 188);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "loadx1.proto", &protobuf_RegisterTypes);
  M3LoadX1Status::default_instance_ = new M3LoadX1Status();
  M3LoadX1Param::default_instance_ = new M3LoadX1Param();
  M3LoadX1Command::default_instance_ = new M3LoadX1Command();
  M3LoadX1Status::default_instance_->InitAsDefaultInstance();
  M3LoadX1Param::default_instance_->InitAsDefaultInstance();
  M3LoadX1Command::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_loadx1_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_loadx1_2eproto {
  StaticDescriptorInitializer_loadx1_2eproto() {
    protobuf_AddDesc_loadx1_2eproto();
  }
} static_descriptor_initializer_loadx1_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int M3LoadX1Status::kBaseFieldNumber;
const int M3LoadX1Status::kTorqueFieldNumber;
const int M3LoadX1Status::kTorquedotFieldNumber;
#endif  // !_MSC_VER

M3LoadX1Status::M3LoadX1Status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3LoadX1Status::InitAsDefaultInstance() {
  base_ = const_cast< ::M3BaseStatus*>(&::M3BaseStatus::default_instance());
}

M3LoadX1Status::M3LoadX1Status(const M3LoadX1Status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3LoadX1Status::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  torque_ = 0;
  torquedot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3LoadX1Status::~M3LoadX1Status() {
  SharedDtor();
}

void M3LoadX1Status::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void M3LoadX1Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3LoadX1Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3LoadX1Status_descriptor_;
}

const M3LoadX1Status& M3LoadX1Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loadx1_2eproto();  return *default_instance_;
}

M3LoadX1Status* M3LoadX1Status::default_instance_ = NULL;

M3LoadX1Status* M3LoadX1Status::New() const {
  return new M3LoadX1Status;
}

void M3LoadX1Status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::M3BaseStatus::Clear();
    }
    torque_ = 0;
    torquedot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3LoadX1Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseStatus base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_torque;
        break;
      }
      
      // optional double torque = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_torque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &torque_)));
          set_has_torque();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_torquedot;
        break;
      }
      
      // optional double torquedot = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_torquedot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &torquedot_)));
          set_has_torquedot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3LoadX1Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // optional double torque = 6;
  if (has_torque()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->torque(), output);
  }
  
  // optional double torquedot = 7;
  if (has_torquedot()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->torquedot(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3LoadX1Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional double torque = 6;
  if (has_torque()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->torque(), target);
  }
  
  // optional double torquedot = 7;
  if (has_torquedot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->torquedot(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3LoadX1Status::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseStatus base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional double torque = 6;
    if (has_torque()) {
      total_size += 1 + 8;
    }
    
    // optional double torquedot = 7;
    if (has_torquedot()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3LoadX1Status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3LoadX1Status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3LoadX1Status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3LoadX1Status::MergeFrom(const M3LoadX1Status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::M3BaseStatus::MergeFrom(from.base());
    }
    if (from.has_torque()) {
      set_torque(from.torque());
    }
    if (from.has_torquedot()) {
      set_torquedot(from.torquedot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3LoadX1Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3LoadX1Status::CopyFrom(const M3LoadX1Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3LoadX1Status::IsInitialized() const {
  
  return true;
}

void M3LoadX1Status::Swap(M3LoadX1Status* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(torque_, other->torque_);
    std::swap(torquedot_, other->torquedot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3LoadX1Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3LoadX1Status_descriptor_;
  metadata.reflection = M3LoadX1Status_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3LoadX1Param::kDummyFieldNumber;
#endif  // !_MSC_VER

M3LoadX1Param::M3LoadX1Param()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3LoadX1Param::InitAsDefaultInstance() {
}

M3LoadX1Param::M3LoadX1Param(const M3LoadX1Param& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3LoadX1Param::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3LoadX1Param::~M3LoadX1Param() {
  SharedDtor();
}

void M3LoadX1Param::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3LoadX1Param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3LoadX1Param::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3LoadX1Param_descriptor_;
}

const M3LoadX1Param& M3LoadX1Param::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loadx1_2eproto();  return *default_instance_;
}

M3LoadX1Param* M3LoadX1Param::default_instance_ = NULL;

M3LoadX1Param* M3LoadX1Param::New() const {
  return new M3LoadX1Param;
}

void M3LoadX1Param::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3LoadX1Param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3LoadX1Param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->dummy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3LoadX1Param::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->dummy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3LoadX1Param::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double dummy = 1;
    if (has_dummy()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3LoadX1Param::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3LoadX1Param* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3LoadX1Param*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3LoadX1Param::MergeFrom(const M3LoadX1Param& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3LoadX1Param::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3LoadX1Param::CopyFrom(const M3LoadX1Param& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3LoadX1Param::IsInitialized() const {
  
  return true;
}

void M3LoadX1Param::Swap(M3LoadX1Param* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3LoadX1Param::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3LoadX1Param_descriptor_;
  metadata.reflection = M3LoadX1Param_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3LoadX1Command::kDummyFieldNumber;
#endif  // !_MSC_VER

M3LoadX1Command::M3LoadX1Command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3LoadX1Command::InitAsDefaultInstance() {
}

M3LoadX1Command::M3LoadX1Command(const M3LoadX1Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3LoadX1Command::SharedCtor() {
  _cached_size_ = 0;
  dummy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3LoadX1Command::~M3LoadX1Command() {
  SharedDtor();
}

void M3LoadX1Command::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3LoadX1Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3LoadX1Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3LoadX1Command_descriptor_;
}

const M3LoadX1Command& M3LoadX1Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loadx1_2eproto();  return *default_instance_;
}

M3LoadX1Command* M3LoadX1Command::default_instance_ = NULL;

M3LoadX1Command* M3LoadX1Command::New() const {
  return new M3LoadX1Command;
}

void M3LoadX1Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dummy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3LoadX1Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double dummy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dummy_)));
          set_has_dummy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3LoadX1Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double dummy = 1;
  if (has_dummy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->dummy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3LoadX1Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double dummy = 1;
  if (has_dummy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->dummy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3LoadX1Command::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double dummy = 1;
    if (has_dummy()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3LoadX1Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3LoadX1Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3LoadX1Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3LoadX1Command::MergeFrom(const M3LoadX1Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dummy()) {
      set_dummy(from.dummy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3LoadX1Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3LoadX1Command::CopyFrom(const M3LoadX1Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3LoadX1Command::IsInitialized() const {
  
  return true;
}

void M3LoadX1Command::Swap(M3LoadX1Command* other) {
  if (other != this) {
    std::swap(dummy_, other->dummy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3LoadX1Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3LoadX1Command_descriptor_;
  metadata.reflection = M3LoadX1Command_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
