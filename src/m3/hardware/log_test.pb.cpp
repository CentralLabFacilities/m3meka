// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "log_test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* M3MekaLogTestStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3MekaLogTestStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3MekaLogTestParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3MekaLogTestParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3MekaLogTestCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3MekaLogTestCommand_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_log_5ftest_2eproto() {
  protobuf_AddDesc_log_5ftest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "log_test.proto");
  GOOGLE_CHECK(file != NULL);
  M3MekaLogTestStatus_descriptor_ = file->message_type(0);
  static const int M3MekaLogTestStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MekaLogTestStatus, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MekaLogTestStatus, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MekaLogTestStatus, log_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MekaLogTestStatus, pwr_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MekaLogTestStatus, pwr_cmd_),
  };
  M3MekaLogTestStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3MekaLogTestStatus_descriptor_,
      M3MekaLogTestStatus::default_instance_,
      M3MekaLogTestStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MekaLogTestStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MekaLogTestStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3MekaLogTestStatus));
  M3MekaLogTestParam_descriptor_ = file->message_type(1);
  static const int M3MekaLogTestParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MekaLogTestParam, debug_),
  };
  M3MekaLogTestParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3MekaLogTestParam_descriptor_,
      M3MekaLogTestParam::default_instance_,
      M3MekaLogTestParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MekaLogTestParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MekaLogTestParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3MekaLogTestParam));
  M3MekaLogTestCommand_descriptor_ = file->message_type(2);
  static const int M3MekaLogTestCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MekaLogTestCommand, enable_),
  };
  M3MekaLogTestCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3MekaLogTestCommand_descriptor_,
      M3MekaLogTestCommand::default_instance_,
      M3MekaLogTestCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MekaLogTestCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3MekaLogTestCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3MekaLogTestCommand));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_log_5ftest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3MekaLogTestStatus_descriptor_, &M3MekaLogTestStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3MekaLogTestParam_descriptor_, &M3MekaLogTestParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3MekaLogTestCommand_descriptor_, &M3MekaLogTestCommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_log_5ftest_2eproto() {
  delete M3MekaLogTestStatus::default_instance_;
  delete M3MekaLogTestStatus_reflection_;
  delete M3MekaLogTestParam::default_instance_;
  delete M3MekaLogTestParam_reflection_;
  delete M3MekaLogTestCommand::default_instance_;
  delete M3MekaLogTestCommand_reflection_;
}

void protobuf_AddDesc_log_5ftest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_component_5fbase_2eproto();
  ::protobuf_AddDesc_pwr_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016log_test.proto\032\024component_base.proto\032\t"
    "pwr.proto\"\224\001\n\023M3MekaLogTestStatus\022\033\n\004bas"
    "e\030\001 \001(\0132\r.M3BaseStatus\022\014\n\004path\030\002 \001(\t\022\020\n\010"
    "log_name\030\003 \001(\t\022 \n\npwr_status\030\004 \001(\0132\014.M3P"
    "wrStatus\022\036\n\007pwr_cmd\030\005 \001(\0132\r.M3PwrCommand"
    "\"#\n\022M3MekaLogTestParam\022\r\n\005debug\030\001 \001(\001\"&\n"
    "\024M3MekaLogTestCommand\022\016\n\006enable\030\001 \001(\001B\002H"
    "\001", 281);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "log_test.proto", &protobuf_RegisterTypes);
  M3MekaLogTestStatus::default_instance_ = new M3MekaLogTestStatus();
  M3MekaLogTestParam::default_instance_ = new M3MekaLogTestParam();
  M3MekaLogTestCommand::default_instance_ = new M3MekaLogTestCommand();
  M3MekaLogTestStatus::default_instance_->InitAsDefaultInstance();
  M3MekaLogTestParam::default_instance_->InitAsDefaultInstance();
  M3MekaLogTestCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_log_5ftest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_log_5ftest_2eproto {
  StaticDescriptorInitializer_log_5ftest_2eproto() {
    protobuf_AddDesc_log_5ftest_2eproto();
  }
} static_descriptor_initializer_log_5ftest_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int M3MekaLogTestStatus::kBaseFieldNumber;
const int M3MekaLogTestStatus::kPathFieldNumber;
const int M3MekaLogTestStatus::kLogNameFieldNumber;
const int M3MekaLogTestStatus::kPwrStatusFieldNumber;
const int M3MekaLogTestStatus::kPwrCmdFieldNumber;
#endif  // !_MSC_VER

M3MekaLogTestStatus::M3MekaLogTestStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3MekaLogTestStatus::InitAsDefaultInstance() {
  base_ = const_cast< ::M3BaseStatus*>(&::M3BaseStatus::default_instance());
  pwr_status_ = const_cast< ::M3PwrStatus*>(&::M3PwrStatus::default_instance());
  pwr_cmd_ = const_cast< ::M3PwrCommand*>(&::M3PwrCommand::default_instance());
}

M3MekaLogTestStatus::M3MekaLogTestStatus(const M3MekaLogTestStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3MekaLogTestStatus::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  log_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwr_status_ = NULL;
  pwr_cmd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3MekaLogTestStatus::~M3MekaLogTestStatus() {
  SharedDtor();
}

void M3MekaLogTestStatus::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (log_name_ != &::google::protobuf::internal::kEmptyString) {
    delete log_name_;
  }
  if (this != default_instance_) {
    delete base_;
    delete pwr_status_;
    delete pwr_cmd_;
  }
}

void M3MekaLogTestStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3MekaLogTestStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3MekaLogTestStatus_descriptor_;
}

const M3MekaLogTestStatus& M3MekaLogTestStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5ftest_2eproto();  return *default_instance_;
}

M3MekaLogTestStatus* M3MekaLogTestStatus::default_instance_ = NULL;

M3MekaLogTestStatus* M3MekaLogTestStatus::New() const {
  return new M3MekaLogTestStatus;
}

void M3MekaLogTestStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::M3BaseStatus::Clear();
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_log_name()) {
      if (log_name_ != &::google::protobuf::internal::kEmptyString) {
        log_name_->clear();
      }
    }
    if (has_pwr_status()) {
      if (pwr_status_ != NULL) pwr_status_->::M3PwrStatus::Clear();
    }
    if (has_pwr_cmd()) {
      if (pwr_cmd_ != NULL) pwr_cmd_->::M3PwrCommand::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3MekaLogTestStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseStatus base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }
      
      // optional string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_log_name;
        break;
      }
      
      // optional string log_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_name().data(), this->log_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pwr_status;
        break;
      }
      
      // optional .M3PwrStatus pwr_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwr_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pwr_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pwr_cmd;
        break;
      }
      
      // optional .M3PwrCommand pwr_cmd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwr_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pwr_cmd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3MekaLogTestStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }
  
  // optional string log_name = 3;
  if (has_log_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_name().data(), this->log_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->log_name(), output);
  }
  
  // optional .M3PwrStatus pwr_status = 4;
  if (has_pwr_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pwr_status(), output);
  }
  
  // optional .M3PwrCommand pwr_cmd = 5;
  if (has_pwr_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pwr_cmd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3MekaLogTestStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }
  
  // optional string log_name = 3;
  if (has_log_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_name().data(), this->log_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->log_name(), target);
  }
  
  // optional .M3PwrStatus pwr_status = 4;
  if (has_pwr_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pwr_status(), target);
  }
  
  // optional .M3PwrCommand pwr_cmd = 5;
  if (has_pwr_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pwr_cmd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3MekaLogTestStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseStatus base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // optional string log_name = 3;
    if (has_log_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_name());
    }
    
    // optional .M3PwrStatus pwr_status = 4;
    if (has_pwr_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pwr_status());
    }
    
    // optional .M3PwrCommand pwr_cmd = 5;
    if (has_pwr_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pwr_cmd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3MekaLogTestStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3MekaLogTestStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3MekaLogTestStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3MekaLogTestStatus::MergeFrom(const M3MekaLogTestStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::M3BaseStatus::MergeFrom(from.base());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_log_name()) {
      set_log_name(from.log_name());
    }
    if (from.has_pwr_status()) {
      mutable_pwr_status()->::M3PwrStatus::MergeFrom(from.pwr_status());
    }
    if (from.has_pwr_cmd()) {
      mutable_pwr_cmd()->::M3PwrCommand::MergeFrom(from.pwr_cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3MekaLogTestStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3MekaLogTestStatus::CopyFrom(const M3MekaLogTestStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3MekaLogTestStatus::IsInitialized() const {
  
  return true;
}

void M3MekaLogTestStatus::Swap(M3MekaLogTestStatus* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(path_, other->path_);
    std::swap(log_name_, other->log_name_);
    std::swap(pwr_status_, other->pwr_status_);
    std::swap(pwr_cmd_, other->pwr_cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3MekaLogTestStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3MekaLogTestStatus_descriptor_;
  metadata.reflection = M3MekaLogTestStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3MekaLogTestParam::kDebugFieldNumber;
#endif  // !_MSC_VER

M3MekaLogTestParam::M3MekaLogTestParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3MekaLogTestParam::InitAsDefaultInstance() {
}

M3MekaLogTestParam::M3MekaLogTestParam(const M3MekaLogTestParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3MekaLogTestParam::SharedCtor() {
  _cached_size_ = 0;
  debug_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3MekaLogTestParam::~M3MekaLogTestParam() {
  SharedDtor();
}

void M3MekaLogTestParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3MekaLogTestParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3MekaLogTestParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3MekaLogTestParam_descriptor_;
}

const M3MekaLogTestParam& M3MekaLogTestParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5ftest_2eproto();  return *default_instance_;
}

M3MekaLogTestParam* M3MekaLogTestParam::default_instance_ = NULL;

M3MekaLogTestParam* M3MekaLogTestParam::New() const {
  return new M3MekaLogTestParam;
}

void M3MekaLogTestParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    debug_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3MekaLogTestParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double debug = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &debug_)));
          set_has_debug();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3MekaLogTestParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double debug = 1;
  if (has_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->debug(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3MekaLogTestParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double debug = 1;
  if (has_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->debug(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3MekaLogTestParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double debug = 1;
    if (has_debug()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3MekaLogTestParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3MekaLogTestParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3MekaLogTestParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3MekaLogTestParam::MergeFrom(const M3MekaLogTestParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_debug()) {
      set_debug(from.debug());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3MekaLogTestParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3MekaLogTestParam::CopyFrom(const M3MekaLogTestParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3MekaLogTestParam::IsInitialized() const {
  
  return true;
}

void M3MekaLogTestParam::Swap(M3MekaLogTestParam* other) {
  if (other != this) {
    std::swap(debug_, other->debug_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3MekaLogTestParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3MekaLogTestParam_descriptor_;
  metadata.reflection = M3MekaLogTestParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3MekaLogTestCommand::kEnableFieldNumber;
#endif  // !_MSC_VER

M3MekaLogTestCommand::M3MekaLogTestCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3MekaLogTestCommand::InitAsDefaultInstance() {
}

M3MekaLogTestCommand::M3MekaLogTestCommand(const M3MekaLogTestCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3MekaLogTestCommand::SharedCtor() {
  _cached_size_ = 0;
  enable_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3MekaLogTestCommand::~M3MekaLogTestCommand() {
  SharedDtor();
}

void M3MekaLogTestCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3MekaLogTestCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3MekaLogTestCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3MekaLogTestCommand_descriptor_;
}

const M3MekaLogTestCommand& M3MekaLogTestCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_log_5ftest_2eproto();  return *default_instance_;
}

M3MekaLogTestCommand* M3MekaLogTestCommand::default_instance_ = NULL;

M3MekaLogTestCommand* M3MekaLogTestCommand::New() const {
  return new M3MekaLogTestCommand;
}

void M3MekaLogTestCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enable_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3MekaLogTestCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double enable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3MekaLogTestCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double enable = 1;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->enable(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3MekaLogTestCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double enable = 1;
  if (has_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->enable(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3MekaLogTestCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double enable = 1;
    if (has_enable()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3MekaLogTestCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3MekaLogTestCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3MekaLogTestCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3MekaLogTestCommand::MergeFrom(const M3MekaLogTestCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable()) {
      set_enable(from.enable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3MekaLogTestCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3MekaLogTestCommand::CopyFrom(const M3MekaLogTestCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3MekaLogTestCommand::IsInitialized() const {
  
  return true;
}

void M3MekaLogTestCommand::Swap(M3MekaLogTestCommand* other) {
  if (other != this) {
    std::swap(enable_, other->enable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3MekaLogTestCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3MekaLogTestCommand_descriptor_;
  metadata.reflection = M3MekaLogTestCommand_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
