// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "robot_monitor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* M3RobotMonitorComponentStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3RobotMonitorComponentStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3RobotMonitorStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3RobotMonitorStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3RobotMonitorCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3RobotMonitorCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3RobotMonitorComponentParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3RobotMonitorComponentParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3RobotMonitorParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3RobotMonitorParam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ROBOT_MONITOR_STATE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_robot_5fmonitor_2eproto() {
  protobuf_AddDesc_robot_5fmonitor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "robot_monitor.proto");
  GOOGLE_CHECK(file != NULL);
  M3RobotMonitorComponentStatus_descriptor_ = file->message_type(0);
  static const int M3RobotMonitorComponentStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorComponentStatus, component_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorComponentStatus, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorComponentStatus, msg_),
  };
  M3RobotMonitorComponentStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3RobotMonitorComponentStatus_descriptor_,
      M3RobotMonitorComponentStatus::default_instance_,
      M3RobotMonitorComponentStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorComponentStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorComponentStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3RobotMonitorComponentStatus));
  M3RobotMonitorStatus_descriptor_ = file->message_type(1);
  static const int M3RobotMonitorStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorStatus, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorStatus, volt_comp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorStatus, temp_comp_),
  };
  M3RobotMonitorStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3RobotMonitorStatus_descriptor_,
      M3RobotMonitorStatus::default_instance_,
      M3RobotMonitorStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3RobotMonitorStatus));
  M3RobotMonitorCommand_descriptor_ = file->message_type(2);
  static const int M3RobotMonitorCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorCommand, force_safe_op_),
  };
  M3RobotMonitorCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3RobotMonitorCommand_descriptor_,
      M3RobotMonitorCommand::default_instance_,
      M3RobotMonitorCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3RobotMonitorCommand));
  M3RobotMonitorComponentParam_descriptor_ = file->message_type(3);
  static const int M3RobotMonitorComponentParam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorComponentParam, max_val_warn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorComponentParam, min_val_warn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorComponentParam, max_val_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorComponentParam, min_val_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorComponentParam, component_name_),
  };
  M3RobotMonitorComponentParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3RobotMonitorComponentParam_descriptor_,
      M3RobotMonitorComponentParam::default_instance_,
      M3RobotMonitorComponentParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorComponentParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorComponentParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3RobotMonitorComponentParam));
  M3RobotMonitorParam_descriptor_ = file->message_type(4);
  static const int M3RobotMonitorParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorParam, volt_comp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorParam, temp_comp_),
  };
  M3RobotMonitorParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3RobotMonitorParam_descriptor_,
      M3RobotMonitorParam::default_instance_,
      M3RobotMonitorParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3RobotMonitorParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3RobotMonitorParam));
  ROBOT_MONITOR_STATE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_robot_5fmonitor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3RobotMonitorComponentStatus_descriptor_, &M3RobotMonitorComponentStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3RobotMonitorStatus_descriptor_, &M3RobotMonitorStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3RobotMonitorCommand_descriptor_, &M3RobotMonitorCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3RobotMonitorComponentParam_descriptor_, &M3RobotMonitorComponentParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3RobotMonitorParam_descriptor_, &M3RobotMonitorParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_robot_5fmonitor_2eproto() {
  delete M3RobotMonitorComponentStatus::default_instance_;
  delete M3RobotMonitorComponentStatus_reflection_;
  delete M3RobotMonitorStatus::default_instance_;
  delete M3RobotMonitorStatus_reflection_;
  delete M3RobotMonitorCommand::default_instance_;
  delete M3RobotMonitorCommand_reflection_;
  delete M3RobotMonitorComponentParam::default_instance_;
  delete M3RobotMonitorComponentParam_reflection_;
  delete M3RobotMonitorParam::default_instance_;
  delete M3RobotMonitorParam_reflection_;
}

void protobuf_AddDesc_robot_5fmonitor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_component_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023robot_monitor.proto\032\024component_base.pr"
    "oto\"i\n\035M3RobotMonitorComponentStatus\022\026\n\016"
    "component_name\030\001 \001(\t\022#\n\005state\030\002 \001(\0162\024.RO"
    "BOT_MONITOR_STATE\022\013\n\003msg\030\003 \001(\t\"\231\001\n\024M3Rob"
    "otMonitorStatus\022\033\n\004base\030\001 \001(\0132\r.M3BaseSt"
    "atus\0221\n\tvolt_comp\030\002 \003(\0132\036.M3RobotMonitor"
    "ComponentStatus\0221\n\ttemp_comp\030\003 \003(\0132\036.M3R"
    "obotMonitorComponentStatus\".\n\025M3RobotMon"
    "itorCommand\022\025\n\rforce_safe_op\030\001 \001(\005\"\214\001\n\034M"
    "3RobotMonitorComponentParam\022\024\n\014max_val_w"
    "arn\030\001 \001(\001\022\024\n\014min_val_warn\030\002 \001(\001\022\023\n\013max_v"
    "al_err\030\003 \001(\001\022\023\n\013min_val_err\030\004 \001(\001\022\026\n\016com"
    "ponent_name\030\005 \001(\t\"y\n\023M3RobotMonitorParam"
    "\0220\n\tvolt_comp\030\001 \003(\0132\035.M3RobotMonitorComp"
    "onentParam\0220\n\ttemp_comp\030\002 \003(\0132\035.M3RobotM"
    "onitorComponentParam*\235\001\n\023ROBOT_MONITOR_S"
    "TATE\022\026\n\022ROBOT_MONITOR_OKAY\020\000\022\032\n\026ROBOT_MO"
    "NITOR_LOW_WARN\020\001\022\033\n\027ROBOT_MONITOR_HIGH_W"
    "ARN\020\002\022\031\n\025ROBOT_MONITOR_LOW_ERR\020\003\022\032\n\026ROBO"
    "T_MONITOR_HIGH_ERR\020\004B\002H\001", 784);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "robot_monitor.proto", &protobuf_RegisterTypes);
  M3RobotMonitorComponentStatus::default_instance_ = new M3RobotMonitorComponentStatus();
  M3RobotMonitorStatus::default_instance_ = new M3RobotMonitorStatus();
  M3RobotMonitorCommand::default_instance_ = new M3RobotMonitorCommand();
  M3RobotMonitorComponentParam::default_instance_ = new M3RobotMonitorComponentParam();
  M3RobotMonitorParam::default_instance_ = new M3RobotMonitorParam();
  M3RobotMonitorComponentStatus::default_instance_->InitAsDefaultInstance();
  M3RobotMonitorStatus::default_instance_->InitAsDefaultInstance();
  M3RobotMonitorCommand::default_instance_->InitAsDefaultInstance();
  M3RobotMonitorComponentParam::default_instance_->InitAsDefaultInstance();
  M3RobotMonitorParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_robot_5fmonitor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_robot_5fmonitor_2eproto {
  StaticDescriptorInitializer_robot_5fmonitor_2eproto() {
    protobuf_AddDesc_robot_5fmonitor_2eproto();
  }
} static_descriptor_initializer_robot_5fmonitor_2eproto_;

const ::google::protobuf::EnumDescriptor* ROBOT_MONITOR_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROBOT_MONITOR_STATE_descriptor_;
}
bool ROBOT_MONITOR_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int M3RobotMonitorComponentStatus::kComponentNameFieldNumber;
const int M3RobotMonitorComponentStatus::kStateFieldNumber;
const int M3RobotMonitorComponentStatus::kMsgFieldNumber;
#endif  // !_MSC_VER

M3RobotMonitorComponentStatus::M3RobotMonitorComponentStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3RobotMonitorComponentStatus::InitAsDefaultInstance() {
}

M3RobotMonitorComponentStatus::M3RobotMonitorComponentStatus(const M3RobotMonitorComponentStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3RobotMonitorComponentStatus::SharedCtor() {
  _cached_size_ = 0;
  component_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3RobotMonitorComponentStatus::~M3RobotMonitorComponentStatus() {
  SharedDtor();
}

void M3RobotMonitorComponentStatus::SharedDtor() {
  if (component_name_ != &::google::protobuf::internal::kEmptyString) {
    delete component_name_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void M3RobotMonitorComponentStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3RobotMonitorComponentStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3RobotMonitorComponentStatus_descriptor_;
}

const M3RobotMonitorComponentStatus& M3RobotMonitorComponentStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_5fmonitor_2eproto();  return *default_instance_;
}

M3RobotMonitorComponentStatus* M3RobotMonitorComponentStatus::default_instance_ = NULL;

M3RobotMonitorComponentStatus* M3RobotMonitorComponentStatus::New() const {
  return new M3RobotMonitorComponentStatus;
}

void M3RobotMonitorComponentStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_component_name()) {
      if (component_name_ != &::google::protobuf::internal::kEmptyString) {
        component_name_->clear();
      }
    }
    state_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3RobotMonitorComponentStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string component_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_component_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->component_name().data(), this->component_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // optional .ROBOT_MONITOR_STATE state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ROBOT_MONITOR_STATE_IsValid(value)) {
            set_state(static_cast< ROBOT_MONITOR_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }
      
      // optional string msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3RobotMonitorComponentStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string component_name = 1;
  if (has_component_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->component_name().data(), this->component_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->component_name(), output);
  }
  
  // optional .ROBOT_MONITOR_STATE state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }
  
  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3RobotMonitorComponentStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string component_name = 1;
  if (has_component_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->component_name().data(), this->component_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->component_name(), target);
  }
  
  // optional .ROBOT_MONITOR_STATE state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }
  
  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3RobotMonitorComponentStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string component_name = 1;
    if (has_component_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->component_name());
    }
    
    // optional .ROBOT_MONITOR_STATE state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3RobotMonitorComponentStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3RobotMonitorComponentStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3RobotMonitorComponentStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3RobotMonitorComponentStatus::MergeFrom(const M3RobotMonitorComponentStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_component_name()) {
      set_component_name(from.component_name());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3RobotMonitorComponentStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3RobotMonitorComponentStatus::CopyFrom(const M3RobotMonitorComponentStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3RobotMonitorComponentStatus::IsInitialized() const {
  
  return true;
}

void M3RobotMonitorComponentStatus::Swap(M3RobotMonitorComponentStatus* other) {
  if (other != this) {
    std::swap(component_name_, other->component_name_);
    std::swap(state_, other->state_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3RobotMonitorComponentStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3RobotMonitorComponentStatus_descriptor_;
  metadata.reflection = M3RobotMonitorComponentStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3RobotMonitorStatus::kBaseFieldNumber;
const int M3RobotMonitorStatus::kVoltCompFieldNumber;
const int M3RobotMonitorStatus::kTempCompFieldNumber;
#endif  // !_MSC_VER

M3RobotMonitorStatus::M3RobotMonitorStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3RobotMonitorStatus::InitAsDefaultInstance() {
  base_ = const_cast< ::M3BaseStatus*>(&::M3BaseStatus::default_instance());
}

M3RobotMonitorStatus::M3RobotMonitorStatus(const M3RobotMonitorStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3RobotMonitorStatus::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3RobotMonitorStatus::~M3RobotMonitorStatus() {
  SharedDtor();
}

void M3RobotMonitorStatus::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void M3RobotMonitorStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3RobotMonitorStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3RobotMonitorStatus_descriptor_;
}

const M3RobotMonitorStatus& M3RobotMonitorStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_5fmonitor_2eproto();  return *default_instance_;
}

M3RobotMonitorStatus* M3RobotMonitorStatus::default_instance_ = NULL;

M3RobotMonitorStatus* M3RobotMonitorStatus::New() const {
  return new M3RobotMonitorStatus;
}

void M3RobotMonitorStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::M3BaseStatus::Clear();
    }
  }
  volt_comp_.Clear();
  temp_comp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3RobotMonitorStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseStatus base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_volt_comp;
        break;
      }
      
      // repeated .M3RobotMonitorComponentStatus volt_comp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_volt_comp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_volt_comp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_volt_comp;
        if (input->ExpectTag(26)) goto parse_temp_comp;
        break;
      }
      
      // repeated .M3RobotMonitorComponentStatus temp_comp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_temp_comp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_temp_comp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_temp_comp;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3RobotMonitorStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // repeated .M3RobotMonitorComponentStatus volt_comp = 2;
  for (int i = 0; i < this->volt_comp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->volt_comp(i), output);
  }
  
  // repeated .M3RobotMonitorComponentStatus temp_comp = 3;
  for (int i = 0; i < this->temp_comp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->temp_comp(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3RobotMonitorStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // repeated .M3RobotMonitorComponentStatus volt_comp = 2;
  for (int i = 0; i < this->volt_comp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->volt_comp(i), target);
  }
  
  // repeated .M3RobotMonitorComponentStatus temp_comp = 3;
  for (int i = 0; i < this->temp_comp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->temp_comp(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3RobotMonitorStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseStatus base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
  }
  // repeated .M3RobotMonitorComponentStatus volt_comp = 2;
  total_size += 1 * this->volt_comp_size();
  for (int i = 0; i < this->volt_comp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->volt_comp(i));
  }
  
  // repeated .M3RobotMonitorComponentStatus temp_comp = 3;
  total_size += 1 * this->temp_comp_size();
  for (int i = 0; i < this->temp_comp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->temp_comp(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3RobotMonitorStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3RobotMonitorStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3RobotMonitorStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3RobotMonitorStatus::MergeFrom(const M3RobotMonitorStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  volt_comp_.MergeFrom(from.volt_comp_);
  temp_comp_.MergeFrom(from.temp_comp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::M3BaseStatus::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3RobotMonitorStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3RobotMonitorStatus::CopyFrom(const M3RobotMonitorStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3RobotMonitorStatus::IsInitialized() const {
  
  return true;
}

void M3RobotMonitorStatus::Swap(M3RobotMonitorStatus* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    volt_comp_.Swap(&other->volt_comp_);
    temp_comp_.Swap(&other->temp_comp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3RobotMonitorStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3RobotMonitorStatus_descriptor_;
  metadata.reflection = M3RobotMonitorStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3RobotMonitorCommand::kForceSafeOpFieldNumber;
#endif  // !_MSC_VER

M3RobotMonitorCommand::M3RobotMonitorCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3RobotMonitorCommand::InitAsDefaultInstance() {
}

M3RobotMonitorCommand::M3RobotMonitorCommand(const M3RobotMonitorCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3RobotMonitorCommand::SharedCtor() {
  _cached_size_ = 0;
  force_safe_op_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3RobotMonitorCommand::~M3RobotMonitorCommand() {
  SharedDtor();
}

void M3RobotMonitorCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3RobotMonitorCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3RobotMonitorCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3RobotMonitorCommand_descriptor_;
}

const M3RobotMonitorCommand& M3RobotMonitorCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_5fmonitor_2eproto();  return *default_instance_;
}

M3RobotMonitorCommand* M3RobotMonitorCommand::default_instance_ = NULL;

M3RobotMonitorCommand* M3RobotMonitorCommand::New() const {
  return new M3RobotMonitorCommand;
}

void M3RobotMonitorCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    force_safe_op_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3RobotMonitorCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 force_safe_op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_safe_op_)));
          set_has_force_safe_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3RobotMonitorCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 force_safe_op = 1;
  if (has_force_safe_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->force_safe_op(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3RobotMonitorCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 force_safe_op = 1;
  if (has_force_safe_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->force_safe_op(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3RobotMonitorCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 force_safe_op = 1;
    if (has_force_safe_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force_safe_op());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3RobotMonitorCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3RobotMonitorCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3RobotMonitorCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3RobotMonitorCommand::MergeFrom(const M3RobotMonitorCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_force_safe_op()) {
      set_force_safe_op(from.force_safe_op());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3RobotMonitorCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3RobotMonitorCommand::CopyFrom(const M3RobotMonitorCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3RobotMonitorCommand::IsInitialized() const {
  
  return true;
}

void M3RobotMonitorCommand::Swap(M3RobotMonitorCommand* other) {
  if (other != this) {
    std::swap(force_safe_op_, other->force_safe_op_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3RobotMonitorCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3RobotMonitorCommand_descriptor_;
  metadata.reflection = M3RobotMonitorCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3RobotMonitorComponentParam::kMaxValWarnFieldNumber;
const int M3RobotMonitorComponentParam::kMinValWarnFieldNumber;
const int M3RobotMonitorComponentParam::kMaxValErrFieldNumber;
const int M3RobotMonitorComponentParam::kMinValErrFieldNumber;
const int M3RobotMonitorComponentParam::kComponentNameFieldNumber;
#endif  // !_MSC_VER

M3RobotMonitorComponentParam::M3RobotMonitorComponentParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3RobotMonitorComponentParam::InitAsDefaultInstance() {
}

M3RobotMonitorComponentParam::M3RobotMonitorComponentParam(const M3RobotMonitorComponentParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3RobotMonitorComponentParam::SharedCtor() {
  _cached_size_ = 0;
  max_val_warn_ = 0;
  min_val_warn_ = 0;
  max_val_err_ = 0;
  min_val_err_ = 0;
  component_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3RobotMonitorComponentParam::~M3RobotMonitorComponentParam() {
  SharedDtor();
}

void M3RobotMonitorComponentParam::SharedDtor() {
  if (component_name_ != &::google::protobuf::internal::kEmptyString) {
    delete component_name_;
  }
  if (this != default_instance_) {
  }
}

void M3RobotMonitorComponentParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3RobotMonitorComponentParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3RobotMonitorComponentParam_descriptor_;
}

const M3RobotMonitorComponentParam& M3RobotMonitorComponentParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_5fmonitor_2eproto();  return *default_instance_;
}

M3RobotMonitorComponentParam* M3RobotMonitorComponentParam::default_instance_ = NULL;

M3RobotMonitorComponentParam* M3RobotMonitorComponentParam::New() const {
  return new M3RobotMonitorComponentParam;
}

void M3RobotMonitorComponentParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_val_warn_ = 0;
    min_val_warn_ = 0;
    max_val_err_ = 0;
    min_val_err_ = 0;
    if (has_component_name()) {
      if (component_name_ != &::google::protobuf::internal::kEmptyString) {
        component_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3RobotMonitorComponentParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double max_val_warn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_val_warn_)));
          set_has_max_val_warn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_min_val_warn;
        break;
      }
      
      // optional double min_val_warn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_min_val_warn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_val_warn_)));
          set_has_min_val_warn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_max_val_err;
        break;
      }
      
      // optional double max_val_err = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_val_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_val_err_)));
          set_has_max_val_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_min_val_err;
        break;
      }
      
      // optional double min_val_err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_min_val_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_val_err_)));
          set_has_min_val_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_component_name;
        break;
      }
      
      // optional string component_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_component_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_component_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->component_name().data(), this->component_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3RobotMonitorComponentParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double max_val_warn = 1;
  if (has_max_val_warn()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_val_warn(), output);
  }
  
  // optional double min_val_warn = 2;
  if (has_min_val_warn()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->min_val_warn(), output);
  }
  
  // optional double max_val_err = 3;
  if (has_max_val_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_val_err(), output);
  }
  
  // optional double min_val_err = 4;
  if (has_min_val_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->min_val_err(), output);
  }
  
  // optional string component_name = 5;
  if (has_component_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->component_name().data(), this->component_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->component_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3RobotMonitorComponentParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double max_val_warn = 1;
  if (has_max_val_warn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_val_warn(), target);
  }
  
  // optional double min_val_warn = 2;
  if (has_min_val_warn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->min_val_warn(), target);
  }
  
  // optional double max_val_err = 3;
  if (has_max_val_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_val_err(), target);
  }
  
  // optional double min_val_err = 4;
  if (has_min_val_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->min_val_err(), target);
  }
  
  // optional string component_name = 5;
  if (has_component_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->component_name().data(), this->component_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->component_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3RobotMonitorComponentParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double max_val_warn = 1;
    if (has_max_val_warn()) {
      total_size += 1 + 8;
    }
    
    // optional double min_val_warn = 2;
    if (has_min_val_warn()) {
      total_size += 1 + 8;
    }
    
    // optional double max_val_err = 3;
    if (has_max_val_err()) {
      total_size += 1 + 8;
    }
    
    // optional double min_val_err = 4;
    if (has_min_val_err()) {
      total_size += 1 + 8;
    }
    
    // optional string component_name = 5;
    if (has_component_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->component_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3RobotMonitorComponentParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3RobotMonitorComponentParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3RobotMonitorComponentParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3RobotMonitorComponentParam::MergeFrom(const M3RobotMonitorComponentParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_val_warn()) {
      set_max_val_warn(from.max_val_warn());
    }
    if (from.has_min_val_warn()) {
      set_min_val_warn(from.min_val_warn());
    }
    if (from.has_max_val_err()) {
      set_max_val_err(from.max_val_err());
    }
    if (from.has_min_val_err()) {
      set_min_val_err(from.min_val_err());
    }
    if (from.has_component_name()) {
      set_component_name(from.component_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3RobotMonitorComponentParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3RobotMonitorComponentParam::CopyFrom(const M3RobotMonitorComponentParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3RobotMonitorComponentParam::IsInitialized() const {
  
  return true;
}

void M3RobotMonitorComponentParam::Swap(M3RobotMonitorComponentParam* other) {
  if (other != this) {
    std::swap(max_val_warn_, other->max_val_warn_);
    std::swap(min_val_warn_, other->min_val_warn_);
    std::swap(max_val_err_, other->max_val_err_);
    std::swap(min_val_err_, other->min_val_err_);
    std::swap(component_name_, other->component_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3RobotMonitorComponentParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3RobotMonitorComponentParam_descriptor_;
  metadata.reflection = M3RobotMonitorComponentParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3RobotMonitorParam::kVoltCompFieldNumber;
const int M3RobotMonitorParam::kTempCompFieldNumber;
#endif  // !_MSC_VER

M3RobotMonitorParam::M3RobotMonitorParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3RobotMonitorParam::InitAsDefaultInstance() {
}

M3RobotMonitorParam::M3RobotMonitorParam(const M3RobotMonitorParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3RobotMonitorParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3RobotMonitorParam::~M3RobotMonitorParam() {
  SharedDtor();
}

void M3RobotMonitorParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3RobotMonitorParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3RobotMonitorParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3RobotMonitorParam_descriptor_;
}

const M3RobotMonitorParam& M3RobotMonitorParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robot_5fmonitor_2eproto();  return *default_instance_;
}

M3RobotMonitorParam* M3RobotMonitorParam::default_instance_ = NULL;

M3RobotMonitorParam* M3RobotMonitorParam::New() const {
  return new M3RobotMonitorParam;
}

void M3RobotMonitorParam::Clear() {
  volt_comp_.Clear();
  temp_comp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3RobotMonitorParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .M3RobotMonitorComponentParam volt_comp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_volt_comp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_volt_comp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_volt_comp;
        if (input->ExpectTag(18)) goto parse_temp_comp;
        break;
      }
      
      // repeated .M3RobotMonitorComponentParam temp_comp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_temp_comp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_temp_comp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_temp_comp;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3RobotMonitorParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .M3RobotMonitorComponentParam volt_comp = 1;
  for (int i = 0; i < this->volt_comp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->volt_comp(i), output);
  }
  
  // repeated .M3RobotMonitorComponentParam temp_comp = 2;
  for (int i = 0; i < this->temp_comp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->temp_comp(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3RobotMonitorParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .M3RobotMonitorComponentParam volt_comp = 1;
  for (int i = 0; i < this->volt_comp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->volt_comp(i), target);
  }
  
  // repeated .M3RobotMonitorComponentParam temp_comp = 2;
  for (int i = 0; i < this->temp_comp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->temp_comp(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3RobotMonitorParam::ByteSize() const {
  int total_size = 0;
  
  // repeated .M3RobotMonitorComponentParam volt_comp = 1;
  total_size += 1 * this->volt_comp_size();
  for (int i = 0; i < this->volt_comp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->volt_comp(i));
  }
  
  // repeated .M3RobotMonitorComponentParam temp_comp = 2;
  total_size += 1 * this->temp_comp_size();
  for (int i = 0; i < this->temp_comp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->temp_comp(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3RobotMonitorParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3RobotMonitorParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3RobotMonitorParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3RobotMonitorParam::MergeFrom(const M3RobotMonitorParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  volt_comp_.MergeFrom(from.volt_comp_);
  temp_comp_.MergeFrom(from.temp_comp_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3RobotMonitorParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3RobotMonitorParam::CopyFrom(const M3RobotMonitorParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3RobotMonitorParam::IsInitialized() const {
  
  return true;
}

void M3RobotMonitorParam::Swap(M3RobotMonitorParam* other) {
  if (other != this) {
    volt_comp_.Swap(&other->volt_comp_);
    temp_comp_.Swap(&other->temp_comp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3RobotMonitorParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3RobotMonitorParam_descriptor_;
  metadata.reflection = M3RobotMonitorParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
