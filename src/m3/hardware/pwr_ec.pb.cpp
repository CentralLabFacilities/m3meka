// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pwr_ec.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* M3PwrEcStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3PwrEcStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3PwrEcCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3PwrEcCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3PwrEcParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3PwrEcParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_pwr_5fec_2eproto() {
  protobuf_AddDesc_pwr_5fec_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pwr_ec.proto");
  GOOGLE_CHECK(file != NULL);
  M3PwrEcStatus_descriptor_ = file->message_type(0);
  static const int M3PwrEcStatus_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrEcStatus, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrEcStatus, ethercat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrEcStatus, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrEcStatus, motor_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrEcStatus, adc_bus_voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrEcStatus, adc_current_digital_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrEcStatus, adc_ext_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrEcStatus, flags_),
  };
  M3PwrEcStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3PwrEcStatus_descriptor_,
      M3PwrEcStatus::default_instance_,
      M3PwrEcStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrEcStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrEcStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3PwrEcStatus));
  M3PwrEcCommand_descriptor_ = file->message_type(1);
  static const int M3PwrEcCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrEcCommand, enable_motor_),
  };
  M3PwrEcCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3PwrEcCommand_descriptor_,
      M3PwrEcCommand::default_instance_,
      M3PwrEcCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrEcCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrEcCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3PwrEcCommand));
  M3PwrEcParam_descriptor_ = file->message_type(2);
  static const int M3PwrEcParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrEcParam, config_),
  };
  M3PwrEcParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3PwrEcParam_descriptor_,
      M3PwrEcParam::default_instance_,
      M3PwrEcParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrEcParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3PwrEcParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3PwrEcParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pwr_5fec_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3PwrEcStatus_descriptor_, &M3PwrEcStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3PwrEcCommand_descriptor_, &M3PwrEcCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3PwrEcParam_descriptor_, &M3PwrEcParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pwr_5fec_2eproto() {
  delete M3PwrEcStatus::default_instance_;
  delete M3PwrEcStatus_reflection_;
  delete M3PwrEcCommand::default_instance_;
  delete M3PwrEcCommand_reflection_;
  delete M3PwrEcParam::default_instance_;
  delete M3PwrEcParam_reflection_;
}

void protobuf_AddDesc_pwr_5fec_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_component_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014pwr_ec.proto\032\024component_base.proto\"\323\001\n"
    "\rM3PwrEcStatus\022\033\n\004base\030\001 \001(\0132\r.M3BaseSta"
    "tus\022#\n\010ethercat\030\002 \001(\0132\021.M3EtherCATStatus"
    "\022\021\n\ttimestamp\030\003 \001(\005\022\025\n\rmotor_enabled\030\004 \001"
    "(\010\022\027\n\017adc_bus_voltage\030\005 \001(\005\022\033\n\023adc_curre"
    "nt_digital\030\006 \001(\005\022\021\n\tadc_ext_0\030\007 \001(\005\022\r\n\005f"
    "lags\030\010 \001(\005\"&\n\016M3PwrEcCommand\022\024\n\014enable_m"
    "otor\030\001 \001(\005\"\036\n\014M3PwrEcParam\022\016\n\006config\030\001 \001"
    "(\005B\002H\001", 326);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pwr_ec.proto", &protobuf_RegisterTypes);
  M3PwrEcStatus::default_instance_ = new M3PwrEcStatus();
  M3PwrEcCommand::default_instance_ = new M3PwrEcCommand();
  M3PwrEcParam::default_instance_ = new M3PwrEcParam();
  M3PwrEcStatus::default_instance_->InitAsDefaultInstance();
  M3PwrEcCommand::default_instance_->InitAsDefaultInstance();
  M3PwrEcParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pwr_5fec_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pwr_5fec_2eproto {
  StaticDescriptorInitializer_pwr_5fec_2eproto() {
    protobuf_AddDesc_pwr_5fec_2eproto();
  }
} static_descriptor_initializer_pwr_5fec_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int M3PwrEcStatus::kBaseFieldNumber;
const int M3PwrEcStatus::kEthercatFieldNumber;
const int M3PwrEcStatus::kTimestampFieldNumber;
const int M3PwrEcStatus::kMotorEnabledFieldNumber;
const int M3PwrEcStatus::kAdcBusVoltageFieldNumber;
const int M3PwrEcStatus::kAdcCurrentDigitalFieldNumber;
const int M3PwrEcStatus::kAdcExt0FieldNumber;
const int M3PwrEcStatus::kFlagsFieldNumber;
#endif  // !_MSC_VER

M3PwrEcStatus::M3PwrEcStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3PwrEcStatus::InitAsDefaultInstance() {
  base_ = const_cast< ::M3BaseStatus*>(&::M3BaseStatus::default_instance());
  ethercat_ = const_cast< ::M3EtherCATStatus*>(&::M3EtherCATStatus::default_instance());
}

M3PwrEcStatus::M3PwrEcStatus(const M3PwrEcStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3PwrEcStatus::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  ethercat_ = NULL;
  timestamp_ = 0;
  motor_enabled_ = false;
  adc_bus_voltage_ = 0;
  adc_current_digital_ = 0;
  adc_ext_0_ = 0;
  flags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3PwrEcStatus::~M3PwrEcStatus() {
  SharedDtor();
}

void M3PwrEcStatus::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete ethercat_;
  }
}

void M3PwrEcStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3PwrEcStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3PwrEcStatus_descriptor_;
}

const M3PwrEcStatus& M3PwrEcStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwr_5fec_2eproto();  return *default_instance_;
}

M3PwrEcStatus* M3PwrEcStatus::default_instance_ = NULL;

M3PwrEcStatus* M3PwrEcStatus::New() const {
  return new M3PwrEcStatus;
}

void M3PwrEcStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::M3BaseStatus::Clear();
    }
    if (has_ethercat()) {
      if (ethercat_ != NULL) ethercat_->::M3EtherCATStatus::Clear();
    }
    timestamp_ = 0;
    motor_enabled_ = false;
    adc_bus_voltage_ = 0;
    adc_current_digital_ = 0;
    adc_ext_0_ = 0;
    flags_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3PwrEcStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseStatus base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ethercat;
        break;
      }
      
      // optional .M3EtherCATStatus ethercat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ethercat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ethercat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }
      
      // optional int32 timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_motor_enabled;
        break;
      }
      
      // optional bool motor_enabled = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_motor_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &motor_enabled_)));
          set_has_motor_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_adc_bus_voltage;
        break;
      }
      
      // optional int32 adc_bus_voltage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adc_bus_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adc_bus_voltage_)));
          set_has_adc_bus_voltage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_adc_current_digital;
        break;
      }
      
      // optional int32 adc_current_digital = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adc_current_digital:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adc_current_digital_)));
          set_has_adc_current_digital();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_adc_ext_0;
        break;
      }
      
      // optional int32 adc_ext_0 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adc_ext_0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adc_ext_0_)));
          set_has_adc_ext_0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_flags;
        break;
      }
      
      // optional int32 flags = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3PwrEcStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // optional .M3EtherCATStatus ethercat = 2;
  if (has_ethercat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ethercat(), output);
  }
  
  // optional int32 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timestamp(), output);
  }
  
  // optional bool motor_enabled = 4;
  if (has_motor_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->motor_enabled(), output);
  }
  
  // optional int32 adc_bus_voltage = 5;
  if (has_adc_bus_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->adc_bus_voltage(), output);
  }
  
  // optional int32 adc_current_digital = 6;
  if (has_adc_current_digital()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->adc_current_digital(), output);
  }
  
  // optional int32 adc_ext_0 = 7;
  if (has_adc_ext_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->adc_ext_0(), output);
  }
  
  // optional int32 flags = 8;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->flags(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3PwrEcStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional .M3EtherCATStatus ethercat = 2;
  if (has_ethercat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ethercat(), target);
  }
  
  // optional int32 timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timestamp(), target);
  }
  
  // optional bool motor_enabled = 4;
  if (has_motor_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->motor_enabled(), target);
  }
  
  // optional int32 adc_bus_voltage = 5;
  if (has_adc_bus_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->adc_bus_voltage(), target);
  }
  
  // optional int32 adc_current_digital = 6;
  if (has_adc_current_digital()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->adc_current_digital(), target);
  }
  
  // optional int32 adc_ext_0 = 7;
  if (has_adc_ext_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->adc_ext_0(), target);
  }
  
  // optional int32 flags = 8;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->flags(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3PwrEcStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseStatus base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional .M3EtherCATStatus ethercat = 2;
    if (has_ethercat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ethercat());
    }
    
    // optional int32 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }
    
    // optional bool motor_enabled = 4;
    if (has_motor_enabled()) {
      total_size += 1 + 1;
    }
    
    // optional int32 adc_bus_voltage = 5;
    if (has_adc_bus_voltage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_bus_voltage());
    }
    
    // optional int32 adc_current_digital = 6;
    if (has_adc_current_digital()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_current_digital());
    }
    
    // optional int32 adc_ext_0 = 7;
    if (has_adc_ext_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_ext_0());
    }
    
    // optional int32 flags = 8;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3PwrEcStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3PwrEcStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3PwrEcStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3PwrEcStatus::MergeFrom(const M3PwrEcStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::M3BaseStatus::MergeFrom(from.base());
    }
    if (from.has_ethercat()) {
      mutable_ethercat()->::M3EtherCATStatus::MergeFrom(from.ethercat());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_motor_enabled()) {
      set_motor_enabled(from.motor_enabled());
    }
    if (from.has_adc_bus_voltage()) {
      set_adc_bus_voltage(from.adc_bus_voltage());
    }
    if (from.has_adc_current_digital()) {
      set_adc_current_digital(from.adc_current_digital());
    }
    if (from.has_adc_ext_0()) {
      set_adc_ext_0(from.adc_ext_0());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3PwrEcStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3PwrEcStatus::CopyFrom(const M3PwrEcStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3PwrEcStatus::IsInitialized() const {
  
  return true;
}

void M3PwrEcStatus::Swap(M3PwrEcStatus* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(ethercat_, other->ethercat_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(motor_enabled_, other->motor_enabled_);
    std::swap(adc_bus_voltage_, other->adc_bus_voltage_);
    std::swap(adc_current_digital_, other->adc_current_digital_);
    std::swap(adc_ext_0_, other->adc_ext_0_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3PwrEcStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3PwrEcStatus_descriptor_;
  metadata.reflection = M3PwrEcStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3PwrEcCommand::kEnableMotorFieldNumber;
#endif  // !_MSC_VER

M3PwrEcCommand::M3PwrEcCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3PwrEcCommand::InitAsDefaultInstance() {
}

M3PwrEcCommand::M3PwrEcCommand(const M3PwrEcCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3PwrEcCommand::SharedCtor() {
  _cached_size_ = 0;
  enable_motor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3PwrEcCommand::~M3PwrEcCommand() {
  SharedDtor();
}

void M3PwrEcCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3PwrEcCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3PwrEcCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3PwrEcCommand_descriptor_;
}

const M3PwrEcCommand& M3PwrEcCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwr_5fec_2eproto();  return *default_instance_;
}

M3PwrEcCommand* M3PwrEcCommand::default_instance_ = NULL;

M3PwrEcCommand* M3PwrEcCommand::New() const {
  return new M3PwrEcCommand;
}

void M3PwrEcCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enable_motor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3PwrEcCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 enable_motor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enable_motor_)));
          set_has_enable_motor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3PwrEcCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 enable_motor = 1;
  if (has_enable_motor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->enable_motor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3PwrEcCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 enable_motor = 1;
  if (has_enable_motor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->enable_motor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3PwrEcCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 enable_motor = 1;
    if (has_enable_motor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enable_motor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3PwrEcCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3PwrEcCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3PwrEcCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3PwrEcCommand::MergeFrom(const M3PwrEcCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable_motor()) {
      set_enable_motor(from.enable_motor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3PwrEcCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3PwrEcCommand::CopyFrom(const M3PwrEcCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3PwrEcCommand::IsInitialized() const {
  
  return true;
}

void M3PwrEcCommand::Swap(M3PwrEcCommand* other) {
  if (other != this) {
    std::swap(enable_motor_, other->enable_motor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3PwrEcCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3PwrEcCommand_descriptor_;
  metadata.reflection = M3PwrEcCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3PwrEcParam::kConfigFieldNumber;
#endif  // !_MSC_VER

M3PwrEcParam::M3PwrEcParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3PwrEcParam::InitAsDefaultInstance() {
}

M3PwrEcParam::M3PwrEcParam(const M3PwrEcParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3PwrEcParam::SharedCtor() {
  _cached_size_ = 0;
  config_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3PwrEcParam::~M3PwrEcParam() {
  SharedDtor();
}

void M3PwrEcParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3PwrEcParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3PwrEcParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3PwrEcParam_descriptor_;
}

const M3PwrEcParam& M3PwrEcParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pwr_5fec_2eproto();  return *default_instance_;
}

M3PwrEcParam* M3PwrEcParam::default_instance_ = NULL;

M3PwrEcParam* M3PwrEcParam::New() const {
  return new M3PwrEcParam;
}

void M3PwrEcParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    config_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3PwrEcParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 config = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_)));
          set_has_config();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3PwrEcParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 config = 1;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->config(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3PwrEcParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 config = 1;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->config(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3PwrEcParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 config = 1;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3PwrEcParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3PwrEcParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3PwrEcParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3PwrEcParam::MergeFrom(const M3PwrEcParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config()) {
      set_config(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3PwrEcParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3PwrEcParam::CopyFrom(const M3PwrEcParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3PwrEcParam::IsInitialized() const {
  
  return true;
}

void M3PwrEcParam::Swap(M3PwrEcParam* other) {
  if (other != this) {
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3PwrEcParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3PwrEcParam_descriptor_;
  metadata.reflection = M3PwrEcParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
