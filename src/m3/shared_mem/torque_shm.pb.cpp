// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "torque_shm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* M3TorqueShmBaseStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3TorqueShmBaseStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3TorqueShmBaseCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3TorqueShmBaseCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3TorqueShmStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3TorqueShmStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3TorqueShmCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3TorqueShmCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3TorqueShmParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3TorqueShmParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_torque_5fshm_2eproto() {
  protobuf_AddDesc_torque_5fshm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "torque_shm.proto");
  GOOGLE_CHECK(file != NULL);
  M3TorqueShmBaseStatus_descriptor_ = file->message_type(0);
  static const int M3TorqueShmBaseStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmBaseStatus, torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmBaseStatus, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmBaseStatus, thetadot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmBaseStatus, ctrl_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmBaseStatus, loadx6_),
  };
  M3TorqueShmBaseStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3TorqueShmBaseStatus_descriptor_,
      M3TorqueShmBaseStatus::default_instance_,
      M3TorqueShmBaseStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmBaseStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmBaseStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3TorqueShmBaseStatus));
  M3TorqueShmBaseCommand_descriptor_ = file->message_type(1);
  static const int M3TorqueShmBaseCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmBaseCommand, tq_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmBaseCommand, q_desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmBaseCommand, slew_rate_q_desired_),
  };
  M3TorqueShmBaseCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3TorqueShmBaseCommand_descriptor_,
      M3TorqueShmBaseCommand::default_instance_,
      M3TorqueShmBaseCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmBaseCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmBaseCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3TorqueShmBaseCommand));
  M3TorqueShmStatus_descriptor_ = file->message_type(2);
  static const int M3TorqueShmStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmStatus, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmStatus, right_arm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmStatus, left_arm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmStatus, torso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmStatus, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmStatus, right_hand_),
  };
  M3TorqueShmStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3TorqueShmStatus_descriptor_,
      M3TorqueShmStatus::default_instance_,
      M3TorqueShmStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3TorqueShmStatus));
  M3TorqueShmCommand_descriptor_ = file->message_type(3);
  static const int M3TorqueShmCommand_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmCommand, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmCommand, right_arm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmCommand, left_arm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmCommand, torso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmCommand, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmCommand, right_hand_),
  };
  M3TorqueShmCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3TorqueShmCommand_descriptor_,
      M3TorqueShmCommand::default_instance_,
      M3TorqueShmCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3TorqueShmCommand));
  M3TorqueShmParam_descriptor_ = file->message_type(4);
  static const int M3TorqueShmParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmParam, test_),
  };
  M3TorqueShmParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3TorqueShmParam_descriptor_,
      M3TorqueShmParam::default_instance_,
      M3TorqueShmParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3TorqueShmParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3TorqueShmParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_torque_5fshm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3TorqueShmBaseStatus_descriptor_, &M3TorqueShmBaseStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3TorqueShmBaseCommand_descriptor_, &M3TorqueShmBaseCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3TorqueShmStatus_descriptor_, &M3TorqueShmStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3TorqueShmCommand_descriptor_, &M3TorqueShmCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3TorqueShmParam_descriptor_, &M3TorqueShmParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_torque_5fshm_2eproto() {
  delete M3TorqueShmBaseStatus::default_instance_;
  delete M3TorqueShmBaseStatus_reflection_;
  delete M3TorqueShmBaseCommand::default_instance_;
  delete M3TorqueShmBaseCommand_reflection_;
  delete M3TorqueShmStatus::default_instance_;
  delete M3TorqueShmStatus_reflection_;
  delete M3TorqueShmCommand::default_instance_;
  delete M3TorqueShmCommand_reflection_;
  delete M3TorqueShmParam::default_instance_;
  delete M3TorqueShmParam_reflection_;
}

void protobuf_AddDesc_torque_5fshm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_component_5fbase_2eproto();
  ::protobuf_AddDesc_joint_5farray_5fmode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020torque_shm.proto\032\024component_base.proto"
    "\032\026joint_array_mode.proto\"~\n\025M3TorqueShmB"
    "aseStatus\022\016\n\006torque\030\001 \003(\001\022\r\n\005theta\030\002 \003(\001"
    "\022\020\n\010thetadot\030\003 \003(\001\022$\n\tctrl_mode\030\004 \003(\0162\021."
    "JOINT_ARRAY_MODE\022\016\n\006loadx6\030\005 \003(\001\"\\\n\026M3To"
    "rqueShmBaseCommand\022\022\n\ntq_desired\030\001 \003(\001\022\021"
    "\n\tq_desired\030\002 \003(\001\022\033\n\023slew_rate_q_desired"
    "\030\003 \003(\001\"\376\001\n\021M3TorqueShmStatus\022\033\n\004base\030\001 \001"
    "(\0132\r.M3BaseStatus\022)\n\tright_arm\030\002 \001(\0132\026.M"
    "3TorqueShmBaseStatus\022(\n\010left_arm\030\003 \001(\0132\026"
    ".M3TorqueShmBaseStatus\022%\n\005torso\030\004 \001(\0132\026."
    "M3TorqueShmBaseStatus\022$\n\004head\030\005 \001(\0132\026.M3"
    "TorqueShmBaseStatus\022*\n\nright_hand\030\006 \001(\0132"
    "\026.M3TorqueShmBaseStatus\"\372\001\n\022M3TorqueShmC"
    "ommand\022\021\n\ttimestamp\030\001 \001(\003\022*\n\tright_arm\030\002"
    " \001(\0132\027.M3TorqueShmBaseCommand\022)\n\010left_ar"
    "m\030\003 \001(\0132\027.M3TorqueShmBaseCommand\022&\n\005tors"
    "o\030\004 \001(\0132\027.M3TorqueShmBaseCommand\022%\n\004head"
    "\030\005 \001(\0132\027.M3TorqueShmBaseCommand\022+\n\nright"
    "_hand\030\006 \001(\0132\027.M3TorqueShmBaseCommand\" \n\020"
    "M3TorqueShmParam\022\014\n\004test\030\001 \001(\001B\002H\001", 834);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "torque_shm.proto", &protobuf_RegisterTypes);
  M3TorqueShmBaseStatus::default_instance_ = new M3TorqueShmBaseStatus();
  M3TorqueShmBaseCommand::default_instance_ = new M3TorqueShmBaseCommand();
  M3TorqueShmStatus::default_instance_ = new M3TorqueShmStatus();
  M3TorqueShmCommand::default_instance_ = new M3TorqueShmCommand();
  M3TorqueShmParam::default_instance_ = new M3TorqueShmParam();
  M3TorqueShmBaseStatus::default_instance_->InitAsDefaultInstance();
  M3TorqueShmBaseCommand::default_instance_->InitAsDefaultInstance();
  M3TorqueShmStatus::default_instance_->InitAsDefaultInstance();
  M3TorqueShmCommand::default_instance_->InitAsDefaultInstance();
  M3TorqueShmParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_torque_5fshm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_torque_5fshm_2eproto {
  StaticDescriptorInitializer_torque_5fshm_2eproto() {
    protobuf_AddDesc_torque_5fshm_2eproto();
  }
} static_descriptor_initializer_torque_5fshm_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int M3TorqueShmBaseStatus::kTorqueFieldNumber;
const int M3TorqueShmBaseStatus::kThetaFieldNumber;
const int M3TorqueShmBaseStatus::kThetadotFieldNumber;
const int M3TorqueShmBaseStatus::kCtrlModeFieldNumber;
const int M3TorqueShmBaseStatus::kLoadx6FieldNumber;
#endif  // !_MSC_VER

M3TorqueShmBaseStatus::M3TorqueShmBaseStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3TorqueShmBaseStatus::InitAsDefaultInstance() {
}

M3TorqueShmBaseStatus::M3TorqueShmBaseStatus(const M3TorqueShmBaseStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3TorqueShmBaseStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3TorqueShmBaseStatus::~M3TorqueShmBaseStatus() {
  SharedDtor();
}

void M3TorqueShmBaseStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3TorqueShmBaseStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3TorqueShmBaseStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3TorqueShmBaseStatus_descriptor_;
}

const M3TorqueShmBaseStatus& M3TorqueShmBaseStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_torque_5fshm_2eproto();  return *default_instance_;
}

M3TorqueShmBaseStatus* M3TorqueShmBaseStatus::default_instance_ = NULL;

M3TorqueShmBaseStatus* M3TorqueShmBaseStatus::New() const {
  return new M3TorqueShmBaseStatus;
}

void M3TorqueShmBaseStatus::Clear() {
  torque_.Clear();
  theta_.Clear();
  thetadot_.Clear();
  ctrl_mode_.Clear();
  loadx6_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3TorqueShmBaseStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double torque = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_torque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_torque())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_torque())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_torque;
        if (input->ExpectTag(17)) goto parse_theta;
        break;
      }
      
      // repeated double theta = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_theta())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_theta())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_theta;
        if (input->ExpectTag(25)) goto parse_thetadot;
        break;
      }
      
      // repeated double thetadot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_thetadot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_thetadot())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_thetadot())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_thetadot;
        if (input->ExpectTag(32)) goto parse_ctrl_mode;
        break;
      }
      
      // repeated .JOINT_ARRAY_MODE ctrl_mode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctrl_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (JOINT_ARRAY_MODE_IsValid(value)) {
            add_ctrl_mode(static_cast< JOINT_ARRAY_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &JOINT_ARRAY_MODE_IsValid,
                 this->mutable_ctrl_mode())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ctrl_mode;
        if (input->ExpectTag(41)) goto parse_loadx6;
        break;
      }
      
      // repeated double loadx6 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_loadx6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_loadx6())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_loadx6())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_loadx6;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3TorqueShmBaseStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double torque = 1;
  for (int i = 0; i < this->torque_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->torque(i), output);
  }
  
  // repeated double theta = 2;
  for (int i = 0; i < this->theta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->theta(i), output);
  }
  
  // repeated double thetadot = 3;
  for (int i = 0; i < this->thetadot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->thetadot(i), output);
  }
  
  // repeated .JOINT_ARRAY_MODE ctrl_mode = 4;
  for (int i = 0; i < this->ctrl_mode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ctrl_mode(i), output);
  }
  
  // repeated double loadx6 = 5;
  for (int i = 0; i < this->loadx6_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->loadx6(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3TorqueShmBaseStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double torque = 1;
  for (int i = 0; i < this->torque_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->torque(i), target);
  }
  
  // repeated double theta = 2;
  for (int i = 0; i < this->theta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->theta(i), target);
  }
  
  // repeated double thetadot = 3;
  for (int i = 0; i < this->thetadot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->thetadot(i), target);
  }
  
  // repeated .JOINT_ARRAY_MODE ctrl_mode = 4;
  for (int i = 0; i < this->ctrl_mode_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ctrl_mode(i), target);
  }
  
  // repeated double loadx6 = 5;
  for (int i = 0; i < this->loadx6_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->loadx6(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3TorqueShmBaseStatus::ByteSize() const {
  int total_size = 0;
  
  // repeated double torque = 1;
  {
    int data_size = 0;
    data_size = 8 * this->torque_size();
    total_size += 1 * this->torque_size() + data_size;
  }
  
  // repeated double theta = 2;
  {
    int data_size = 0;
    data_size = 8 * this->theta_size();
    total_size += 1 * this->theta_size() + data_size;
  }
  
  // repeated double thetadot = 3;
  {
    int data_size = 0;
    data_size = 8 * this->thetadot_size();
    total_size += 1 * this->thetadot_size() + data_size;
  }
  
  // repeated .JOINT_ARRAY_MODE ctrl_mode = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->ctrl_mode_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->ctrl_mode(i));
    }
    total_size += 1 * this->ctrl_mode_size() + data_size;
  }
  
  // repeated double loadx6 = 5;
  {
    int data_size = 0;
    data_size = 8 * this->loadx6_size();
    total_size += 1 * this->loadx6_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3TorqueShmBaseStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3TorqueShmBaseStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3TorqueShmBaseStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3TorqueShmBaseStatus::MergeFrom(const M3TorqueShmBaseStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  torque_.MergeFrom(from.torque_);
  theta_.MergeFrom(from.theta_);
  thetadot_.MergeFrom(from.thetadot_);
  ctrl_mode_.MergeFrom(from.ctrl_mode_);
  loadx6_.MergeFrom(from.loadx6_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3TorqueShmBaseStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3TorqueShmBaseStatus::CopyFrom(const M3TorqueShmBaseStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3TorqueShmBaseStatus::IsInitialized() const {
  
  return true;
}

void M3TorqueShmBaseStatus::Swap(M3TorqueShmBaseStatus* other) {
  if (other != this) {
    torque_.Swap(&other->torque_);
    theta_.Swap(&other->theta_);
    thetadot_.Swap(&other->thetadot_);
    ctrl_mode_.Swap(&other->ctrl_mode_);
    loadx6_.Swap(&other->loadx6_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3TorqueShmBaseStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3TorqueShmBaseStatus_descriptor_;
  metadata.reflection = M3TorqueShmBaseStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3TorqueShmBaseCommand::kTqDesiredFieldNumber;
const int M3TorqueShmBaseCommand::kQDesiredFieldNumber;
const int M3TorqueShmBaseCommand::kSlewRateQDesiredFieldNumber;
#endif  // !_MSC_VER

M3TorqueShmBaseCommand::M3TorqueShmBaseCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3TorqueShmBaseCommand::InitAsDefaultInstance() {
}

M3TorqueShmBaseCommand::M3TorqueShmBaseCommand(const M3TorqueShmBaseCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3TorqueShmBaseCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3TorqueShmBaseCommand::~M3TorqueShmBaseCommand() {
  SharedDtor();
}

void M3TorqueShmBaseCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3TorqueShmBaseCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3TorqueShmBaseCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3TorqueShmBaseCommand_descriptor_;
}

const M3TorqueShmBaseCommand& M3TorqueShmBaseCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_torque_5fshm_2eproto();  return *default_instance_;
}

M3TorqueShmBaseCommand* M3TorqueShmBaseCommand::default_instance_ = NULL;

M3TorqueShmBaseCommand* M3TorqueShmBaseCommand::New() const {
  return new M3TorqueShmBaseCommand;
}

void M3TorqueShmBaseCommand::Clear() {
  tq_desired_.Clear();
  q_desired_.Clear();
  slew_rate_q_desired_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3TorqueShmBaseCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double tq_desired = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tq_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_tq_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_tq_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_tq_desired;
        if (input->ExpectTag(17)) goto parse_q_desired;
        break;
      }
      
      // repeated double q_desired = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_q_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_q_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_q_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_q_desired;
        if (input->ExpectTag(25)) goto parse_slew_rate_q_desired;
        break;
      }
      
      // repeated double slew_rate_q_desired = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_slew_rate_q_desired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_slew_rate_q_desired())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_slew_rate_q_desired())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_slew_rate_q_desired;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3TorqueShmBaseCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double tq_desired = 1;
  for (int i = 0; i < this->tq_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->tq_desired(i), output);
  }
  
  // repeated double q_desired = 2;
  for (int i = 0; i < this->q_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->q_desired(i), output);
  }
  
  // repeated double slew_rate_q_desired = 3;
  for (int i = 0; i < this->slew_rate_q_desired_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->slew_rate_q_desired(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3TorqueShmBaseCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double tq_desired = 1;
  for (int i = 0; i < this->tq_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->tq_desired(i), target);
  }
  
  // repeated double q_desired = 2;
  for (int i = 0; i < this->q_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->q_desired(i), target);
  }
  
  // repeated double slew_rate_q_desired = 3;
  for (int i = 0; i < this->slew_rate_q_desired_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->slew_rate_q_desired(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3TorqueShmBaseCommand::ByteSize() const {
  int total_size = 0;
  
  // repeated double tq_desired = 1;
  {
    int data_size = 0;
    data_size = 8 * this->tq_desired_size();
    total_size += 1 * this->tq_desired_size() + data_size;
  }
  
  // repeated double q_desired = 2;
  {
    int data_size = 0;
    data_size = 8 * this->q_desired_size();
    total_size += 1 * this->q_desired_size() + data_size;
  }
  
  // repeated double slew_rate_q_desired = 3;
  {
    int data_size = 0;
    data_size = 8 * this->slew_rate_q_desired_size();
    total_size += 1 * this->slew_rate_q_desired_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3TorqueShmBaseCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3TorqueShmBaseCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3TorqueShmBaseCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3TorqueShmBaseCommand::MergeFrom(const M3TorqueShmBaseCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  tq_desired_.MergeFrom(from.tq_desired_);
  q_desired_.MergeFrom(from.q_desired_);
  slew_rate_q_desired_.MergeFrom(from.slew_rate_q_desired_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3TorqueShmBaseCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3TorqueShmBaseCommand::CopyFrom(const M3TorqueShmBaseCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3TorqueShmBaseCommand::IsInitialized() const {
  
  return true;
}

void M3TorqueShmBaseCommand::Swap(M3TorqueShmBaseCommand* other) {
  if (other != this) {
    tq_desired_.Swap(&other->tq_desired_);
    q_desired_.Swap(&other->q_desired_);
    slew_rate_q_desired_.Swap(&other->slew_rate_q_desired_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3TorqueShmBaseCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3TorqueShmBaseCommand_descriptor_;
  metadata.reflection = M3TorqueShmBaseCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3TorqueShmStatus::kBaseFieldNumber;
const int M3TorqueShmStatus::kRightArmFieldNumber;
const int M3TorqueShmStatus::kLeftArmFieldNumber;
const int M3TorqueShmStatus::kTorsoFieldNumber;
const int M3TorqueShmStatus::kHeadFieldNumber;
const int M3TorqueShmStatus::kRightHandFieldNumber;
#endif  // !_MSC_VER

M3TorqueShmStatus::M3TorqueShmStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3TorqueShmStatus::InitAsDefaultInstance() {
  base_ = const_cast< ::M3BaseStatus*>(&::M3BaseStatus::default_instance());
  right_arm_ = const_cast< ::M3TorqueShmBaseStatus*>(&::M3TorqueShmBaseStatus::default_instance());
  left_arm_ = const_cast< ::M3TorqueShmBaseStatus*>(&::M3TorqueShmBaseStatus::default_instance());
  torso_ = const_cast< ::M3TorqueShmBaseStatus*>(&::M3TorqueShmBaseStatus::default_instance());
  head_ = const_cast< ::M3TorqueShmBaseStatus*>(&::M3TorqueShmBaseStatus::default_instance());
  right_hand_ = const_cast< ::M3TorqueShmBaseStatus*>(&::M3TorqueShmBaseStatus::default_instance());
}

M3TorqueShmStatus::M3TorqueShmStatus(const M3TorqueShmStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3TorqueShmStatus::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  right_arm_ = NULL;
  left_arm_ = NULL;
  torso_ = NULL;
  head_ = NULL;
  right_hand_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3TorqueShmStatus::~M3TorqueShmStatus() {
  SharedDtor();
}

void M3TorqueShmStatus::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete right_arm_;
    delete left_arm_;
    delete torso_;
    delete head_;
    delete right_hand_;
  }
}

void M3TorqueShmStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3TorqueShmStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3TorqueShmStatus_descriptor_;
}

const M3TorqueShmStatus& M3TorqueShmStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_torque_5fshm_2eproto();  return *default_instance_;
}

M3TorqueShmStatus* M3TorqueShmStatus::default_instance_ = NULL;

M3TorqueShmStatus* M3TorqueShmStatus::New() const {
  return new M3TorqueShmStatus;
}

void M3TorqueShmStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base()) {
      if (base_ != NULL) base_->::M3BaseStatus::Clear();
    }
    if (has_right_arm()) {
      if (right_arm_ != NULL) right_arm_->::M3TorqueShmBaseStatus::Clear();
    }
    if (has_left_arm()) {
      if (left_arm_ != NULL) left_arm_->::M3TorqueShmBaseStatus::Clear();
    }
    if (has_torso()) {
      if (torso_ != NULL) torso_->::M3TorqueShmBaseStatus::Clear();
    }
    if (has_head()) {
      if (head_ != NULL) head_->::M3TorqueShmBaseStatus::Clear();
    }
    if (has_right_hand()) {
      if (right_hand_ != NULL) right_hand_->::M3TorqueShmBaseStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3TorqueShmStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseStatus base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_right_arm;
        break;
      }
      
      // optional .M3TorqueShmBaseStatus right_arm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_right_arm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_arm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_left_arm;
        break;
      }
      
      // optional .M3TorqueShmBaseStatus left_arm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_left_arm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_arm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_torso;
        break;
      }
      
      // optional .M3TorqueShmBaseStatus torso = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_torso:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_torso()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_head;
        break;
      }
      
      // optional .M3TorqueShmBaseStatus head = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_right_hand;
        break;
      }
      
      // optional .M3TorqueShmBaseStatus right_hand = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_right_hand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_hand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3TorqueShmStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }
  
  // optional .M3TorqueShmBaseStatus right_arm = 2;
  if (has_right_arm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->right_arm(), output);
  }
  
  // optional .M3TorqueShmBaseStatus left_arm = 3;
  if (has_left_arm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->left_arm(), output);
  }
  
  // optional .M3TorqueShmBaseStatus torso = 4;
  if (has_torso()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->torso(), output);
  }
  
  // optional .M3TorqueShmBaseStatus head = 5;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->head(), output);
  }
  
  // optional .M3TorqueShmBaseStatus right_hand = 6;
  if (has_right_hand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->right_hand(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3TorqueShmStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseStatus base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional .M3TorqueShmBaseStatus right_arm = 2;
  if (has_right_arm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->right_arm(), target);
  }
  
  // optional .M3TorqueShmBaseStatus left_arm = 3;
  if (has_left_arm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->left_arm(), target);
  }
  
  // optional .M3TorqueShmBaseStatus torso = 4;
  if (has_torso()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->torso(), target);
  }
  
  // optional .M3TorqueShmBaseStatus head = 5;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->head(), target);
  }
  
  // optional .M3TorqueShmBaseStatus right_hand = 6;
  if (has_right_hand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->right_hand(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3TorqueShmStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseStatus base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional .M3TorqueShmBaseStatus right_arm = 2;
    if (has_right_arm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_arm());
    }
    
    // optional .M3TorqueShmBaseStatus left_arm = 3;
    if (has_left_arm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_arm());
    }
    
    // optional .M3TorqueShmBaseStatus torso = 4;
    if (has_torso()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->torso());
    }
    
    // optional .M3TorqueShmBaseStatus head = 5;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }
    
    // optional .M3TorqueShmBaseStatus right_hand = 6;
    if (has_right_hand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_hand());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3TorqueShmStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3TorqueShmStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3TorqueShmStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3TorqueShmStatus::MergeFrom(const M3TorqueShmStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::M3BaseStatus::MergeFrom(from.base());
    }
    if (from.has_right_arm()) {
      mutable_right_arm()->::M3TorqueShmBaseStatus::MergeFrom(from.right_arm());
    }
    if (from.has_left_arm()) {
      mutable_left_arm()->::M3TorqueShmBaseStatus::MergeFrom(from.left_arm());
    }
    if (from.has_torso()) {
      mutable_torso()->::M3TorqueShmBaseStatus::MergeFrom(from.torso());
    }
    if (from.has_head()) {
      mutable_head()->::M3TorqueShmBaseStatus::MergeFrom(from.head());
    }
    if (from.has_right_hand()) {
      mutable_right_hand()->::M3TorqueShmBaseStatus::MergeFrom(from.right_hand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3TorqueShmStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3TorqueShmStatus::CopyFrom(const M3TorqueShmStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3TorqueShmStatus::IsInitialized() const {
  
  return true;
}

void M3TorqueShmStatus::Swap(M3TorqueShmStatus* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(right_arm_, other->right_arm_);
    std::swap(left_arm_, other->left_arm_);
    std::swap(torso_, other->torso_);
    std::swap(head_, other->head_);
    std::swap(right_hand_, other->right_hand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3TorqueShmStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3TorqueShmStatus_descriptor_;
  metadata.reflection = M3TorqueShmStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3TorqueShmCommand::kTimestampFieldNumber;
const int M3TorqueShmCommand::kRightArmFieldNumber;
const int M3TorqueShmCommand::kLeftArmFieldNumber;
const int M3TorqueShmCommand::kTorsoFieldNumber;
const int M3TorqueShmCommand::kHeadFieldNumber;
const int M3TorqueShmCommand::kRightHandFieldNumber;
#endif  // !_MSC_VER

M3TorqueShmCommand::M3TorqueShmCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3TorqueShmCommand::InitAsDefaultInstance() {
  right_arm_ = const_cast< ::M3TorqueShmBaseCommand*>(&::M3TorqueShmBaseCommand::default_instance());
  left_arm_ = const_cast< ::M3TorqueShmBaseCommand*>(&::M3TorqueShmBaseCommand::default_instance());
  torso_ = const_cast< ::M3TorqueShmBaseCommand*>(&::M3TorqueShmBaseCommand::default_instance());
  head_ = const_cast< ::M3TorqueShmBaseCommand*>(&::M3TorqueShmBaseCommand::default_instance());
  right_hand_ = const_cast< ::M3TorqueShmBaseCommand*>(&::M3TorqueShmBaseCommand::default_instance());
}

M3TorqueShmCommand::M3TorqueShmCommand(const M3TorqueShmCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3TorqueShmCommand::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  right_arm_ = NULL;
  left_arm_ = NULL;
  torso_ = NULL;
  head_ = NULL;
  right_hand_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3TorqueShmCommand::~M3TorqueShmCommand() {
  SharedDtor();
}

void M3TorqueShmCommand::SharedDtor() {
  if (this != default_instance_) {
    delete right_arm_;
    delete left_arm_;
    delete torso_;
    delete head_;
    delete right_hand_;
  }
}

void M3TorqueShmCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3TorqueShmCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3TorqueShmCommand_descriptor_;
}

const M3TorqueShmCommand& M3TorqueShmCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_torque_5fshm_2eproto();  return *default_instance_;
}

M3TorqueShmCommand* M3TorqueShmCommand::default_instance_ = NULL;

M3TorqueShmCommand* M3TorqueShmCommand::New() const {
  return new M3TorqueShmCommand;
}

void M3TorqueShmCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_right_arm()) {
      if (right_arm_ != NULL) right_arm_->::M3TorqueShmBaseCommand::Clear();
    }
    if (has_left_arm()) {
      if (left_arm_ != NULL) left_arm_->::M3TorqueShmBaseCommand::Clear();
    }
    if (has_torso()) {
      if (torso_ != NULL) torso_->::M3TorqueShmBaseCommand::Clear();
    }
    if (has_head()) {
      if (head_ != NULL) head_->::M3TorqueShmBaseCommand::Clear();
    }
    if (has_right_hand()) {
      if (right_hand_ != NULL) right_hand_->::M3TorqueShmBaseCommand::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3TorqueShmCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_right_arm;
        break;
      }
      
      // optional .M3TorqueShmBaseCommand right_arm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_right_arm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_arm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_left_arm;
        break;
      }
      
      // optional .M3TorqueShmBaseCommand left_arm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_left_arm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_arm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_torso;
        break;
      }
      
      // optional .M3TorqueShmBaseCommand torso = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_torso:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_torso()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_head;
        break;
      }
      
      // optional .M3TorqueShmBaseCommand head = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_right_hand;
        break;
      }
      
      // optional .M3TorqueShmBaseCommand right_hand = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_right_hand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_hand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3TorqueShmCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }
  
  // optional .M3TorqueShmBaseCommand right_arm = 2;
  if (has_right_arm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->right_arm(), output);
  }
  
  // optional .M3TorqueShmBaseCommand left_arm = 3;
  if (has_left_arm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->left_arm(), output);
  }
  
  // optional .M3TorqueShmBaseCommand torso = 4;
  if (has_torso()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->torso(), output);
  }
  
  // optional .M3TorqueShmBaseCommand head = 5;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->head(), output);
  }
  
  // optional .M3TorqueShmBaseCommand right_hand = 6;
  if (has_right_hand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->right_hand(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3TorqueShmCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }
  
  // optional .M3TorqueShmBaseCommand right_arm = 2;
  if (has_right_arm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->right_arm(), target);
  }
  
  // optional .M3TorqueShmBaseCommand left_arm = 3;
  if (has_left_arm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->left_arm(), target);
  }
  
  // optional .M3TorqueShmBaseCommand torso = 4;
  if (has_torso()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->torso(), target);
  }
  
  // optional .M3TorqueShmBaseCommand head = 5;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->head(), target);
  }
  
  // optional .M3TorqueShmBaseCommand right_hand = 6;
  if (has_right_hand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->right_hand(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3TorqueShmCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }
    
    // optional .M3TorqueShmBaseCommand right_arm = 2;
    if (has_right_arm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_arm());
    }
    
    // optional .M3TorqueShmBaseCommand left_arm = 3;
    if (has_left_arm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_arm());
    }
    
    // optional .M3TorqueShmBaseCommand torso = 4;
    if (has_torso()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->torso());
    }
    
    // optional .M3TorqueShmBaseCommand head = 5;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }
    
    // optional .M3TorqueShmBaseCommand right_hand = 6;
    if (has_right_hand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_hand());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3TorqueShmCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3TorqueShmCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3TorqueShmCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3TorqueShmCommand::MergeFrom(const M3TorqueShmCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_right_arm()) {
      mutable_right_arm()->::M3TorqueShmBaseCommand::MergeFrom(from.right_arm());
    }
    if (from.has_left_arm()) {
      mutable_left_arm()->::M3TorqueShmBaseCommand::MergeFrom(from.left_arm());
    }
    if (from.has_torso()) {
      mutable_torso()->::M3TorqueShmBaseCommand::MergeFrom(from.torso());
    }
    if (from.has_head()) {
      mutable_head()->::M3TorqueShmBaseCommand::MergeFrom(from.head());
    }
    if (from.has_right_hand()) {
      mutable_right_hand()->::M3TorqueShmBaseCommand::MergeFrom(from.right_hand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3TorqueShmCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3TorqueShmCommand::CopyFrom(const M3TorqueShmCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3TorqueShmCommand::IsInitialized() const {
  
  return true;
}

void M3TorqueShmCommand::Swap(M3TorqueShmCommand* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(right_arm_, other->right_arm_);
    std::swap(left_arm_, other->left_arm_);
    std::swap(torso_, other->torso_);
    std::swap(head_, other->head_);
    std::swap(right_hand_, other->right_hand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3TorqueShmCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3TorqueShmCommand_descriptor_;
  metadata.reflection = M3TorqueShmCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3TorqueShmParam::kTestFieldNumber;
#endif  // !_MSC_VER

M3TorqueShmParam::M3TorqueShmParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void M3TorqueShmParam::InitAsDefaultInstance() {
}

M3TorqueShmParam::M3TorqueShmParam(const M3TorqueShmParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void M3TorqueShmParam::SharedCtor() {
  _cached_size_ = 0;
  test_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3TorqueShmParam::~M3TorqueShmParam() {
  SharedDtor();
}

void M3TorqueShmParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void M3TorqueShmParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* M3TorqueShmParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3TorqueShmParam_descriptor_;
}

const M3TorqueShmParam& M3TorqueShmParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_torque_5fshm_2eproto();  return *default_instance_;
}

M3TorqueShmParam* M3TorqueShmParam::default_instance_ = NULL;

M3TorqueShmParam* M3TorqueShmParam::New() const {
  return new M3TorqueShmParam;
}

void M3TorqueShmParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    test_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3TorqueShmParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &test_)));
          set_has_test();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3TorqueShmParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double test = 1;
  if (has_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->test(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3TorqueShmParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double test = 1;
  if (has_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->test(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3TorqueShmParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double test = 1;
    if (has_test()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void M3TorqueShmParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3TorqueShmParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3TorqueShmParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3TorqueShmParam::MergeFrom(const M3TorqueShmParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test()) {
      set_test(from.test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3TorqueShmParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3TorqueShmParam::CopyFrom(const M3TorqueShmParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3TorqueShmParam::IsInitialized() const {
  
  return true;
}

void M3TorqueShmParam::Swap(M3TorqueShmParam* other) {
  if (other != this) {
    std::swap(test_, other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3TorqueShmParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3TorqueShmParam_descriptor_;
  metadata.reflection = M3TorqueShmParam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
