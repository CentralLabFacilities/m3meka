// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: torque_shm.proto

#ifndef PROTOBUF_torque_5fshm_2eproto__INCLUDED
#define PROTOBUF_torque_5fshm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "component_base.pb.h"
#include "joint_array_mode.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_torque_5fshm_2eproto();
void protobuf_AssignDesc_torque_5fshm_2eproto();
void protobuf_ShutdownFile_torque_5fshm_2eproto();

class M3TorqueShmBaseStatus;
class M3TorqueShmBaseCommand;
class M3TorqueShmStatus;
class M3TorqueShmCommand;
class M3TorqueShmParam;

// ===================================================================

class M3TorqueShmBaseStatus : public ::google::protobuf::Message {
 public:
  M3TorqueShmBaseStatus();
  virtual ~M3TorqueShmBaseStatus();
  
  M3TorqueShmBaseStatus(const M3TorqueShmBaseStatus& from);
  
  inline M3TorqueShmBaseStatus& operator=(const M3TorqueShmBaseStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3TorqueShmBaseStatus& default_instance();
  
  void Swap(M3TorqueShmBaseStatus* other);
  
  // implements Message ----------------------------------------------
  
  M3TorqueShmBaseStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3TorqueShmBaseStatus& from);
  void MergeFrom(const M3TorqueShmBaseStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated double torque = 1;
  inline int torque_size() const;
  inline void clear_torque();
  static const int kTorqueFieldNumber = 1;
  inline double torque(int index) const;
  inline void set_torque(int index, double value);
  inline void add_torque(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      torque() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_torque();
  
  // repeated double theta = 2;
  inline int theta_size() const;
  inline void clear_theta();
  static const int kThetaFieldNumber = 2;
  inline double theta(int index) const;
  inline void set_theta(int index, double value);
  inline void add_theta(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      theta() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_theta();
  
  // repeated double thetadot = 3;
  inline int thetadot_size() const;
  inline void clear_thetadot();
  static const int kThetadotFieldNumber = 3;
  inline double thetadot(int index) const;
  inline void set_thetadot(int index, double value);
  inline void add_thetadot(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      thetadot() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_thetadot();
  
  // repeated .JOINT_ARRAY_MODE ctrl_mode = 4;
  inline int ctrl_mode_size() const;
  inline void clear_ctrl_mode();
  static const int kCtrlModeFieldNumber = 4;
  inline JOINT_ARRAY_MODE ctrl_mode(int index) const;
  inline void set_ctrl_mode(int index, JOINT_ARRAY_MODE value);
  inline void add_ctrl_mode(JOINT_ARRAY_MODE value);
  inline const ::google::protobuf::RepeatedField<int>& ctrl_mode() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_ctrl_mode();
  
  // repeated double loadx6 = 5;
  inline int loadx6_size() const;
  inline void clear_loadx6();
  static const int kLoadx6FieldNumber = 5;
  inline double loadx6(int index) const;
  inline void set_loadx6(int index, double value);
  inline void add_loadx6(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      loadx6() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_loadx6();
  
  // @@protoc_insertion_point(class_scope:M3TorqueShmBaseStatus)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< double > torque_;
  ::google::protobuf::RepeatedField< double > theta_;
  ::google::protobuf::RepeatedField< double > thetadot_;
  ::google::protobuf::RepeatedField<int> ctrl_mode_;
  ::google::protobuf::RepeatedField< double > loadx6_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_torque_5fshm_2eproto();
  friend void protobuf_AssignDesc_torque_5fshm_2eproto();
  friend void protobuf_ShutdownFile_torque_5fshm_2eproto();
  
  void InitAsDefaultInstance();
  static M3TorqueShmBaseStatus* default_instance_;
};
// -------------------------------------------------------------------

class M3TorqueShmBaseCommand : public ::google::protobuf::Message {
 public:
  M3TorqueShmBaseCommand();
  virtual ~M3TorqueShmBaseCommand();
  
  M3TorqueShmBaseCommand(const M3TorqueShmBaseCommand& from);
  
  inline M3TorqueShmBaseCommand& operator=(const M3TorqueShmBaseCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3TorqueShmBaseCommand& default_instance();
  
  void Swap(M3TorqueShmBaseCommand* other);
  
  // implements Message ----------------------------------------------
  
  M3TorqueShmBaseCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3TorqueShmBaseCommand& from);
  void MergeFrom(const M3TorqueShmBaseCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated double tq_desired = 1;
  inline int tq_desired_size() const;
  inline void clear_tq_desired();
  static const int kTqDesiredFieldNumber = 1;
  inline double tq_desired(int index) const;
  inline void set_tq_desired(int index, double value);
  inline void add_tq_desired(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      tq_desired() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_tq_desired();
  
  // repeated double q_desired = 2;
  inline int q_desired_size() const;
  inline void clear_q_desired();
  static const int kQDesiredFieldNumber = 2;
  inline double q_desired(int index) const;
  inline void set_q_desired(int index, double value);
  inline void add_q_desired(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      q_desired() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_q_desired();
  
  // repeated double slew_rate_q_desired = 3;
  inline int slew_rate_q_desired_size() const;
  inline void clear_slew_rate_q_desired();
  static const int kSlewRateQDesiredFieldNumber = 3;
  inline double slew_rate_q_desired(int index) const;
  inline void set_slew_rate_q_desired(int index, double value);
  inline void add_slew_rate_q_desired(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      slew_rate_q_desired() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_slew_rate_q_desired();
  
  // @@protoc_insertion_point(class_scope:M3TorqueShmBaseCommand)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< double > tq_desired_;
  ::google::protobuf::RepeatedField< double > q_desired_;
  ::google::protobuf::RepeatedField< double > slew_rate_q_desired_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_torque_5fshm_2eproto();
  friend void protobuf_AssignDesc_torque_5fshm_2eproto();
  friend void protobuf_ShutdownFile_torque_5fshm_2eproto();
  
  void InitAsDefaultInstance();
  static M3TorqueShmBaseCommand* default_instance_;
};
// -------------------------------------------------------------------

class M3TorqueShmStatus : public ::google::protobuf::Message {
 public:
  M3TorqueShmStatus();
  virtual ~M3TorqueShmStatus();
  
  M3TorqueShmStatus(const M3TorqueShmStatus& from);
  
  inline M3TorqueShmStatus& operator=(const M3TorqueShmStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3TorqueShmStatus& default_instance();
  
  void Swap(M3TorqueShmStatus* other);
  
  // implements Message ----------------------------------------------
  
  M3TorqueShmStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3TorqueShmStatus& from);
  void MergeFrom(const M3TorqueShmStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .M3BaseStatus base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::M3BaseStatus& base() const;
  inline ::M3BaseStatus* mutable_base();
  inline ::M3BaseStatus* release_base();
  
  // optional .M3TorqueShmBaseStatus right_arm = 2;
  inline bool has_right_arm() const;
  inline void clear_right_arm();
  static const int kRightArmFieldNumber = 2;
  inline const ::M3TorqueShmBaseStatus& right_arm() const;
  inline ::M3TorqueShmBaseStatus* mutable_right_arm();
  inline ::M3TorqueShmBaseStatus* release_right_arm();
  
  // optional .M3TorqueShmBaseStatus left_arm = 3;
  inline bool has_left_arm() const;
  inline void clear_left_arm();
  static const int kLeftArmFieldNumber = 3;
  inline const ::M3TorqueShmBaseStatus& left_arm() const;
  inline ::M3TorqueShmBaseStatus* mutable_left_arm();
  inline ::M3TorqueShmBaseStatus* release_left_arm();
  
  // optional .M3TorqueShmBaseStatus torso = 4;
  inline bool has_torso() const;
  inline void clear_torso();
  static const int kTorsoFieldNumber = 4;
  inline const ::M3TorqueShmBaseStatus& torso() const;
  inline ::M3TorqueShmBaseStatus* mutable_torso();
  inline ::M3TorqueShmBaseStatus* release_torso();
  
  // optional .M3TorqueShmBaseStatus head = 5;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 5;
  inline const ::M3TorqueShmBaseStatus& head() const;
  inline ::M3TorqueShmBaseStatus* mutable_head();
  inline ::M3TorqueShmBaseStatus* release_head();
  
  // optional .M3TorqueShmBaseStatus right_hand = 6;
  inline bool has_right_hand() const;
  inline void clear_right_hand();
  static const int kRightHandFieldNumber = 6;
  inline const ::M3TorqueShmBaseStatus& right_hand() const;
  inline ::M3TorqueShmBaseStatus* mutable_right_hand();
  inline ::M3TorqueShmBaseStatus* release_right_hand();
  
  // @@protoc_insertion_point(class_scope:M3TorqueShmStatus)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_right_arm();
  inline void clear_has_right_arm();
  inline void set_has_left_arm();
  inline void clear_has_left_arm();
  inline void set_has_torso();
  inline void clear_has_torso();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_right_hand();
  inline void clear_has_right_hand();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::M3BaseStatus* base_;
  ::M3TorqueShmBaseStatus* right_arm_;
  ::M3TorqueShmBaseStatus* left_arm_;
  ::M3TorqueShmBaseStatus* torso_;
  ::M3TorqueShmBaseStatus* head_;
  ::M3TorqueShmBaseStatus* right_hand_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_torque_5fshm_2eproto();
  friend void protobuf_AssignDesc_torque_5fshm_2eproto();
  friend void protobuf_ShutdownFile_torque_5fshm_2eproto();
  
  void InitAsDefaultInstance();
  static M3TorqueShmStatus* default_instance_;
};
// -------------------------------------------------------------------

class M3TorqueShmCommand : public ::google::protobuf::Message {
 public:
  M3TorqueShmCommand();
  virtual ~M3TorqueShmCommand();
  
  M3TorqueShmCommand(const M3TorqueShmCommand& from);
  
  inline M3TorqueShmCommand& operator=(const M3TorqueShmCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3TorqueShmCommand& default_instance();
  
  void Swap(M3TorqueShmCommand* other);
  
  // implements Message ----------------------------------------------
  
  M3TorqueShmCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3TorqueShmCommand& from);
  void MergeFrom(const M3TorqueShmCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);
  
  // optional .M3TorqueShmBaseCommand right_arm = 2;
  inline bool has_right_arm() const;
  inline void clear_right_arm();
  static const int kRightArmFieldNumber = 2;
  inline const ::M3TorqueShmBaseCommand& right_arm() const;
  inline ::M3TorqueShmBaseCommand* mutable_right_arm();
  inline ::M3TorqueShmBaseCommand* release_right_arm();
  
  // optional .M3TorqueShmBaseCommand left_arm = 3;
  inline bool has_left_arm() const;
  inline void clear_left_arm();
  static const int kLeftArmFieldNumber = 3;
  inline const ::M3TorqueShmBaseCommand& left_arm() const;
  inline ::M3TorqueShmBaseCommand* mutable_left_arm();
  inline ::M3TorqueShmBaseCommand* release_left_arm();
  
  // optional .M3TorqueShmBaseCommand torso = 4;
  inline bool has_torso() const;
  inline void clear_torso();
  static const int kTorsoFieldNumber = 4;
  inline const ::M3TorqueShmBaseCommand& torso() const;
  inline ::M3TorqueShmBaseCommand* mutable_torso();
  inline ::M3TorqueShmBaseCommand* release_torso();
  
  // optional .M3TorqueShmBaseCommand head = 5;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 5;
  inline const ::M3TorqueShmBaseCommand& head() const;
  inline ::M3TorqueShmBaseCommand* mutable_head();
  inline ::M3TorqueShmBaseCommand* release_head();
  
  // optional .M3TorqueShmBaseCommand right_hand = 6;
  inline bool has_right_hand() const;
  inline void clear_right_hand();
  static const int kRightHandFieldNumber = 6;
  inline const ::M3TorqueShmBaseCommand& right_hand() const;
  inline ::M3TorqueShmBaseCommand* mutable_right_hand();
  inline ::M3TorqueShmBaseCommand* release_right_hand();
  
  // @@protoc_insertion_point(class_scope:M3TorqueShmCommand)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_right_arm();
  inline void clear_has_right_arm();
  inline void set_has_left_arm();
  inline void clear_has_left_arm();
  inline void set_has_torso();
  inline void clear_has_torso();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_right_hand();
  inline void clear_has_right_hand();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 timestamp_;
  ::M3TorqueShmBaseCommand* right_arm_;
  ::M3TorqueShmBaseCommand* left_arm_;
  ::M3TorqueShmBaseCommand* torso_;
  ::M3TorqueShmBaseCommand* head_;
  ::M3TorqueShmBaseCommand* right_hand_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_torque_5fshm_2eproto();
  friend void protobuf_AssignDesc_torque_5fshm_2eproto();
  friend void protobuf_ShutdownFile_torque_5fshm_2eproto();
  
  void InitAsDefaultInstance();
  static M3TorqueShmCommand* default_instance_;
};
// -------------------------------------------------------------------

class M3TorqueShmParam : public ::google::protobuf::Message {
 public:
  M3TorqueShmParam();
  virtual ~M3TorqueShmParam();
  
  M3TorqueShmParam(const M3TorqueShmParam& from);
  
  inline M3TorqueShmParam& operator=(const M3TorqueShmParam& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3TorqueShmParam& default_instance();
  
  void Swap(M3TorqueShmParam* other);
  
  // implements Message ----------------------------------------------
  
  M3TorqueShmParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3TorqueShmParam& from);
  void MergeFrom(const M3TorqueShmParam& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional double test = 1;
  inline bool has_test() const;
  inline void clear_test();
  static const int kTestFieldNumber = 1;
  inline double test() const;
  inline void set_test(double value);
  
  // @@protoc_insertion_point(class_scope:M3TorqueShmParam)
 private:
  inline void set_has_test();
  inline void clear_has_test();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double test_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_torque_5fshm_2eproto();
  friend void protobuf_AssignDesc_torque_5fshm_2eproto();
  friend void protobuf_ShutdownFile_torque_5fshm_2eproto();
  
  void InitAsDefaultInstance();
  static M3TorqueShmParam* default_instance_;
};
// ===================================================================


// ===================================================================

// M3TorqueShmBaseStatus

// repeated double torque = 1;
inline int M3TorqueShmBaseStatus::torque_size() const {
  return torque_.size();
}
inline void M3TorqueShmBaseStatus::clear_torque() {
  torque_.Clear();
}
inline double M3TorqueShmBaseStatus::torque(int index) const {
  return torque_.Get(index);
}
inline void M3TorqueShmBaseStatus::set_torque(int index, double value) {
  torque_.Set(index, value);
}
inline void M3TorqueShmBaseStatus::add_torque(double value) {
  torque_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
M3TorqueShmBaseStatus::torque() const {
  return torque_;
}
inline ::google::protobuf::RepeatedField< double >*
M3TorqueShmBaseStatus::mutable_torque() {
  return &torque_;
}

// repeated double theta = 2;
inline int M3TorqueShmBaseStatus::theta_size() const {
  return theta_.size();
}
inline void M3TorqueShmBaseStatus::clear_theta() {
  theta_.Clear();
}
inline double M3TorqueShmBaseStatus::theta(int index) const {
  return theta_.Get(index);
}
inline void M3TorqueShmBaseStatus::set_theta(int index, double value) {
  theta_.Set(index, value);
}
inline void M3TorqueShmBaseStatus::add_theta(double value) {
  theta_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
M3TorqueShmBaseStatus::theta() const {
  return theta_;
}
inline ::google::protobuf::RepeatedField< double >*
M3TorqueShmBaseStatus::mutable_theta() {
  return &theta_;
}

// repeated double thetadot = 3;
inline int M3TorqueShmBaseStatus::thetadot_size() const {
  return thetadot_.size();
}
inline void M3TorqueShmBaseStatus::clear_thetadot() {
  thetadot_.Clear();
}
inline double M3TorqueShmBaseStatus::thetadot(int index) const {
  return thetadot_.Get(index);
}
inline void M3TorqueShmBaseStatus::set_thetadot(int index, double value) {
  thetadot_.Set(index, value);
}
inline void M3TorqueShmBaseStatus::add_thetadot(double value) {
  thetadot_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
M3TorqueShmBaseStatus::thetadot() const {
  return thetadot_;
}
inline ::google::protobuf::RepeatedField< double >*
M3TorqueShmBaseStatus::mutable_thetadot() {
  return &thetadot_;
}

// repeated .JOINT_ARRAY_MODE ctrl_mode = 4;
inline int M3TorqueShmBaseStatus::ctrl_mode_size() const {
  return ctrl_mode_.size();
}
inline void M3TorqueShmBaseStatus::clear_ctrl_mode() {
  ctrl_mode_.Clear();
}
inline JOINT_ARRAY_MODE M3TorqueShmBaseStatus::ctrl_mode(int index) const {
  return static_cast< JOINT_ARRAY_MODE >(ctrl_mode_.Get(index));
}
inline void M3TorqueShmBaseStatus::set_ctrl_mode(int index, JOINT_ARRAY_MODE value) {
  GOOGLE_DCHECK(JOINT_ARRAY_MODE_IsValid(value));
  ctrl_mode_.Set(index, value);
}
inline void M3TorqueShmBaseStatus::add_ctrl_mode(JOINT_ARRAY_MODE value) {
  GOOGLE_DCHECK(JOINT_ARRAY_MODE_IsValid(value));
  ctrl_mode_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
M3TorqueShmBaseStatus::ctrl_mode() const {
  return ctrl_mode_;
}
inline ::google::protobuf::RepeatedField<int>*
M3TorqueShmBaseStatus::mutable_ctrl_mode() {
  return &ctrl_mode_;
}

// repeated double loadx6 = 5;
inline int M3TorqueShmBaseStatus::loadx6_size() const {
  return loadx6_.size();
}
inline void M3TorqueShmBaseStatus::clear_loadx6() {
  loadx6_.Clear();
}
inline double M3TorqueShmBaseStatus::loadx6(int index) const {
  return loadx6_.Get(index);
}
inline void M3TorqueShmBaseStatus::set_loadx6(int index, double value) {
  loadx6_.Set(index, value);
}
inline void M3TorqueShmBaseStatus::add_loadx6(double value) {
  loadx6_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
M3TorqueShmBaseStatus::loadx6() const {
  return loadx6_;
}
inline ::google::protobuf::RepeatedField< double >*
M3TorqueShmBaseStatus::mutable_loadx6() {
  return &loadx6_;
}

// -------------------------------------------------------------------

// M3TorqueShmBaseCommand

// repeated double tq_desired = 1;
inline int M3TorqueShmBaseCommand::tq_desired_size() const {
  return tq_desired_.size();
}
inline void M3TorqueShmBaseCommand::clear_tq_desired() {
  tq_desired_.Clear();
}
inline double M3TorqueShmBaseCommand::tq_desired(int index) const {
  return tq_desired_.Get(index);
}
inline void M3TorqueShmBaseCommand::set_tq_desired(int index, double value) {
  tq_desired_.Set(index, value);
}
inline void M3TorqueShmBaseCommand::add_tq_desired(double value) {
  tq_desired_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
M3TorqueShmBaseCommand::tq_desired() const {
  return tq_desired_;
}
inline ::google::protobuf::RepeatedField< double >*
M3TorqueShmBaseCommand::mutable_tq_desired() {
  return &tq_desired_;
}

// repeated double q_desired = 2;
inline int M3TorqueShmBaseCommand::q_desired_size() const {
  return q_desired_.size();
}
inline void M3TorqueShmBaseCommand::clear_q_desired() {
  q_desired_.Clear();
}
inline double M3TorqueShmBaseCommand::q_desired(int index) const {
  return q_desired_.Get(index);
}
inline void M3TorqueShmBaseCommand::set_q_desired(int index, double value) {
  q_desired_.Set(index, value);
}
inline void M3TorqueShmBaseCommand::add_q_desired(double value) {
  q_desired_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
M3TorqueShmBaseCommand::q_desired() const {
  return q_desired_;
}
inline ::google::protobuf::RepeatedField< double >*
M3TorqueShmBaseCommand::mutable_q_desired() {
  return &q_desired_;
}

// repeated double slew_rate_q_desired = 3;
inline int M3TorqueShmBaseCommand::slew_rate_q_desired_size() const {
  return slew_rate_q_desired_.size();
}
inline void M3TorqueShmBaseCommand::clear_slew_rate_q_desired() {
  slew_rate_q_desired_.Clear();
}
inline double M3TorqueShmBaseCommand::slew_rate_q_desired(int index) const {
  return slew_rate_q_desired_.Get(index);
}
inline void M3TorqueShmBaseCommand::set_slew_rate_q_desired(int index, double value) {
  slew_rate_q_desired_.Set(index, value);
}
inline void M3TorqueShmBaseCommand::add_slew_rate_q_desired(double value) {
  slew_rate_q_desired_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
M3TorqueShmBaseCommand::slew_rate_q_desired() const {
  return slew_rate_q_desired_;
}
inline ::google::protobuf::RepeatedField< double >*
M3TorqueShmBaseCommand::mutable_slew_rate_q_desired() {
  return &slew_rate_q_desired_;
}

// -------------------------------------------------------------------

// M3TorqueShmStatus

// optional .M3BaseStatus base = 1;
inline bool M3TorqueShmStatus::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3TorqueShmStatus::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3TorqueShmStatus::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3TorqueShmStatus::clear_base() {
  if (base_ != NULL) base_->::M3BaseStatus::Clear();
  clear_has_base();
}
inline const ::M3BaseStatus& M3TorqueShmStatus::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::M3BaseStatus* M3TorqueShmStatus::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::M3BaseStatus;
  return base_;
}
inline ::M3BaseStatus* M3TorqueShmStatus::release_base() {
  clear_has_base();
  ::M3BaseStatus* temp = base_;
  base_ = NULL;
  return temp;
}

// optional .M3TorqueShmBaseStatus right_arm = 2;
inline bool M3TorqueShmStatus::has_right_arm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void M3TorqueShmStatus::set_has_right_arm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void M3TorqueShmStatus::clear_has_right_arm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void M3TorqueShmStatus::clear_right_arm() {
  if (right_arm_ != NULL) right_arm_->::M3TorqueShmBaseStatus::Clear();
  clear_has_right_arm();
}
inline const ::M3TorqueShmBaseStatus& M3TorqueShmStatus::right_arm() const {
  return right_arm_ != NULL ? *right_arm_ : *default_instance_->right_arm_;
}
inline ::M3TorqueShmBaseStatus* M3TorqueShmStatus::mutable_right_arm() {
  set_has_right_arm();
  if (right_arm_ == NULL) right_arm_ = new ::M3TorqueShmBaseStatus;
  return right_arm_;
}
inline ::M3TorqueShmBaseStatus* M3TorqueShmStatus::release_right_arm() {
  clear_has_right_arm();
  ::M3TorqueShmBaseStatus* temp = right_arm_;
  right_arm_ = NULL;
  return temp;
}

// optional .M3TorqueShmBaseStatus left_arm = 3;
inline bool M3TorqueShmStatus::has_left_arm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void M3TorqueShmStatus::set_has_left_arm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void M3TorqueShmStatus::clear_has_left_arm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void M3TorqueShmStatus::clear_left_arm() {
  if (left_arm_ != NULL) left_arm_->::M3TorqueShmBaseStatus::Clear();
  clear_has_left_arm();
}
inline const ::M3TorqueShmBaseStatus& M3TorqueShmStatus::left_arm() const {
  return left_arm_ != NULL ? *left_arm_ : *default_instance_->left_arm_;
}
inline ::M3TorqueShmBaseStatus* M3TorqueShmStatus::mutable_left_arm() {
  set_has_left_arm();
  if (left_arm_ == NULL) left_arm_ = new ::M3TorqueShmBaseStatus;
  return left_arm_;
}
inline ::M3TorqueShmBaseStatus* M3TorqueShmStatus::release_left_arm() {
  clear_has_left_arm();
  ::M3TorqueShmBaseStatus* temp = left_arm_;
  left_arm_ = NULL;
  return temp;
}

// optional .M3TorqueShmBaseStatus torso = 4;
inline bool M3TorqueShmStatus::has_torso() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void M3TorqueShmStatus::set_has_torso() {
  _has_bits_[0] |= 0x00000008u;
}
inline void M3TorqueShmStatus::clear_has_torso() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void M3TorqueShmStatus::clear_torso() {
  if (torso_ != NULL) torso_->::M3TorqueShmBaseStatus::Clear();
  clear_has_torso();
}
inline const ::M3TorqueShmBaseStatus& M3TorqueShmStatus::torso() const {
  return torso_ != NULL ? *torso_ : *default_instance_->torso_;
}
inline ::M3TorqueShmBaseStatus* M3TorqueShmStatus::mutable_torso() {
  set_has_torso();
  if (torso_ == NULL) torso_ = new ::M3TorqueShmBaseStatus;
  return torso_;
}
inline ::M3TorqueShmBaseStatus* M3TorqueShmStatus::release_torso() {
  clear_has_torso();
  ::M3TorqueShmBaseStatus* temp = torso_;
  torso_ = NULL;
  return temp;
}

// optional .M3TorqueShmBaseStatus head = 5;
inline bool M3TorqueShmStatus::has_head() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void M3TorqueShmStatus::set_has_head() {
  _has_bits_[0] |= 0x00000010u;
}
inline void M3TorqueShmStatus::clear_has_head() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void M3TorqueShmStatus::clear_head() {
  if (head_ != NULL) head_->::M3TorqueShmBaseStatus::Clear();
  clear_has_head();
}
inline const ::M3TorqueShmBaseStatus& M3TorqueShmStatus::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::M3TorqueShmBaseStatus* M3TorqueShmStatus::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::M3TorqueShmBaseStatus;
  return head_;
}
inline ::M3TorqueShmBaseStatus* M3TorqueShmStatus::release_head() {
  clear_has_head();
  ::M3TorqueShmBaseStatus* temp = head_;
  head_ = NULL;
  return temp;
}

// optional .M3TorqueShmBaseStatus right_hand = 6;
inline bool M3TorqueShmStatus::has_right_hand() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void M3TorqueShmStatus::set_has_right_hand() {
  _has_bits_[0] |= 0x00000020u;
}
inline void M3TorqueShmStatus::clear_has_right_hand() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void M3TorqueShmStatus::clear_right_hand() {
  if (right_hand_ != NULL) right_hand_->::M3TorqueShmBaseStatus::Clear();
  clear_has_right_hand();
}
inline const ::M3TorqueShmBaseStatus& M3TorqueShmStatus::right_hand() const {
  return right_hand_ != NULL ? *right_hand_ : *default_instance_->right_hand_;
}
inline ::M3TorqueShmBaseStatus* M3TorqueShmStatus::mutable_right_hand() {
  set_has_right_hand();
  if (right_hand_ == NULL) right_hand_ = new ::M3TorqueShmBaseStatus;
  return right_hand_;
}
inline ::M3TorqueShmBaseStatus* M3TorqueShmStatus::release_right_hand() {
  clear_has_right_hand();
  ::M3TorqueShmBaseStatus* temp = right_hand_;
  right_hand_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// M3TorqueShmCommand

// optional int64 timestamp = 1;
inline bool M3TorqueShmCommand::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3TorqueShmCommand::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3TorqueShmCommand::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3TorqueShmCommand::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 M3TorqueShmCommand::timestamp() const {
  return timestamp_;
}
inline void M3TorqueShmCommand::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional .M3TorqueShmBaseCommand right_arm = 2;
inline bool M3TorqueShmCommand::has_right_arm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void M3TorqueShmCommand::set_has_right_arm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void M3TorqueShmCommand::clear_has_right_arm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void M3TorqueShmCommand::clear_right_arm() {
  if (right_arm_ != NULL) right_arm_->::M3TorqueShmBaseCommand::Clear();
  clear_has_right_arm();
}
inline const ::M3TorqueShmBaseCommand& M3TorqueShmCommand::right_arm() const {
  return right_arm_ != NULL ? *right_arm_ : *default_instance_->right_arm_;
}
inline ::M3TorqueShmBaseCommand* M3TorqueShmCommand::mutable_right_arm() {
  set_has_right_arm();
  if (right_arm_ == NULL) right_arm_ = new ::M3TorqueShmBaseCommand;
  return right_arm_;
}
inline ::M3TorqueShmBaseCommand* M3TorqueShmCommand::release_right_arm() {
  clear_has_right_arm();
  ::M3TorqueShmBaseCommand* temp = right_arm_;
  right_arm_ = NULL;
  return temp;
}

// optional .M3TorqueShmBaseCommand left_arm = 3;
inline bool M3TorqueShmCommand::has_left_arm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void M3TorqueShmCommand::set_has_left_arm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void M3TorqueShmCommand::clear_has_left_arm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void M3TorqueShmCommand::clear_left_arm() {
  if (left_arm_ != NULL) left_arm_->::M3TorqueShmBaseCommand::Clear();
  clear_has_left_arm();
}
inline const ::M3TorqueShmBaseCommand& M3TorqueShmCommand::left_arm() const {
  return left_arm_ != NULL ? *left_arm_ : *default_instance_->left_arm_;
}
inline ::M3TorqueShmBaseCommand* M3TorqueShmCommand::mutable_left_arm() {
  set_has_left_arm();
  if (left_arm_ == NULL) left_arm_ = new ::M3TorqueShmBaseCommand;
  return left_arm_;
}
inline ::M3TorqueShmBaseCommand* M3TorqueShmCommand::release_left_arm() {
  clear_has_left_arm();
  ::M3TorqueShmBaseCommand* temp = left_arm_;
  left_arm_ = NULL;
  return temp;
}

// optional .M3TorqueShmBaseCommand torso = 4;
inline bool M3TorqueShmCommand::has_torso() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void M3TorqueShmCommand::set_has_torso() {
  _has_bits_[0] |= 0x00000008u;
}
inline void M3TorqueShmCommand::clear_has_torso() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void M3TorqueShmCommand::clear_torso() {
  if (torso_ != NULL) torso_->::M3TorqueShmBaseCommand::Clear();
  clear_has_torso();
}
inline const ::M3TorqueShmBaseCommand& M3TorqueShmCommand::torso() const {
  return torso_ != NULL ? *torso_ : *default_instance_->torso_;
}
inline ::M3TorqueShmBaseCommand* M3TorqueShmCommand::mutable_torso() {
  set_has_torso();
  if (torso_ == NULL) torso_ = new ::M3TorqueShmBaseCommand;
  return torso_;
}
inline ::M3TorqueShmBaseCommand* M3TorqueShmCommand::release_torso() {
  clear_has_torso();
  ::M3TorqueShmBaseCommand* temp = torso_;
  torso_ = NULL;
  return temp;
}

// optional .M3TorqueShmBaseCommand head = 5;
inline bool M3TorqueShmCommand::has_head() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void M3TorqueShmCommand::set_has_head() {
  _has_bits_[0] |= 0x00000010u;
}
inline void M3TorqueShmCommand::clear_has_head() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void M3TorqueShmCommand::clear_head() {
  if (head_ != NULL) head_->::M3TorqueShmBaseCommand::Clear();
  clear_has_head();
}
inline const ::M3TorqueShmBaseCommand& M3TorqueShmCommand::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::M3TorqueShmBaseCommand* M3TorqueShmCommand::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::M3TorqueShmBaseCommand;
  return head_;
}
inline ::M3TorqueShmBaseCommand* M3TorqueShmCommand::release_head() {
  clear_has_head();
  ::M3TorqueShmBaseCommand* temp = head_;
  head_ = NULL;
  return temp;
}

// optional .M3TorqueShmBaseCommand right_hand = 6;
inline bool M3TorqueShmCommand::has_right_hand() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void M3TorqueShmCommand::set_has_right_hand() {
  _has_bits_[0] |= 0x00000020u;
}
inline void M3TorqueShmCommand::clear_has_right_hand() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void M3TorqueShmCommand::clear_right_hand() {
  if (right_hand_ != NULL) right_hand_->::M3TorqueShmBaseCommand::Clear();
  clear_has_right_hand();
}
inline const ::M3TorqueShmBaseCommand& M3TorqueShmCommand::right_hand() const {
  return right_hand_ != NULL ? *right_hand_ : *default_instance_->right_hand_;
}
inline ::M3TorqueShmBaseCommand* M3TorqueShmCommand::mutable_right_hand() {
  set_has_right_hand();
  if (right_hand_ == NULL) right_hand_ = new ::M3TorqueShmBaseCommand;
  return right_hand_;
}
inline ::M3TorqueShmBaseCommand* M3TorqueShmCommand::release_right_hand() {
  clear_has_right_hand();
  ::M3TorqueShmBaseCommand* temp = right_hand_;
  right_hand_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// M3TorqueShmParam

// optional double test = 1;
inline bool M3TorqueShmParam::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void M3TorqueShmParam::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
inline void M3TorqueShmParam::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void M3TorqueShmParam::clear_test() {
  test_ = 0;
  clear_has_test();
}
inline double M3TorqueShmParam::test() const {
  return test_;
}
inline void M3TorqueShmParam::set_test(double value) {
  set_has_test();
  test_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_torque_5fshm_2eproto__INCLUDED
