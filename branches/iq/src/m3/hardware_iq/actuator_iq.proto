// M3 -- Meka Robotics Robot Components
// Copyright (c) 2010 Meka Robotics
// Author: edsinger@mekabot.com (Aaron Edsinger)
// 
// M3 is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// M3 -- Meka Robotics Robot Components
// Copyright (c) 2010 Meka Robotics
// Author: edsinger@mekabot.com (Aaron Edsinger)
// 
// M3 is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// M3 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with M3.  If not, see <http://www.gnu.org/licenses/>.


option optimize_for = SPEED;

import "component_base.proto";
import "actuator_iq_ec.proto";


////////////////////////////////////////////////////////////////////////////////

enum ACTUATOR_IQ_MODE{
		ACTUATOR_IQ_MODE_OFF = 0;				//Actuator off
		ACTUATOR_IQ_MODE_PWM = 1;				//Direct PWM control
		ACTUATOR_IQ_MODE_CURRENT = 2;				//Direct PWM control
		ACTUATOR_IQ_MODE_TORQUE = 3;			//Direct Torque control
}

enum ACTUATOR_IQ_TRAJ_MODE
{	
	ACTUATOR_IQ_TRAJ_OFF		= 0;
	ACTUATOR_IQ_TRAJ_CURRENT_SQUARE	= 1;
	ACTUATOR_IQ_TRAJ_CURRENT_SINE	= 2;
	ACTUATOR_IQ_TRAJ_TORQUE_SQUARE	= 3;
	ACTUATOR_IQ_TRAJ_TORQUE_SINE	= 4;
}

// mirror of commanded values
message M3ActuatorIQStatusCommand{
	optional double		current	= 1;	// (mA) commanded to the amp
	optional double		pwm	= 2;	// (ticks) commanded to the amp
	optional double		torque	= 3;	// (mNm)
}

// motor related status
message M3ActuatorIQStatusMotor{
	optional double		current		= 1;	// (mA)
	optional double		torque		= 2;	// (mNm) based on motor current measurement
	optional double		theta		= 3;	// (Rad) motor encoder or observer
	optional double		thetadot	= 4;	// (Rad/s) motor encoder or observer
}

message M3ActuatorIQStatusJoint{
	optional double		theta			= 1;	// (Rad) joint encoder
	optional double		thetadot		= 2;	// (Rad/s) joint encoderr
	optional double 	torque			= 3;	// (mNm) SEA/strain gauge
	optional double 	torquedot		= 4;	// (mNm) SEA/strain gauge
}

message M3ActuatorIQStatusTemp{
	optional double		winding		= 1;	// (c)
	optional double		ambient		= 2;	// (c)
	optional double		housing		= 3;	// (c)
	optional double		amp 		= 4;	// (c)
}

// aggregate status
message M3ActuatorIQStatus{
	optional M3BaseStatus			base		= 1;		// Reserved
	optional M3ActuatorIQEcStatus		raw		= 2;		// Raw sensor values (ticks)
	optional M3ActuatorIQStatusCommand	command		= 3;		// Current values commanded 
	optional M3ActuatorIQStatusMotor	motor		= 4;		// Motor frame sensor
	optional M3ActuatorIQStatusJoint	joint		= 5; 		// Joint frame sensors
	optional M3ActuatorIQStatusTemp		temp		= 6;
}

////////////////////////////////////////////////////////////////////////////////
//								params
message M3ActuatorIQParamPID{
	optional double		k_p		= 1;	//P gain
	optional double		k_i		= 2;	//I gain
	optional double		k_d		= 3;	//D gain
	optional double		k_i_limit	= 4;	//Integral limit
	optional double		k_i_range	= 5;	//Integral range to accumulate error over
	optional double		k_slew_max	= 6;	//Slew rate of desired (per second)
	optional double		k_des_max	= 7;	//Soft limit of desired
	optional double		k_des_min	= 8;	//Soft limit of desired
}

message M3ActuatorIQParamTrajectory
{
	optional double		freq	= 1;
	optional double		amp	= 2;
	optional double		zero	= 3;
}

message M3ActuatorIQParamLimits{
	optional double		max_amp_temp = 1;				//Safety thresh (C)
	optional double		max_tq = 2;					//Safety thresh (mNm)
	optional double		min_tq = 3;					//Safety thresh (mNm)
	optional double		max_amp_current=4;				//Safety thresh (mA)
	optional double 	max_overload_time=5;				//Allowed overload condition (S)
}

message M3ActuatorIQParam
{
	optional M3ActuatorIQParamTrajectory	traj_current	= 1;	//Trajectory settings
	optional M3ActuatorIQParamTrajectory	traj_torque	= 2;
	optional M3ActuatorIQParamPID		pid_torque	= 3;
}

message M3ActuatorIQParamCalibration{
	optional double		zero_motor_theta		= 1;
	optional double		zero_motor_current_q		= 2;
	optional double		zero_joint_theta		= 3;
	optional double		zero_joint_torque		= 4;
	optional double		zero_joint_torque_lc	= 5;
	optional double		current_d				= 6;
	optional double		strain1_scale			= 7;
	optional double		strain2_scale			= 8;
	optional double		zero_motor_current_d		= 9;
}

message M3ActuatorIQParamSoftLimits{
	optional double		motor_theta_max		= 1;
	optional double		motor_theta_min		= 2;
	optional double		current				= 3;
	optional double		max_overload_time	= 4;
}

// aggregate params
message M3ActuatorIQParam{
	optional M3ActuatorIQParamCalibration	calibration	= 1;	// Zero sensor values
	optional M3ActuatorIQParamSoftLimits	softlimits	= 2;
}

////////////////////////////////////////////////////////////////////////////////
//								cmd

// aggregate cmd
message M3ActuatorIQCommand{
	optional double			current_q	= 1;	//Desired motor current (A)
	optional ACT_MODE		mode		= 2;	//Desired control mode
}

message M3ActuatorIQParam{
	optional double		max_amp_temp = 1;				//Safety thresh (C)
	optional double		max_tq = 2;					//Safety thresh (mNm)
	optional double		min_tq = 3;					//Safety thresh (mNm)
	optional double		max_amp_current=4;				//Safety thresh (mA)
	optional double 	max_overload_time=5;				//Allowed overload condition (S)
}
 
message M3ActuatorIQCommand{
	optional double			current = 1;     		//Desired torque (mNm)
	optional double			torque = 2;     		//Desired torque (mNm)
	optional double			pwm = 3;    			//Desired pwm (ticks)
	optional ACTUATOR_IQ_MODE	ctrl_mode = 4;			//Desired control mode
	optional ACTUATOR_IQ_MODE	traj_mode = 5;			//Desired control mode
	optional bool			brake_off=6;			//Disable brake if present
}
