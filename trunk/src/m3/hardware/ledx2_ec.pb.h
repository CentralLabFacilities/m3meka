// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_ledx2_5fec_2eproto__INCLUDED
#define PROTOBUF_ledx2_5fec_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "component_base.pb.h"

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ledx2_5fec_2eproto();
void protobuf_AssignDesc_ledx2_5fec_2eproto();
void protobuf_ShutdownFile_ledx2_5fec_2eproto();

class M3LedX2EcStatus;
class M3LedX2EcRGB;
class M3LedX2EcBranch;
class M3LedX2EcCommand;
class M3LedX2EcParam;

// ===================================================================

class M3LedX2EcStatus : public ::google::protobuf::Message {
 public:
  M3LedX2EcStatus();
  virtual ~M3LedX2EcStatus();
  
  M3LedX2EcStatus(const M3LedX2EcStatus& from);
  
  inline M3LedX2EcStatus& operator=(const M3LedX2EcStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3LedX2EcStatus& default_instance();
  void Swap(M3LedX2EcStatus* other);
  
  // implements Message ----------------------------------------------
  
  M3LedX2EcStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3LedX2EcStatus& from);
  void MergeFrom(const M3LedX2EcStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .M3BaseStatus base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::M3BaseStatus& base() const;
  inline ::M3BaseStatus* mutable_base();
  
  // optional .M3EtherCATStatus ethercat = 2;
  inline bool has_ethercat() const;
  inline void clear_ethercat();
  static const int kEthercatFieldNumber = 2;
  inline const ::M3EtherCATStatus& ethercat() const;
  inline ::M3EtherCATStatus* mutable_ethercat();
  
  // optional int32 timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);
  
  // optional int32 adc_ext_a = 4;
  inline bool has_adc_ext_a() const;
  inline void clear_adc_ext_a();
  static const int kAdcExtAFieldNumber = 4;
  inline ::google::protobuf::int32 adc_ext_a() const;
  inline void set_adc_ext_a(::google::protobuf::int32 value);
  
  // optional int32 adc_ext_b = 5;
  inline bool has_adc_ext_b() const;
  inline void clear_adc_ext_b();
  static const int kAdcExtBFieldNumber = 5;
  inline ::google::protobuf::int32 adc_ext_b() const;
  inline void set_adc_ext_b(::google::protobuf::int32 value);
  
  // optional int32 adc_ext_c = 6;
  inline bool has_adc_ext_c() const;
  inline void clear_adc_ext_c();
  static const int kAdcExtCFieldNumber = 6;
  inline ::google::protobuf::int32 adc_ext_c() const;
  inline void set_adc_ext_c(::google::protobuf::int32 value);
  
  // optional int32 adc_ext_d = 7;
  inline bool has_adc_ext_d() const;
  inline void clear_adc_ext_d();
  static const int kAdcExtDFieldNumber = 7;
  inline ::google::protobuf::int32 adc_ext_d() const;
  inline void set_adc_ext_d(::google::protobuf::int32 value);
  
  // optional int32 flags = 8;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 8;
  inline ::google::protobuf::int32 flags() const;
  inline void set_flags(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::M3BaseStatus* base_;
  ::M3EtherCATStatus* ethercat_;
  ::google::protobuf::int32 timestamp_;
  ::google::protobuf::int32 adc_ext_a_;
  ::google::protobuf::int32 adc_ext_b_;
  ::google::protobuf::int32 adc_ext_c_;
  ::google::protobuf::int32 adc_ext_d_;
  ::google::protobuf::int32 flags_;
  friend void  protobuf_AddDesc_ledx2_5fec_2eproto();
  friend void protobuf_AssignDesc_ledx2_5fec_2eproto();
  friend void protobuf_ShutdownFile_ledx2_5fec_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3LedX2EcStatus* default_instance_;
};
// -------------------------------------------------------------------

class M3LedX2EcRGB : public ::google::protobuf::Message {
 public:
  M3LedX2EcRGB();
  virtual ~M3LedX2EcRGB();
  
  M3LedX2EcRGB(const M3LedX2EcRGB& from);
  
  inline M3LedX2EcRGB& operator=(const M3LedX2EcRGB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3LedX2EcRGB& default_instance();
  void Swap(M3LedX2EcRGB* other);
  
  // implements Message ----------------------------------------------
  
  M3LedX2EcRGB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3LedX2EcRGB& from);
  void MergeFrom(const M3LedX2EcRGB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 r = 1;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 1;
  inline ::google::protobuf::int32 r() const;
  inline void set_r(::google::protobuf::int32 value);
  
  // optional int32 g = 2;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 2;
  inline ::google::protobuf::int32 g() const;
  inline void set_g(::google::protobuf::int32 value);
  
  // optional int32 b = 3;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline ::google::protobuf::int32 b() const;
  inline void set_b(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 r_;
  ::google::protobuf::int32 g_;
  ::google::protobuf::int32 b_;
  friend void  protobuf_AddDesc_ledx2_5fec_2eproto();
  friend void protobuf_AssignDesc_ledx2_5fec_2eproto();
  friend void protobuf_ShutdownFile_ledx2_5fec_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3LedX2EcRGB* default_instance_;
};
// -------------------------------------------------------------------

class M3LedX2EcBranch : public ::google::protobuf::Message {
 public:
  M3LedX2EcBranch();
  virtual ~M3LedX2EcBranch();
  
  M3LedX2EcBranch(const M3LedX2EcBranch& from);
  
  inline M3LedX2EcBranch& operator=(const M3LedX2EcBranch& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3LedX2EcBranch& default_instance();
  void Swap(M3LedX2EcBranch* other);
  
  // implements Message ----------------------------------------------
  
  M3LedX2EcBranch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3LedX2EcBranch& from);
  void MergeFrom(const M3LedX2EcBranch& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .M3LedX2EcRGB board_a = 1;
  inline bool has_board_a() const;
  inline void clear_board_a();
  static const int kBoardAFieldNumber = 1;
  inline const ::M3LedX2EcRGB& board_a() const;
  inline ::M3LedX2EcRGB* mutable_board_a();
  
  // optional .M3LedX2EcRGB board_b = 2;
  inline bool has_board_b() const;
  inline void clear_board_b();
  static const int kBoardBFieldNumber = 2;
  inline const ::M3LedX2EcRGB& board_b() const;
  inline ::M3LedX2EcRGB* mutable_board_b();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::M3LedX2EcRGB* board_a_;
  ::M3LedX2EcRGB* board_b_;
  friend void  protobuf_AddDesc_ledx2_5fec_2eproto();
  friend void protobuf_AssignDesc_ledx2_5fec_2eproto();
  friend void protobuf_ShutdownFile_ledx2_5fec_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3LedX2EcBranch* default_instance_;
};
// -------------------------------------------------------------------

class M3LedX2EcCommand : public ::google::protobuf::Message {
 public:
  M3LedX2EcCommand();
  virtual ~M3LedX2EcCommand();
  
  M3LedX2EcCommand(const M3LedX2EcCommand& from);
  
  inline M3LedX2EcCommand& operator=(const M3LedX2EcCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3LedX2EcCommand& default_instance();
  void Swap(M3LedX2EcCommand* other);
  
  // implements Message ----------------------------------------------
  
  M3LedX2EcCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3LedX2EcCommand& from);
  void MergeFrom(const M3LedX2EcCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 enable_a = 1;
  inline bool has_enable_a() const;
  inline void clear_enable_a();
  static const int kEnableAFieldNumber = 1;
  inline ::google::protobuf::int32 enable_a() const;
  inline void set_enable_a(::google::protobuf::int32 value);
  
  // optional int32 enable_b = 2;
  inline bool has_enable_b() const;
  inline void clear_enable_b();
  static const int kEnableBFieldNumber = 2;
  inline ::google::protobuf::int32 enable_b() const;
  inline void set_enable_b(::google::protobuf::int32 value);
  
  // optional .M3LedX2EcBranch branch_a = 3;
  inline bool has_branch_a() const;
  inline void clear_branch_a();
  static const int kBranchAFieldNumber = 3;
  inline const ::M3LedX2EcBranch& branch_a() const;
  inline ::M3LedX2EcBranch* mutable_branch_a();
  
  // optional .M3LedX2EcBranch branch_b = 4;
  inline bool has_branch_b() const;
  inline void clear_branch_b();
  static const int kBranchBFieldNumber = 4;
  inline const ::M3LedX2EcBranch& branch_b() const;
  inline ::M3LedX2EcBranch* mutable_branch_b();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 enable_a_;
  ::google::protobuf::int32 enable_b_;
  ::M3LedX2EcBranch* branch_a_;
  ::M3LedX2EcBranch* branch_b_;
  friend void  protobuf_AddDesc_ledx2_5fec_2eproto();
  friend void protobuf_AssignDesc_ledx2_5fec_2eproto();
  friend void protobuf_ShutdownFile_ledx2_5fec_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3LedX2EcCommand* default_instance_;
};
// -------------------------------------------------------------------

class M3LedX2EcParam : public ::google::protobuf::Message {
 public:
  M3LedX2EcParam();
  virtual ~M3LedX2EcParam();
  
  M3LedX2EcParam(const M3LedX2EcParam& from);
  
  inline M3LedX2EcParam& operator=(const M3LedX2EcParam& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3LedX2EcParam& default_instance();
  void Swap(M3LedX2EcParam* other);
  
  // implements Message ----------------------------------------------
  
  M3LedX2EcParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3LedX2EcParam& from);
  void MergeFrom(const M3LedX2EcParam& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 config = 1;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 1;
  inline ::google::protobuf::int32 config() const;
  inline void set_config(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 config_;
  friend void  protobuf_AddDesc_ledx2_5fec_2eproto();
  friend void protobuf_AssignDesc_ledx2_5fec_2eproto();
  friend void protobuf_ShutdownFile_ledx2_5fec_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3LedX2EcParam* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// M3LedX2EcStatus

// optional .M3BaseStatus base = 1;
inline bool M3LedX2EcStatus::has_base() const {
  return _has_bit(0);
}
inline void M3LedX2EcStatus::clear_base() {
  if (base_ != NULL) base_->::M3BaseStatus::Clear();
  _clear_bit(0);
}
inline const ::M3BaseStatus& M3LedX2EcStatus::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::M3BaseStatus* M3LedX2EcStatus::mutable_base() {
  _set_bit(0);
  if (base_ == NULL) base_ = new ::M3BaseStatus;
  return base_;
}

// optional .M3EtherCATStatus ethercat = 2;
inline bool M3LedX2EcStatus::has_ethercat() const {
  return _has_bit(1);
}
inline void M3LedX2EcStatus::clear_ethercat() {
  if (ethercat_ != NULL) ethercat_->::M3EtherCATStatus::Clear();
  _clear_bit(1);
}
inline const ::M3EtherCATStatus& M3LedX2EcStatus::ethercat() const {
  return ethercat_ != NULL ? *ethercat_ : *default_instance_->ethercat_;
}
inline ::M3EtherCATStatus* M3LedX2EcStatus::mutable_ethercat() {
  _set_bit(1);
  if (ethercat_ == NULL) ethercat_ = new ::M3EtherCATStatus;
  return ethercat_;
}

// optional int32 timestamp = 3;
inline bool M3LedX2EcStatus::has_timestamp() const {
  return _has_bit(2);
}
inline void M3LedX2EcStatus::clear_timestamp() {
  timestamp_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 M3LedX2EcStatus::timestamp() const {
  return timestamp_;
}
inline void M3LedX2EcStatus::set_timestamp(::google::protobuf::int32 value) {
  _set_bit(2);
  timestamp_ = value;
}

// optional int32 adc_ext_a = 4;
inline bool M3LedX2EcStatus::has_adc_ext_a() const {
  return _has_bit(3);
}
inline void M3LedX2EcStatus::clear_adc_ext_a() {
  adc_ext_a_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 M3LedX2EcStatus::adc_ext_a() const {
  return adc_ext_a_;
}
inline void M3LedX2EcStatus::set_adc_ext_a(::google::protobuf::int32 value) {
  _set_bit(3);
  adc_ext_a_ = value;
}

// optional int32 adc_ext_b = 5;
inline bool M3LedX2EcStatus::has_adc_ext_b() const {
  return _has_bit(4);
}
inline void M3LedX2EcStatus::clear_adc_ext_b() {
  adc_ext_b_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 M3LedX2EcStatus::adc_ext_b() const {
  return adc_ext_b_;
}
inline void M3LedX2EcStatus::set_adc_ext_b(::google::protobuf::int32 value) {
  _set_bit(4);
  adc_ext_b_ = value;
}

// optional int32 adc_ext_c = 6;
inline bool M3LedX2EcStatus::has_adc_ext_c() const {
  return _has_bit(5);
}
inline void M3LedX2EcStatus::clear_adc_ext_c() {
  adc_ext_c_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 M3LedX2EcStatus::adc_ext_c() const {
  return adc_ext_c_;
}
inline void M3LedX2EcStatus::set_adc_ext_c(::google::protobuf::int32 value) {
  _set_bit(5);
  adc_ext_c_ = value;
}

// optional int32 adc_ext_d = 7;
inline bool M3LedX2EcStatus::has_adc_ext_d() const {
  return _has_bit(6);
}
inline void M3LedX2EcStatus::clear_adc_ext_d() {
  adc_ext_d_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 M3LedX2EcStatus::adc_ext_d() const {
  return adc_ext_d_;
}
inline void M3LedX2EcStatus::set_adc_ext_d(::google::protobuf::int32 value) {
  _set_bit(6);
  adc_ext_d_ = value;
}

// optional int32 flags = 8;
inline bool M3LedX2EcStatus::has_flags() const {
  return _has_bit(7);
}
inline void M3LedX2EcStatus::clear_flags() {
  flags_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 M3LedX2EcStatus::flags() const {
  return flags_;
}
inline void M3LedX2EcStatus::set_flags(::google::protobuf::int32 value) {
  _set_bit(7);
  flags_ = value;
}

// -------------------------------------------------------------------

// M3LedX2EcRGB

// optional int32 r = 1;
inline bool M3LedX2EcRGB::has_r() const {
  return _has_bit(0);
}
inline void M3LedX2EcRGB::clear_r() {
  r_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 M3LedX2EcRGB::r() const {
  return r_;
}
inline void M3LedX2EcRGB::set_r(::google::protobuf::int32 value) {
  _set_bit(0);
  r_ = value;
}

// optional int32 g = 2;
inline bool M3LedX2EcRGB::has_g() const {
  return _has_bit(1);
}
inline void M3LedX2EcRGB::clear_g() {
  g_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 M3LedX2EcRGB::g() const {
  return g_;
}
inline void M3LedX2EcRGB::set_g(::google::protobuf::int32 value) {
  _set_bit(1);
  g_ = value;
}

// optional int32 b = 3;
inline bool M3LedX2EcRGB::has_b() const {
  return _has_bit(2);
}
inline void M3LedX2EcRGB::clear_b() {
  b_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 M3LedX2EcRGB::b() const {
  return b_;
}
inline void M3LedX2EcRGB::set_b(::google::protobuf::int32 value) {
  _set_bit(2);
  b_ = value;
}

// -------------------------------------------------------------------

// M3LedX2EcBranch

// optional .M3LedX2EcRGB board_a = 1;
inline bool M3LedX2EcBranch::has_board_a() const {
  return _has_bit(0);
}
inline void M3LedX2EcBranch::clear_board_a() {
  if (board_a_ != NULL) board_a_->::M3LedX2EcRGB::Clear();
  _clear_bit(0);
}
inline const ::M3LedX2EcRGB& M3LedX2EcBranch::board_a() const {
  return board_a_ != NULL ? *board_a_ : *default_instance_->board_a_;
}
inline ::M3LedX2EcRGB* M3LedX2EcBranch::mutable_board_a() {
  _set_bit(0);
  if (board_a_ == NULL) board_a_ = new ::M3LedX2EcRGB;
  return board_a_;
}

// optional .M3LedX2EcRGB board_b = 2;
inline bool M3LedX2EcBranch::has_board_b() const {
  return _has_bit(1);
}
inline void M3LedX2EcBranch::clear_board_b() {
  if (board_b_ != NULL) board_b_->::M3LedX2EcRGB::Clear();
  _clear_bit(1);
}
inline const ::M3LedX2EcRGB& M3LedX2EcBranch::board_b() const {
  return board_b_ != NULL ? *board_b_ : *default_instance_->board_b_;
}
inline ::M3LedX2EcRGB* M3LedX2EcBranch::mutable_board_b() {
  _set_bit(1);
  if (board_b_ == NULL) board_b_ = new ::M3LedX2EcRGB;
  return board_b_;
}

// -------------------------------------------------------------------

// M3LedX2EcCommand

// optional int32 enable_a = 1;
inline bool M3LedX2EcCommand::has_enable_a() const {
  return _has_bit(0);
}
inline void M3LedX2EcCommand::clear_enable_a() {
  enable_a_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 M3LedX2EcCommand::enable_a() const {
  return enable_a_;
}
inline void M3LedX2EcCommand::set_enable_a(::google::protobuf::int32 value) {
  _set_bit(0);
  enable_a_ = value;
}

// optional int32 enable_b = 2;
inline bool M3LedX2EcCommand::has_enable_b() const {
  return _has_bit(1);
}
inline void M3LedX2EcCommand::clear_enable_b() {
  enable_b_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 M3LedX2EcCommand::enable_b() const {
  return enable_b_;
}
inline void M3LedX2EcCommand::set_enable_b(::google::protobuf::int32 value) {
  _set_bit(1);
  enable_b_ = value;
}

// optional .M3LedX2EcBranch branch_a = 3;
inline bool M3LedX2EcCommand::has_branch_a() const {
  return _has_bit(2);
}
inline void M3LedX2EcCommand::clear_branch_a() {
  if (branch_a_ != NULL) branch_a_->::M3LedX2EcBranch::Clear();
  _clear_bit(2);
}
inline const ::M3LedX2EcBranch& M3LedX2EcCommand::branch_a() const {
  return branch_a_ != NULL ? *branch_a_ : *default_instance_->branch_a_;
}
inline ::M3LedX2EcBranch* M3LedX2EcCommand::mutable_branch_a() {
  _set_bit(2);
  if (branch_a_ == NULL) branch_a_ = new ::M3LedX2EcBranch;
  return branch_a_;
}

// optional .M3LedX2EcBranch branch_b = 4;
inline bool M3LedX2EcCommand::has_branch_b() const {
  return _has_bit(3);
}
inline void M3LedX2EcCommand::clear_branch_b() {
  if (branch_b_ != NULL) branch_b_->::M3LedX2EcBranch::Clear();
  _clear_bit(3);
}
inline const ::M3LedX2EcBranch& M3LedX2EcCommand::branch_b() const {
  return branch_b_ != NULL ? *branch_b_ : *default_instance_->branch_b_;
}
inline ::M3LedX2EcBranch* M3LedX2EcCommand::mutable_branch_b() {
  _set_bit(3);
  if (branch_b_ == NULL) branch_b_ = new ::M3LedX2EcBranch;
  return branch_b_;
}

// -------------------------------------------------------------------

// M3LedX2EcParam

// optional int32 config = 1;
inline bool M3LedX2EcParam::has_config() const {
  return _has_bit(0);
}
inline void M3LedX2EcParam::clear_config() {
  config_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 M3LedX2EcParam::config() const {
  return config_;
}
inline void M3LedX2EcParam::set_config(::google::protobuf::int32 value) {
  _set_bit(0);
  config_ = value;
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_ledx2_5fec_2eproto__INCLUDED
