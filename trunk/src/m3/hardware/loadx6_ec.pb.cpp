// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "loadx6_ec.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* M3LoadX6EcStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3LoadX6EcStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3LoadX6EcCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3LoadX6EcCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3LoadX6EcParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3LoadX6EcParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_loadx6_5fec_2eproto() {
  protobuf_AddDesc_loadx6_5fec_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "loadx6_ec.proto");
  GOOGLE_CHECK(file != NULL);
  M3LoadX6EcStatus_descriptor_ = file->message_type(0);
  static const int M3LoadX6EcStatus_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX6EcStatus, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX6EcStatus, ethercat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX6EcStatus, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX6EcStatus, dig_ext_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX6EcStatus, adc_ext_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX6EcStatus, adc_ext_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX6EcStatus, adc_ext_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX6EcStatus, adc_load_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX6EcStatus, adc_load_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX6EcStatus, adc_load_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX6EcStatus, adc_load_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX6EcStatus, adc_load_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX6EcStatus, adc_load_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX6EcStatus, flags_),
  };
  M3LoadX6EcStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3LoadX6EcStatus_descriptor_,
      M3LoadX6EcStatus::default_instance_,
      M3LoadX6EcStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX6EcStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX6EcStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3LoadX6EcStatus));
  M3LoadX6EcCommand_descriptor_ = file->message_type(1);
  static const int M3LoadX6EcCommand_offsets_[1] = {
  };
  M3LoadX6EcCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3LoadX6EcCommand_descriptor_,
      M3LoadX6EcCommand::default_instance_,
      M3LoadX6EcCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX6EcCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX6EcCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3LoadX6EcCommand));
  M3LoadX6EcParam_descriptor_ = file->message_type(2);
  static const int M3LoadX6EcParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX6EcParam, config_),
  };
  M3LoadX6EcParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3LoadX6EcParam_descriptor_,
      M3LoadX6EcParam::default_instance_,
      M3LoadX6EcParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX6EcParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LoadX6EcParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3LoadX6EcParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_loadx6_5fec_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3LoadX6EcStatus_descriptor_, &M3LoadX6EcStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3LoadX6EcCommand_descriptor_, &M3LoadX6EcCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3LoadX6EcParam_descriptor_, &M3LoadX6EcParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_loadx6_5fec_2eproto() {
  delete M3LoadX6EcStatus::default_instance_;
  delete M3LoadX6EcStatus_reflection_;
  delete M3LoadX6EcCommand::default_instance_;
  delete M3LoadX6EcCommand_reflection_;
  delete M3LoadX6EcParam::default_instance_;
  delete M3LoadX6EcParam_reflection_;
}

void protobuf_AddDesc_loadx6_5fec_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_component_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017loadx6_ec.proto\032\024component_base.proto\""
    "\272\002\n\020M3LoadX6EcStatus\022\033\n\004base\030\001 \001(\0132\r.M3B"
    "aseStatus\022#\n\010ethercat\030\002 \001(\0132\021.M3EtherCAT"
    "Status\022\021\n\ttimestamp\030\003 \001(\004\022\021\n\tdig_ext_0\030\004"
    " \001(\005\022\021\n\tadc_ext_0\030\005 \001(\005\022\021\n\tadc_ext_1\030\006 \001"
    "(\005\022\021\n\tadc_ext_2\030\007 \001(\005\022\022\n\nadc_load_0\030\010 \001("
    "\005\022\022\n\nadc_load_1\030\t \001(\005\022\022\n\nadc_load_2\030\n \001("
    "\005\022\022\n\nadc_load_3\030\013 \001(\005\022\022\n\nadc_load_4\030\014 \001("
    "\005\022\022\n\nadc_load_5\030\r \001(\005\022\r\n\005flags\030\016 \001(\005\"\023\n\021"
    "M3LoadX6EcCommand\"!\n\017M3LoadX6EcParam\022\016\n\006"
    "config\030\001 \001(\005B\002H\001", 416);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "loadx6_ec.proto", &protobuf_RegisterTypes);
  M3LoadX6EcStatus::default_instance_ = new M3LoadX6EcStatus();
  M3LoadX6EcCommand::default_instance_ = new M3LoadX6EcCommand();
  M3LoadX6EcParam::default_instance_ = new M3LoadX6EcParam();
  M3LoadX6EcStatus::default_instance_->InitAsDefaultInstance();
  M3LoadX6EcCommand::default_instance_->InitAsDefaultInstance();
  M3LoadX6EcParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_loadx6_5fec_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_loadx6_5fec_2eproto {
  StaticDescriptorInitializer_loadx6_5fec_2eproto() {
    protobuf_AddDesc_loadx6_5fec_2eproto();
  }
} static_descriptor_initializer_loadx6_5fec_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int M3LoadX6EcStatus::kBaseFieldNumber;
const int M3LoadX6EcStatus::kEthercatFieldNumber;
const int M3LoadX6EcStatus::kTimestampFieldNumber;
const int M3LoadX6EcStatus::kDigExt0FieldNumber;
const int M3LoadX6EcStatus::kAdcExt0FieldNumber;
const int M3LoadX6EcStatus::kAdcExt1FieldNumber;
const int M3LoadX6EcStatus::kAdcExt2FieldNumber;
const int M3LoadX6EcStatus::kAdcLoad0FieldNumber;
const int M3LoadX6EcStatus::kAdcLoad1FieldNumber;
const int M3LoadX6EcStatus::kAdcLoad2FieldNumber;
const int M3LoadX6EcStatus::kAdcLoad3FieldNumber;
const int M3LoadX6EcStatus::kAdcLoad4FieldNumber;
const int M3LoadX6EcStatus::kAdcLoad5FieldNumber;
const int M3LoadX6EcStatus::kFlagsFieldNumber;
#endif  // !_MSC_VER

M3LoadX6EcStatus::M3LoadX6EcStatus() {
  SharedCtor();
}

void M3LoadX6EcStatus::InitAsDefaultInstance() {
  base_ = const_cast< ::M3BaseStatus*>(&::M3BaseStatus::default_instance());
  ethercat_ = const_cast< ::M3EtherCATStatus*>(&::M3EtherCATStatus::default_instance());
}

M3LoadX6EcStatus::M3LoadX6EcStatus(const M3LoadX6EcStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3LoadX6EcStatus::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  ethercat_ = NULL;
  timestamp_ = GOOGLE_ULONGLONG(0);
  dig_ext_0_ = 0;
  adc_ext_0_ = 0;
  adc_ext_1_ = 0;
  adc_ext_2_ = 0;
  adc_load_0_ = 0;
  adc_load_1_ = 0;
  adc_load_2_ = 0;
  adc_load_3_ = 0;
  adc_load_4_ = 0;
  adc_load_5_ = 0;
  flags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3LoadX6EcStatus::~M3LoadX6EcStatus() {
  SharedDtor();
}

void M3LoadX6EcStatus::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete ethercat_;
  }
}

const ::google::protobuf::Descriptor* M3LoadX6EcStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3LoadX6EcStatus_descriptor_;
}

const M3LoadX6EcStatus& M3LoadX6EcStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loadx6_5fec_2eproto();  return *default_instance_;
}

M3LoadX6EcStatus* M3LoadX6EcStatus::default_instance_ = NULL;

M3LoadX6EcStatus* M3LoadX6EcStatus::New() const {
  return new M3LoadX6EcStatus;
}

void M3LoadX6EcStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (base_ != NULL) base_->::M3BaseStatus::Clear();
    }
    if (_has_bit(1)) {
      if (ethercat_ != NULL) ethercat_->::M3EtherCATStatus::Clear();
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
    dig_ext_0_ = 0;
    adc_ext_0_ = 0;
    adc_ext_1_ = 0;
    adc_ext_2_ = 0;
    adc_load_0_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    adc_load_1_ = 0;
    adc_load_2_ = 0;
    adc_load_3_ = 0;
    adc_load_4_ = 0;
    adc_load_5_ = 0;
    flags_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3LoadX6EcStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseStatus base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_base()));
        if (input->ExpectTag(18)) goto parse_ethercat;
        break;
      }
      
      // optional .M3EtherCATStatus ethercat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ethercat:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_ethercat()));
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }
      
      // optional uint64 timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_timestamp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &timestamp_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_dig_ext_0;
        break;
      }
      
      // optional int32 dig_ext_0 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dig_ext_0:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dig_ext_0_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_adc_ext_0;
        break;
      }
      
      // optional int32 adc_ext_0 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adc_ext_0:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adc_ext_0_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_adc_ext_1;
        break;
      }
      
      // optional int32 adc_ext_1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adc_ext_1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adc_ext_1_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_adc_ext_2;
        break;
      }
      
      // optional int32 adc_ext_2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adc_ext_2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adc_ext_2_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_adc_load_0;
        break;
      }
      
      // optional int32 adc_load_0 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adc_load_0:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adc_load_0_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_adc_load_1;
        break;
      }
      
      // optional int32 adc_load_1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adc_load_1:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adc_load_1_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_adc_load_2;
        break;
      }
      
      // optional int32 adc_load_2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adc_load_2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adc_load_2_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_adc_load_3;
        break;
      }
      
      // optional int32 adc_load_3 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adc_load_3:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adc_load_3_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_adc_load_4;
        break;
      }
      
      // optional int32 adc_load_4 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adc_load_4:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adc_load_4_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_adc_load_5;
        break;
      }
      
      // optional int32 adc_load_5 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adc_load_5:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adc_load_5_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_flags;
        break;
      }
      
      // optional int32 flags = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_flags:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &flags_));
        _set_bit(13);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3LoadX6EcStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3LoadX6EcStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .M3BaseStatus base = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->base(), output);
  }
  
  // optional .M3EtherCATStatus ethercat = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->ethercat(), output);
  }
  
  // optional uint64 timestamp = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }
  
  // optional int32 dig_ext_0 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dig_ext_0(), output);
  }
  
  // optional int32 adc_ext_0 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->adc_ext_0(), output);
  }
  
  // optional int32 adc_ext_1 = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->adc_ext_1(), output);
  }
  
  // optional int32 adc_ext_2 = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->adc_ext_2(), output);
  }
  
  // optional int32 adc_load_0 = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->adc_load_0(), output);
  }
  
  // optional int32 adc_load_1 = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->adc_load_1(), output);
  }
  
  // optional int32 adc_load_2 = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->adc_load_2(), output);
  }
  
  // optional int32 adc_load_3 = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->adc_load_3(), output);
  }
  
  // optional int32 adc_load_4 = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->adc_load_4(), output);
  }
  
  // optional int32 adc_load_5 = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->adc_load_5(), output);
  }
  
  // optional int32 flags = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->flags(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3LoadX6EcStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseStatus base = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional .M3EtherCATStatus ethercat = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ethercat(), target);
  }
  
  // optional uint64 timestamp = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }
  
  // optional int32 dig_ext_0 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dig_ext_0(), target);
  }
  
  // optional int32 adc_ext_0 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->adc_ext_0(), target);
  }
  
  // optional int32 adc_ext_1 = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->adc_ext_1(), target);
  }
  
  // optional int32 adc_ext_2 = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->adc_ext_2(), target);
  }
  
  // optional int32 adc_load_0 = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->adc_load_0(), target);
  }
  
  // optional int32 adc_load_1 = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->adc_load_1(), target);
  }
  
  // optional int32 adc_load_2 = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->adc_load_2(), target);
  }
  
  // optional int32 adc_load_3 = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->adc_load_3(), target);
  }
  
  // optional int32 adc_load_4 = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->adc_load_4(), target);
  }
  
  // optional int32 adc_load_5 = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->adc_load_5(), target);
  }
  
  // optional int32 flags = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->flags(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3LoadX6EcStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseStatus base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional .M3EtherCATStatus ethercat = 2;
    if (has_ethercat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ethercat());
    }
    
    // optional uint64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }
    
    // optional int32 dig_ext_0 = 4;
    if (has_dig_ext_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dig_ext_0());
    }
    
    // optional int32 adc_ext_0 = 5;
    if (has_adc_ext_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_ext_0());
    }
    
    // optional int32 adc_ext_1 = 6;
    if (has_adc_ext_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_ext_1());
    }
    
    // optional int32 adc_ext_2 = 7;
    if (has_adc_ext_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_ext_2());
    }
    
    // optional int32 adc_load_0 = 8;
    if (has_adc_load_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_load_0());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 adc_load_1 = 9;
    if (has_adc_load_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_load_1());
    }
    
    // optional int32 adc_load_2 = 10;
    if (has_adc_load_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_load_2());
    }
    
    // optional int32 adc_load_3 = 11;
    if (has_adc_load_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_load_3());
    }
    
    // optional int32 adc_load_4 = 12;
    if (has_adc_load_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_load_4());
    }
    
    // optional int32 adc_load_5 = 13;
    if (has_adc_load_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_load_5());
    }
    
    // optional int32 flags = 14;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3LoadX6EcStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3LoadX6EcStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3LoadX6EcStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3LoadX6EcStatus::MergeFrom(const M3LoadX6EcStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_base()->::M3BaseStatus::MergeFrom(from.base());
    }
    if (from._has_bit(1)) {
      mutable_ethercat()->::M3EtherCATStatus::MergeFrom(from.ethercat());
    }
    if (from._has_bit(2)) {
      set_timestamp(from.timestamp());
    }
    if (from._has_bit(3)) {
      set_dig_ext_0(from.dig_ext_0());
    }
    if (from._has_bit(4)) {
      set_adc_ext_0(from.adc_ext_0());
    }
    if (from._has_bit(5)) {
      set_adc_ext_1(from.adc_ext_1());
    }
    if (from._has_bit(6)) {
      set_adc_ext_2(from.adc_ext_2());
    }
    if (from._has_bit(7)) {
      set_adc_load_0(from.adc_load_0());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_adc_load_1(from.adc_load_1());
    }
    if (from._has_bit(9)) {
      set_adc_load_2(from.adc_load_2());
    }
    if (from._has_bit(10)) {
      set_adc_load_3(from.adc_load_3());
    }
    if (from._has_bit(11)) {
      set_adc_load_4(from.adc_load_4());
    }
    if (from._has_bit(12)) {
      set_adc_load_5(from.adc_load_5());
    }
    if (from._has_bit(13)) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3LoadX6EcStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3LoadX6EcStatus::CopyFrom(const M3LoadX6EcStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3LoadX6EcStatus::IsInitialized() const {
  
  return true;
}

void M3LoadX6EcStatus::Swap(M3LoadX6EcStatus* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(ethercat_, other->ethercat_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(dig_ext_0_, other->dig_ext_0_);
    std::swap(adc_ext_0_, other->adc_ext_0_);
    std::swap(adc_ext_1_, other->adc_ext_1_);
    std::swap(adc_ext_2_, other->adc_ext_2_);
    std::swap(adc_load_0_, other->adc_load_0_);
    std::swap(adc_load_1_, other->adc_load_1_);
    std::swap(adc_load_2_, other->adc_load_2_);
    std::swap(adc_load_3_, other->adc_load_3_);
    std::swap(adc_load_4_, other->adc_load_4_);
    std::swap(adc_load_5_, other->adc_load_5_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3LoadX6EcStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3LoadX6EcStatus_descriptor_;
  metadata.reflection = M3LoadX6EcStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

M3LoadX6EcCommand::M3LoadX6EcCommand() {
  SharedCtor();
}

void M3LoadX6EcCommand::InitAsDefaultInstance() {
}

M3LoadX6EcCommand::M3LoadX6EcCommand(const M3LoadX6EcCommand& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3LoadX6EcCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3LoadX6EcCommand::~M3LoadX6EcCommand() {
  SharedDtor();
}

void M3LoadX6EcCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* M3LoadX6EcCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3LoadX6EcCommand_descriptor_;
}

const M3LoadX6EcCommand& M3LoadX6EcCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loadx6_5fec_2eproto();  return *default_instance_;
}

M3LoadX6EcCommand* M3LoadX6EcCommand::default_instance_ = NULL;

M3LoadX6EcCommand* M3LoadX6EcCommand::New() const {
  return new M3LoadX6EcCommand;
}

void M3LoadX6EcCommand::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3LoadX6EcCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void M3LoadX6EcCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3LoadX6EcCommand::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3LoadX6EcCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3LoadX6EcCommand::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3LoadX6EcCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3LoadX6EcCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3LoadX6EcCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3LoadX6EcCommand::MergeFrom(const M3LoadX6EcCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3LoadX6EcCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3LoadX6EcCommand::CopyFrom(const M3LoadX6EcCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3LoadX6EcCommand::IsInitialized() const {
  
  return true;
}

void M3LoadX6EcCommand::Swap(M3LoadX6EcCommand* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3LoadX6EcCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3LoadX6EcCommand_descriptor_;
  metadata.reflection = M3LoadX6EcCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3LoadX6EcParam::kConfigFieldNumber;
#endif  // !_MSC_VER

M3LoadX6EcParam::M3LoadX6EcParam() {
  SharedCtor();
}

void M3LoadX6EcParam::InitAsDefaultInstance() {
}

M3LoadX6EcParam::M3LoadX6EcParam(const M3LoadX6EcParam& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3LoadX6EcParam::SharedCtor() {
  _cached_size_ = 0;
  config_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3LoadX6EcParam::~M3LoadX6EcParam() {
  SharedDtor();
}

void M3LoadX6EcParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* M3LoadX6EcParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3LoadX6EcParam_descriptor_;
}

const M3LoadX6EcParam& M3LoadX6EcParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loadx6_5fec_2eproto();  return *default_instance_;
}

M3LoadX6EcParam* M3LoadX6EcParam::default_instance_ = NULL;

M3LoadX6EcParam* M3LoadX6EcParam::New() const {
  return new M3LoadX6EcParam;
}

void M3LoadX6EcParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    config_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3LoadX6EcParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 config = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &config_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3LoadX6EcParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3LoadX6EcParam::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 config = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->config(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3LoadX6EcParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 config = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->config(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3LoadX6EcParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 config = 1;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3LoadX6EcParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3LoadX6EcParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3LoadX6EcParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3LoadX6EcParam::MergeFrom(const M3LoadX6EcParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_config(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3LoadX6EcParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3LoadX6EcParam::CopyFrom(const M3LoadX6EcParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3LoadX6EcParam::IsInitialized() const {
  
  return true;
}

void M3LoadX6EcParam::Swap(M3LoadX6EcParam* other) {
  if (other != this) {
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3LoadX6EcParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3LoadX6EcParam_descriptor_;
  metadata.reflection = M3LoadX6EcParam_reflection_;
  return metadata;
}

