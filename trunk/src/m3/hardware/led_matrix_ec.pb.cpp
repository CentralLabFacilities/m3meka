// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "led_matrix_ec.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* M3LedMatrixEcStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3LedMatrixEcStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3LedMatrixEcRGB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3LedMatrixEcRGB_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3LedMatrixEcRGBRow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3LedMatrixEcRGBRow_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3LedMatrixEcCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3LedMatrixEcCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3LedMatrixEcParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3LedMatrixEcParam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_led_5fmatrix_5fec_2eproto() {
  protobuf_AddDesc_led_5fmatrix_5fec_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "led_matrix_ec.proto");
  GOOGLE_CHECK(file != NULL);
  M3LedMatrixEcStatus_descriptor_ = file->message_type(0);
  static const int M3LedMatrixEcStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedMatrixEcStatus, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedMatrixEcStatus, ethercat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedMatrixEcStatus, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedMatrixEcStatus, debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedMatrixEcStatus, flags_),
  };
  M3LedMatrixEcStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3LedMatrixEcStatus_descriptor_,
      M3LedMatrixEcStatus::default_instance_,
      M3LedMatrixEcStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedMatrixEcStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedMatrixEcStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3LedMatrixEcStatus));
  M3LedMatrixEcRGB_descriptor_ = file->message_type(1);
  static const int M3LedMatrixEcRGB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedMatrixEcRGB, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedMatrixEcRGB, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedMatrixEcRGB, b_),
  };
  M3LedMatrixEcRGB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3LedMatrixEcRGB_descriptor_,
      M3LedMatrixEcRGB::default_instance_,
      M3LedMatrixEcRGB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedMatrixEcRGB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedMatrixEcRGB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3LedMatrixEcRGB));
  M3LedMatrixEcRGBRow_descriptor_ = file->message_type(2);
  static const int M3LedMatrixEcRGBRow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedMatrixEcRGBRow, column_),
  };
  M3LedMatrixEcRGBRow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3LedMatrixEcRGBRow_descriptor_,
      M3LedMatrixEcRGBRow::default_instance_,
      M3LedMatrixEcRGBRow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedMatrixEcRGBRow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedMatrixEcRGBRow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3LedMatrixEcRGBRow));
  M3LedMatrixEcCommand_descriptor_ = file->message_type(3);
  static const int M3LedMatrixEcCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedMatrixEcCommand, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedMatrixEcCommand, row_),
  };
  M3LedMatrixEcCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3LedMatrixEcCommand_descriptor_,
      M3LedMatrixEcCommand::default_instance_,
      M3LedMatrixEcCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedMatrixEcCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedMatrixEcCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3LedMatrixEcCommand));
  M3LedMatrixEcParam_descriptor_ = file->message_type(4);
  static const int M3LedMatrixEcParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedMatrixEcParam, slew_rate_),
  };
  M3LedMatrixEcParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3LedMatrixEcParam_descriptor_,
      M3LedMatrixEcParam::default_instance_,
      M3LedMatrixEcParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedMatrixEcParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3LedMatrixEcParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3LedMatrixEcParam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_led_5fmatrix_5fec_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3LedMatrixEcStatus_descriptor_, &M3LedMatrixEcStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3LedMatrixEcRGB_descriptor_, &M3LedMatrixEcRGB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3LedMatrixEcRGBRow_descriptor_, &M3LedMatrixEcRGBRow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3LedMatrixEcCommand_descriptor_, &M3LedMatrixEcCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3LedMatrixEcParam_descriptor_, &M3LedMatrixEcParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_led_5fmatrix_5fec_2eproto() {
  delete M3LedMatrixEcStatus::default_instance_;
  delete M3LedMatrixEcStatus_reflection_;
  delete M3LedMatrixEcRGB::default_instance_;
  delete M3LedMatrixEcRGB_reflection_;
  delete M3LedMatrixEcRGBRow::default_instance_;
  delete M3LedMatrixEcRGBRow_reflection_;
  delete M3LedMatrixEcCommand::default_instance_;
  delete M3LedMatrixEcCommand_reflection_;
  delete M3LedMatrixEcParam::default_instance_;
  delete M3LedMatrixEcParam_reflection_;
}

void protobuf_AddDesc_led_5fmatrix_5fec_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_component_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023led_matrix_ec.proto\032\024component_base.pr"
    "oto\"\210\001\n\023M3LedMatrixEcStatus\022\033\n\004base\030\001 \001("
    "\0132\r.M3BaseStatus\022#\n\010ethercat\030\002 \001(\0132\021.M3E"
    "therCATStatus\022\021\n\ttimestamp\030\003 \001(\005\022\r\n\005debu"
    "g\030\004 \001(\005\022\r\n\005flags\030\005 \001(\005\"3\n\020M3LedMatrixEcR"
    "GB\022\t\n\001r\030\001 \001(\r\022\t\n\001g\030\002 \001(\r\022\t\n\001b\030\003 \001(\r\"8\n\023M"
    "3LedMatrixEcRGBRow\022!\n\006column\030\001 \003(\0132\021.M3L"
    "edMatrixEcRGB\"I\n\024M3LedMatrixEcCommand\022\016\n"
    "\006enable\030\001 \001(\r\022!\n\003row\030\002 \003(\0132\024.M3LedMatrix"
    "EcRGBRow\"\'\n\022M3LedMatrixEcParam\022\021\n\tslew_r"
    "ate\030\001 \001(\001B\002H\001", 413);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "led_matrix_ec.proto", &protobuf_RegisterTypes);
  M3LedMatrixEcStatus::default_instance_ = new M3LedMatrixEcStatus();
  M3LedMatrixEcRGB::default_instance_ = new M3LedMatrixEcRGB();
  M3LedMatrixEcRGBRow::default_instance_ = new M3LedMatrixEcRGBRow();
  M3LedMatrixEcCommand::default_instance_ = new M3LedMatrixEcCommand();
  M3LedMatrixEcParam::default_instance_ = new M3LedMatrixEcParam();
  M3LedMatrixEcStatus::default_instance_->InitAsDefaultInstance();
  M3LedMatrixEcRGB::default_instance_->InitAsDefaultInstance();
  M3LedMatrixEcRGBRow::default_instance_->InitAsDefaultInstance();
  M3LedMatrixEcCommand::default_instance_->InitAsDefaultInstance();
  M3LedMatrixEcParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_led_5fmatrix_5fec_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_led_5fmatrix_5fec_2eproto {
  StaticDescriptorInitializer_led_5fmatrix_5fec_2eproto() {
    protobuf_AddDesc_led_5fmatrix_5fec_2eproto();
  }
} static_descriptor_initializer_led_5fmatrix_5fec_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int M3LedMatrixEcStatus::kBaseFieldNumber;
const int M3LedMatrixEcStatus::kEthercatFieldNumber;
const int M3LedMatrixEcStatus::kTimestampFieldNumber;
const int M3LedMatrixEcStatus::kDebugFieldNumber;
const int M3LedMatrixEcStatus::kFlagsFieldNumber;
#endif  // !_MSC_VER

M3LedMatrixEcStatus::M3LedMatrixEcStatus() {
  SharedCtor();
}

void M3LedMatrixEcStatus::InitAsDefaultInstance() {
  base_ = const_cast< ::M3BaseStatus*>(&::M3BaseStatus::default_instance());
  ethercat_ = const_cast< ::M3EtherCATStatus*>(&::M3EtherCATStatus::default_instance());
}

M3LedMatrixEcStatus::M3LedMatrixEcStatus(const M3LedMatrixEcStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3LedMatrixEcStatus::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  ethercat_ = NULL;
  timestamp_ = 0;
  debug_ = 0;
  flags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3LedMatrixEcStatus::~M3LedMatrixEcStatus() {
  SharedDtor();
}

void M3LedMatrixEcStatus::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete ethercat_;
  }
}

const ::google::protobuf::Descriptor* M3LedMatrixEcStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3LedMatrixEcStatus_descriptor_;
}

const M3LedMatrixEcStatus& M3LedMatrixEcStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_led_5fmatrix_5fec_2eproto();  return *default_instance_;
}

M3LedMatrixEcStatus* M3LedMatrixEcStatus::default_instance_ = NULL;

M3LedMatrixEcStatus* M3LedMatrixEcStatus::New() const {
  return new M3LedMatrixEcStatus;
}

void M3LedMatrixEcStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (base_ != NULL) base_->::M3BaseStatus::Clear();
    }
    if (_has_bit(1)) {
      if (ethercat_ != NULL) ethercat_->::M3EtherCATStatus::Clear();
    }
    timestamp_ = 0;
    debug_ = 0;
    flags_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3LedMatrixEcStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseStatus base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_base()));
        if (input->ExpectTag(18)) goto parse_ethercat;
        break;
      }
      
      // optional .M3EtherCATStatus ethercat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ethercat:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_ethercat()));
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }
      
      // optional int32 timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_timestamp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &timestamp_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_debug;
        break;
      }
      
      // optional int32 debug = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_debug:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &debug_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_flags;
        break;
      }
      
      // optional int32 flags = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_flags:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &flags_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3LedMatrixEcStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3LedMatrixEcStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .M3BaseStatus base = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->base(), output);
  }
  
  // optional .M3EtherCATStatus ethercat = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->ethercat(), output);
  }
  
  // optional int32 timestamp = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timestamp(), output);
  }
  
  // optional int32 debug = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->debug(), output);
  }
  
  // optional int32 flags = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->flags(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3LedMatrixEcStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseStatus base = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional .M3EtherCATStatus ethercat = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ethercat(), target);
  }
  
  // optional int32 timestamp = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timestamp(), target);
  }
  
  // optional int32 debug = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->debug(), target);
  }
  
  // optional int32 flags = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->flags(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3LedMatrixEcStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseStatus base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional .M3EtherCATStatus ethercat = 2;
    if (has_ethercat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ethercat());
    }
    
    // optional int32 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }
    
    // optional int32 debug = 4;
    if (has_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->debug());
    }
    
    // optional int32 flags = 5;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3LedMatrixEcStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3LedMatrixEcStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3LedMatrixEcStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3LedMatrixEcStatus::MergeFrom(const M3LedMatrixEcStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_base()->::M3BaseStatus::MergeFrom(from.base());
    }
    if (from._has_bit(1)) {
      mutable_ethercat()->::M3EtherCATStatus::MergeFrom(from.ethercat());
    }
    if (from._has_bit(2)) {
      set_timestamp(from.timestamp());
    }
    if (from._has_bit(3)) {
      set_debug(from.debug());
    }
    if (from._has_bit(4)) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3LedMatrixEcStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3LedMatrixEcStatus::CopyFrom(const M3LedMatrixEcStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3LedMatrixEcStatus::IsInitialized() const {
  
  return true;
}

void M3LedMatrixEcStatus::Swap(M3LedMatrixEcStatus* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(ethercat_, other->ethercat_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(debug_, other->debug_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3LedMatrixEcStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3LedMatrixEcStatus_descriptor_;
  metadata.reflection = M3LedMatrixEcStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3LedMatrixEcRGB::kRFieldNumber;
const int M3LedMatrixEcRGB::kGFieldNumber;
const int M3LedMatrixEcRGB::kBFieldNumber;
#endif  // !_MSC_VER

M3LedMatrixEcRGB::M3LedMatrixEcRGB() {
  SharedCtor();
}

void M3LedMatrixEcRGB::InitAsDefaultInstance() {
}

M3LedMatrixEcRGB::M3LedMatrixEcRGB(const M3LedMatrixEcRGB& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3LedMatrixEcRGB::SharedCtor() {
  _cached_size_ = 0;
  r_ = 0u;
  g_ = 0u;
  b_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3LedMatrixEcRGB::~M3LedMatrixEcRGB() {
  SharedDtor();
}

void M3LedMatrixEcRGB::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* M3LedMatrixEcRGB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3LedMatrixEcRGB_descriptor_;
}

const M3LedMatrixEcRGB& M3LedMatrixEcRGB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_led_5fmatrix_5fec_2eproto();  return *default_instance_;
}

M3LedMatrixEcRGB* M3LedMatrixEcRGB::default_instance_ = NULL;

M3LedMatrixEcRGB* M3LedMatrixEcRGB::New() const {
  return new M3LedMatrixEcRGB;
}

void M3LedMatrixEcRGB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    r_ = 0u;
    g_ = 0u;
    b_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3LedMatrixEcRGB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 r = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &r_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_g;
        break;
      }
      
      // optional uint32 g = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_g:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &g_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_b;
        break;
      }
      
      // optional uint32 b = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_b:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &b_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3LedMatrixEcRGB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3LedMatrixEcRGB::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 r = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->r(), output);
  }
  
  // optional uint32 g = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->g(), output);
  }
  
  // optional uint32 b = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->b(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3LedMatrixEcRGB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 r = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->r(), target);
  }
  
  // optional uint32 g = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->g(), target);
  }
  
  // optional uint32 b = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->b(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3LedMatrixEcRGB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 r = 1;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r());
    }
    
    // optional uint32 g = 2;
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->g());
    }
    
    // optional uint32 b = 3;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->b());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3LedMatrixEcRGB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3LedMatrixEcRGB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3LedMatrixEcRGB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3LedMatrixEcRGB::MergeFrom(const M3LedMatrixEcRGB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_r(from.r());
    }
    if (from._has_bit(1)) {
      set_g(from.g());
    }
    if (from._has_bit(2)) {
      set_b(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3LedMatrixEcRGB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3LedMatrixEcRGB::CopyFrom(const M3LedMatrixEcRGB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3LedMatrixEcRGB::IsInitialized() const {
  
  return true;
}

void M3LedMatrixEcRGB::Swap(M3LedMatrixEcRGB* other) {
  if (other != this) {
    std::swap(r_, other->r_);
    std::swap(g_, other->g_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3LedMatrixEcRGB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3LedMatrixEcRGB_descriptor_;
  metadata.reflection = M3LedMatrixEcRGB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3LedMatrixEcRGBRow::kColumnFieldNumber;
#endif  // !_MSC_VER

M3LedMatrixEcRGBRow::M3LedMatrixEcRGBRow() {
  SharedCtor();
}

void M3LedMatrixEcRGBRow::InitAsDefaultInstance() {
}

M3LedMatrixEcRGBRow::M3LedMatrixEcRGBRow(const M3LedMatrixEcRGBRow& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3LedMatrixEcRGBRow::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3LedMatrixEcRGBRow::~M3LedMatrixEcRGBRow() {
  SharedDtor();
}

void M3LedMatrixEcRGBRow::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* M3LedMatrixEcRGBRow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3LedMatrixEcRGBRow_descriptor_;
}

const M3LedMatrixEcRGBRow& M3LedMatrixEcRGBRow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_led_5fmatrix_5fec_2eproto();  return *default_instance_;
}

M3LedMatrixEcRGBRow* M3LedMatrixEcRGBRow::default_instance_ = NULL;

M3LedMatrixEcRGBRow* M3LedMatrixEcRGBRow::New() const {
  return new M3LedMatrixEcRGBRow;
}

void M3LedMatrixEcRGBRow::Clear() {
  column_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3LedMatrixEcRGBRow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .M3LedMatrixEcRGB column = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_column:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_column()));
        if (input->ExpectTag(10)) goto parse_column;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3LedMatrixEcRGBRow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3LedMatrixEcRGBRow::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .M3LedMatrixEcRGB column = 1;
  for (int i = 0; i < this->column_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->column(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3LedMatrixEcRGBRow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .M3LedMatrixEcRGB column = 1;
  for (int i = 0; i < this->column_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->column(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3LedMatrixEcRGBRow::ByteSize() const {
  int total_size = 0;
  
  // repeated .M3LedMatrixEcRGB column = 1;
  total_size += 1 * this->column_size();
  for (int i = 0; i < this->column_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->column(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3LedMatrixEcRGBRow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3LedMatrixEcRGBRow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3LedMatrixEcRGBRow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3LedMatrixEcRGBRow::MergeFrom(const M3LedMatrixEcRGBRow& from) {
  GOOGLE_CHECK_NE(&from, this);
  column_.MergeFrom(from.column_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3LedMatrixEcRGBRow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3LedMatrixEcRGBRow::CopyFrom(const M3LedMatrixEcRGBRow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3LedMatrixEcRGBRow::IsInitialized() const {
  
  return true;
}

void M3LedMatrixEcRGBRow::Swap(M3LedMatrixEcRGBRow* other) {
  if (other != this) {
    column_.Swap(&other->column_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3LedMatrixEcRGBRow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3LedMatrixEcRGBRow_descriptor_;
  metadata.reflection = M3LedMatrixEcRGBRow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3LedMatrixEcCommand::kEnableFieldNumber;
const int M3LedMatrixEcCommand::kRowFieldNumber;
#endif  // !_MSC_VER

M3LedMatrixEcCommand::M3LedMatrixEcCommand() {
  SharedCtor();
}

void M3LedMatrixEcCommand::InitAsDefaultInstance() {
}

M3LedMatrixEcCommand::M3LedMatrixEcCommand(const M3LedMatrixEcCommand& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3LedMatrixEcCommand::SharedCtor() {
  _cached_size_ = 0;
  enable_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3LedMatrixEcCommand::~M3LedMatrixEcCommand() {
  SharedDtor();
}

void M3LedMatrixEcCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* M3LedMatrixEcCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3LedMatrixEcCommand_descriptor_;
}

const M3LedMatrixEcCommand& M3LedMatrixEcCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_led_5fmatrix_5fec_2eproto();  return *default_instance_;
}

M3LedMatrixEcCommand* M3LedMatrixEcCommand::default_instance_ = NULL;

M3LedMatrixEcCommand* M3LedMatrixEcCommand::New() const {
  return new M3LedMatrixEcCommand;
}

void M3LedMatrixEcCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enable_ = 0u;
  }
  row_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3LedMatrixEcCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 enable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &enable_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_row;
        break;
      }
      
      // repeated .M3LedMatrixEcRGBRow row = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_row:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_row()));
        if (input->ExpectTag(18)) goto parse_row;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3LedMatrixEcCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3LedMatrixEcCommand::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 enable = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enable(), output);
  }
  
  // repeated .M3LedMatrixEcRGBRow row = 2;
  for (int i = 0; i < this->row_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->row(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3LedMatrixEcCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 enable = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enable(), target);
  }
  
  // repeated .M3LedMatrixEcRGBRow row = 2;
  for (int i = 0; i < this->row_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->row(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3LedMatrixEcCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 enable = 1;
    if (has_enable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enable());
    }
    
  }
  // repeated .M3LedMatrixEcRGBRow row = 2;
  total_size += 1 * this->row_size();
  for (int i = 0; i < this->row_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->row(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3LedMatrixEcCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3LedMatrixEcCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3LedMatrixEcCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3LedMatrixEcCommand::MergeFrom(const M3LedMatrixEcCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  row_.MergeFrom(from.row_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_enable(from.enable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3LedMatrixEcCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3LedMatrixEcCommand::CopyFrom(const M3LedMatrixEcCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3LedMatrixEcCommand::IsInitialized() const {
  
  return true;
}

void M3LedMatrixEcCommand::Swap(M3LedMatrixEcCommand* other) {
  if (other != this) {
    std::swap(enable_, other->enable_);
    row_.Swap(&other->row_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3LedMatrixEcCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3LedMatrixEcCommand_descriptor_;
  metadata.reflection = M3LedMatrixEcCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3LedMatrixEcParam::kSlewRateFieldNumber;
#endif  // !_MSC_VER

M3LedMatrixEcParam::M3LedMatrixEcParam() {
  SharedCtor();
}

void M3LedMatrixEcParam::InitAsDefaultInstance() {
}

M3LedMatrixEcParam::M3LedMatrixEcParam(const M3LedMatrixEcParam& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3LedMatrixEcParam::SharedCtor() {
  _cached_size_ = 0;
  slew_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3LedMatrixEcParam::~M3LedMatrixEcParam() {
  SharedDtor();
}

void M3LedMatrixEcParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* M3LedMatrixEcParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3LedMatrixEcParam_descriptor_;
}

const M3LedMatrixEcParam& M3LedMatrixEcParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_led_5fmatrix_5fec_2eproto();  return *default_instance_;
}

M3LedMatrixEcParam* M3LedMatrixEcParam::default_instance_ = NULL;

M3LedMatrixEcParam* M3LedMatrixEcParam::New() const {
  return new M3LedMatrixEcParam;
}

void M3LedMatrixEcParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slew_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3LedMatrixEcParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double slew_rate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &slew_rate_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3LedMatrixEcParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3LedMatrixEcParam::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional double slew_rate = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->slew_rate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3LedMatrixEcParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double slew_rate = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->slew_rate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3LedMatrixEcParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double slew_rate = 1;
    if (has_slew_rate()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3LedMatrixEcParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3LedMatrixEcParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3LedMatrixEcParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3LedMatrixEcParam::MergeFrom(const M3LedMatrixEcParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_slew_rate(from.slew_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3LedMatrixEcParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3LedMatrixEcParam::CopyFrom(const M3LedMatrixEcParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3LedMatrixEcParam::IsInitialized() const {
  
  return true;
}

void M3LedMatrixEcParam::Swap(M3LedMatrixEcParam* other) {
  if (other != this) {
    std::swap(slew_rate_, other->slew_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3LedMatrixEcParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3LedMatrixEcParam_descriptor_;
  metadata.reflection = M3LedMatrixEcParam_reflection_;
  return metadata;
}

