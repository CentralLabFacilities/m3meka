// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "actuator_ec.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* M3ActuatorEcStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3ActuatorEcStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3ActuatorEcCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3ActuatorEcCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3ActuatorEcParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3ActuatorEcParam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ACTUATOR_EC_MODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ACTUATOR_EC_FLAG_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ACTUATOR_EC_CONFIG_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_actuator_5fec_2eproto() {
  protobuf_AddDesc_actuator_5fec_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "actuator_ec.proto");
  GOOGLE_CHECK(file != NULL);
  M3ActuatorEcStatus_descriptor_ = file->message_type(0);
  static const int M3ActuatorEcStatus_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcStatus, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcStatus, ethercat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcStatus, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcStatus, qei_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcStatus, qei_rollover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcStatus, qei_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcStatus, debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcStatus, adc_torque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcStatus, adc_ext_temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcStatus, adc_amp_temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcStatus, adc_current_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcStatus, adc_current_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcStatus, adc_ext_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcStatus, adc_ext_b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcStatus, pwm_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcStatus, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcStatus, current_ma_),
  };
  M3ActuatorEcStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3ActuatorEcStatus_descriptor_,
      M3ActuatorEcStatus::default_instance_,
      M3ActuatorEcStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3ActuatorEcStatus));
  M3ActuatorEcCommand_descriptor_ = file->message_type(1);
  static const int M3ActuatorEcCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcCommand, t_desire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcCommand, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcCommand, brake_off_),
  };
  M3ActuatorEcCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3ActuatorEcCommand_descriptor_,
      M3ActuatorEcCommand::default_instance_,
      M3ActuatorEcCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3ActuatorEcCommand));
  M3ActuatorEcParam_descriptor_ = file->message_type(2);
  static const int M3ActuatorEcParam_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcParam, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcParam, k_p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcParam, k_i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcParam, k_d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcParam, k_p_shift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcParam, k_i_shift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcParam, k_d_shift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcParam, k_i_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcParam, t_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcParam, t_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcParam, pwm_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcParam, qei_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcParam, qei_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcParam, k_ff_zero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcParam, k_ff_shift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcParam, k_ff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcParam, pwm_db_),
  };
  M3ActuatorEcParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3ActuatorEcParam_descriptor_,
      M3ActuatorEcParam::default_instance_,
      M3ActuatorEcParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3ActuatorEcParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3ActuatorEcParam));
  ACTUATOR_EC_MODE_descriptor_ = file->enum_type(0);
  ACTUATOR_EC_FLAG_descriptor_ = file->enum_type(1);
  ACTUATOR_EC_CONFIG_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_actuator_5fec_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3ActuatorEcStatus_descriptor_, &M3ActuatorEcStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3ActuatorEcCommand_descriptor_, &M3ActuatorEcCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3ActuatorEcParam_descriptor_, &M3ActuatorEcParam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_actuator_5fec_2eproto() {
  delete M3ActuatorEcStatus::default_instance_;
  delete M3ActuatorEcStatus_reflection_;
  delete M3ActuatorEcCommand::default_instance_;
  delete M3ActuatorEcCommand_reflection_;
  delete M3ActuatorEcParam::default_instance_;
  delete M3ActuatorEcParam_reflection_;
}

void protobuf_AddDesc_actuator_5fec_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_component_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021actuator_ec.proto\032\024component_base.prot"
    "o\"\372\002\n\022M3ActuatorEcStatus\022\033\n\004base\030\001 \001(\0132\r"
    ".M3BaseStatus\022#\n\010ethercat\030\002 \001(\0132\021.M3Ethe"
    "rCATStatus\022\021\n\ttimestamp\030\003 \001(\004\022\016\n\006qei_on\030"
    "\004 \001(\005\022\024\n\014qei_rollover\030\005 \001(\005\022\022\n\nqei_perio"
    "d\030\006 \001(\005\022\r\n\005debug\030\007 \001(\005\022\022\n\nadc_torque\030\010 \001"
    "(\005\022\024\n\014adc_ext_temp\030\t \001(\005\022\024\n\014adc_amp_temp"
    "\030\n \001(\005\022\025\n\radc_current_a\030\013 \001(\005\022\025\n\radc_cur"
    "rent_b\030\014 \001(\005\022\021\n\tadc_ext_a\030\r \001(\005\022\021\n\tadc_e"
    "xt_b\030\016 \001(\005\022\017\n\007pwm_cmd\030\017 \001(\005\022\r\n\005flags\030\020 \001"
    "(\005\022\022\n\ncurrent_ma\030\021 \001(\005\"[\n\023M3ActuatorEcCo"
    "mmand\022\020\n\010t_desire\030\001 \001(\005\022\037\n\004mode\030\002 \001(\0162\021."
    "ACTUATOR_EC_MODE\022\021\n\tbrake_off\030\003 \001(\010\"\254\002\n\021"
    "M3ActuatorEcParam\022\016\n\006config\030\001 \001(\005\022\013\n\003k_p"
    "\030\002 \001(\005\022\013\n\003k_i\030\003 \001(\005\022\013\n\003k_d\030\004 \001(\005\022\021\n\tk_p_"
    "shift\030\005 \001(\005\022\021\n\tk_i_shift\030\006 \001(\005\022\021\n\tk_d_sh"
    "ift\030\007 \001(\005\022\021\n\tk_i_limit\030\010 \001(\005\022\r\n\005t_max\030\t "
    "\001(\005\022\r\n\005t_min\030\n \001(\005\022\017\n\007pwm_max\030\013 \001(\005\022\017\n\007q"
    "ei_max\030\014 \001(\005\022\017\n\007qei_min\030\r \001(\005\022\021\n\tk_ff_ze"
    "ro\030\016 \001(\005\022\022\n\nk_ff_shift\030\017 \001(\005\022\014\n\004k_ff\030\020 \001"
    "(\005\022\016\n\006pwm_db\030\021 \001(\005*\201\001\n\020ACTUATOR_EC_MODE\022"
    "\030\n\024ACTUATOR_EC_MODE_OFF\020\000\022\030\n\024ACTUATOR_EC"
    "_MODE_PWM\020\001\022\033\n\027ACTUATOR_EC_MODE_TORQUE\020\002"
    "\022\034\n\030ACTUATOR_EC_MODE_CURRENT\020\003*\351\001\n\020ACTUA"
    "TOR_EC_FLAG\022$\n ACTUATOR_EC_FLAG_POS_LIMI"
    "TSWITCH\020\001\022$\n ACTUATOR_EC_FLAG_NEG_LIMITS"
    "WITCH\020\002\022#\n\037ACTUATOR_EC_FLAG_QEI_CALIBRAT"
    "ED\020\004\022\037\n\033ACTUATOR_EC_FLAG_AUX_SWITCH\020\010\022!\n"
    "\035ACTUATOR_EC_FLAG_I_FAULT_CONT\020\020\022 \n\034ACTU"
    "ATOR_EC_FLAG_I_FAULT_MOM\020 *\335\003\n\022ACTUATOR_"
    "EC_CONFIG\022$\n ACTUATOR_EC_CONFIG_TORQUE_S"
    "MOOTH\020\002\022!\n\035ACTUATOR_EC_CONFIG_ENC_BOUNDS"
    "\020\020\022#\n\037ACTUATOR_EC_CONFIG_PWM_FWD_SIGN\020 \022"
    " \n\034ACTUATOR_EC_CONFIG_BRAKE_OFF\020@\022(\n#ACT"
    "UATOR_EC_CONFIG_VERTX_FILTER_OFF\020\200\001\022,\n\'A"
    "CTUATOR_EC_CONFIG_LIMITSWITCH_STOP_POS\020\200"
    "\002\022,\n\'ACTUATOR_EC_CONFIG_LIMITSWITCH_STOP"
    "_NEG\020\200\004\0221\n,ACTUATOR_EC_CONFIG_CALIB_QEI_"
    "LIMITSWITCH_POS\020\200\010\0221\n,ACTUATOR_EC_CONFIG"
    "_CALIB_QEI_LIMITSWITCH_NEG\020\200\020\022!\n\034ACTUATO"
    "R_EC_CONFIG_TORQUE_FF\020\200 \022(\n#ACTUATOR_EC_"
    "CONFIG_CALIB_QEI_MANUAL\020\200@B\002H\001", 1670);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "actuator_ec.proto", &protobuf_RegisterTypes);
  M3ActuatorEcStatus::default_instance_ = new M3ActuatorEcStatus();
  M3ActuatorEcCommand::default_instance_ = new M3ActuatorEcCommand();
  M3ActuatorEcParam::default_instance_ = new M3ActuatorEcParam();
  M3ActuatorEcStatus::default_instance_->InitAsDefaultInstance();
  M3ActuatorEcCommand::default_instance_->InitAsDefaultInstance();
  M3ActuatorEcParam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_actuator_5fec_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_actuator_5fec_2eproto {
  StaticDescriptorInitializer_actuator_5fec_2eproto() {
    protobuf_AddDesc_actuator_5fec_2eproto();
  }
} static_descriptor_initializer_actuator_5fec_2eproto_;

const ::google::protobuf::EnumDescriptor* ACTUATOR_EC_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACTUATOR_EC_MODE_descriptor_;
}
bool ACTUATOR_EC_MODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ACTUATOR_EC_FLAG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACTUATOR_EC_FLAG_descriptor_;
}
bool ACTUATOR_EC_FLAG_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ACTUATOR_EC_CONFIG_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACTUATOR_EC_CONFIG_descriptor_;
}
bool ACTUATOR_EC_CONFIG_IsValid(int value) {
  switch(value) {
    case 2:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int M3ActuatorEcStatus::kBaseFieldNumber;
const int M3ActuatorEcStatus::kEthercatFieldNumber;
const int M3ActuatorEcStatus::kTimestampFieldNumber;
const int M3ActuatorEcStatus::kQeiOnFieldNumber;
const int M3ActuatorEcStatus::kQeiRolloverFieldNumber;
const int M3ActuatorEcStatus::kQeiPeriodFieldNumber;
const int M3ActuatorEcStatus::kDebugFieldNumber;
const int M3ActuatorEcStatus::kAdcTorqueFieldNumber;
const int M3ActuatorEcStatus::kAdcExtTempFieldNumber;
const int M3ActuatorEcStatus::kAdcAmpTempFieldNumber;
const int M3ActuatorEcStatus::kAdcCurrentAFieldNumber;
const int M3ActuatorEcStatus::kAdcCurrentBFieldNumber;
const int M3ActuatorEcStatus::kAdcExtAFieldNumber;
const int M3ActuatorEcStatus::kAdcExtBFieldNumber;
const int M3ActuatorEcStatus::kPwmCmdFieldNumber;
const int M3ActuatorEcStatus::kFlagsFieldNumber;
const int M3ActuatorEcStatus::kCurrentMaFieldNumber;
#endif  // !_MSC_VER

M3ActuatorEcStatus::M3ActuatorEcStatus() {
  SharedCtor();
}

void M3ActuatorEcStatus::InitAsDefaultInstance() {
  base_ = const_cast< ::M3BaseStatus*>(&::M3BaseStatus::default_instance());
  ethercat_ = const_cast< ::M3EtherCATStatus*>(&::M3EtherCATStatus::default_instance());
}

M3ActuatorEcStatus::M3ActuatorEcStatus(const M3ActuatorEcStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3ActuatorEcStatus::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  ethercat_ = NULL;
  timestamp_ = GOOGLE_ULONGLONG(0);
  qei_on_ = 0;
  qei_rollover_ = 0;
  qei_period_ = 0;
  debug_ = 0;
  adc_torque_ = 0;
  adc_ext_temp_ = 0;
  adc_amp_temp_ = 0;
  adc_current_a_ = 0;
  adc_current_b_ = 0;
  adc_ext_a_ = 0;
  adc_ext_b_ = 0;
  pwm_cmd_ = 0;
  flags_ = 0;
  current_ma_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3ActuatorEcStatus::~M3ActuatorEcStatus() {
  SharedDtor();
}

void M3ActuatorEcStatus::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete ethercat_;
  }
}

const ::google::protobuf::Descriptor* M3ActuatorEcStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3ActuatorEcStatus_descriptor_;
}

const M3ActuatorEcStatus& M3ActuatorEcStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_actuator_5fec_2eproto();  return *default_instance_;
}

M3ActuatorEcStatus* M3ActuatorEcStatus::default_instance_ = NULL;

M3ActuatorEcStatus* M3ActuatorEcStatus::New() const {
  return new M3ActuatorEcStatus;
}

void M3ActuatorEcStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (base_ != NULL) base_->::M3BaseStatus::Clear();
    }
    if (_has_bit(1)) {
      if (ethercat_ != NULL) ethercat_->::M3EtherCATStatus::Clear();
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
    qei_on_ = 0;
    qei_rollover_ = 0;
    qei_period_ = 0;
    debug_ = 0;
    adc_torque_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    adc_ext_temp_ = 0;
    adc_amp_temp_ = 0;
    adc_current_a_ = 0;
    adc_current_b_ = 0;
    adc_ext_a_ = 0;
    adc_ext_b_ = 0;
    pwm_cmd_ = 0;
    flags_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    current_ma_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3ActuatorEcStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseStatus base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_base()));
        if (input->ExpectTag(18)) goto parse_ethercat;
        break;
      }
      
      // optional .M3EtherCATStatus ethercat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_ethercat:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_ethercat()));
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }
      
      // optional uint64 timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_timestamp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt64(
              input, &timestamp_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_qei_on;
        break;
      }
      
      // optional int32 qei_on = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_qei_on:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &qei_on_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_qei_rollover;
        break;
      }
      
      // optional int32 qei_rollover = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_qei_rollover:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &qei_rollover_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_qei_period;
        break;
      }
      
      // optional int32 qei_period = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_qei_period:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &qei_period_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_debug;
        break;
      }
      
      // optional int32 debug = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_debug:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &debug_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_adc_torque;
        break;
      }
      
      // optional int32 adc_torque = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adc_torque:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adc_torque_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_adc_ext_temp;
        break;
      }
      
      // optional int32 adc_ext_temp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adc_ext_temp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adc_ext_temp_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_adc_amp_temp;
        break;
      }
      
      // optional int32 adc_amp_temp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adc_amp_temp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adc_amp_temp_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_adc_current_a;
        break;
      }
      
      // optional int32 adc_current_a = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adc_current_a:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adc_current_a_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_adc_current_b;
        break;
      }
      
      // optional int32 adc_current_b = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adc_current_b:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adc_current_b_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_adc_ext_a;
        break;
      }
      
      // optional int32 adc_ext_a = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adc_ext_a:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adc_ext_a_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_adc_ext_b;
        break;
      }
      
      // optional int32 adc_ext_b = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_adc_ext_b:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &adc_ext_b_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_pwm_cmd;
        break;
      }
      
      // optional int32 pwm_cmd = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pwm_cmd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pwm_cmd_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_flags;
        break;
      }
      
      // optional int32 flags = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_flags:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &flags_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_current_ma;
        break;
      }
      
      // optional int32 current_ma = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_current_ma:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &current_ma_));
        _set_bit(16);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3ActuatorEcStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3ActuatorEcStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .M3BaseStatus base = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->base(), output);
  }
  
  // optional .M3EtherCATStatus ethercat = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->ethercat(), output);
  }
  
  // optional uint64 timestamp = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }
  
  // optional int32 qei_on = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->qei_on(), output);
  }
  
  // optional int32 qei_rollover = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->qei_rollover(), output);
  }
  
  // optional int32 qei_period = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->qei_period(), output);
  }
  
  // optional int32 debug = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->debug(), output);
  }
  
  // optional int32 adc_torque = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->adc_torque(), output);
  }
  
  // optional int32 adc_ext_temp = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->adc_ext_temp(), output);
  }
  
  // optional int32 adc_amp_temp = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->adc_amp_temp(), output);
  }
  
  // optional int32 adc_current_a = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->adc_current_a(), output);
  }
  
  // optional int32 adc_current_b = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->adc_current_b(), output);
  }
  
  // optional int32 adc_ext_a = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->adc_ext_a(), output);
  }
  
  // optional int32 adc_ext_b = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->adc_ext_b(), output);
  }
  
  // optional int32 pwm_cmd = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->pwm_cmd(), output);
  }
  
  // optional int32 flags = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->flags(), output);
  }
  
  // optional int32 current_ma = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->current_ma(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3ActuatorEcStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseStatus base = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional .M3EtherCATStatus ethercat = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ethercat(), target);
  }
  
  // optional uint64 timestamp = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }
  
  // optional int32 qei_on = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->qei_on(), target);
  }
  
  // optional int32 qei_rollover = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->qei_rollover(), target);
  }
  
  // optional int32 qei_period = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->qei_period(), target);
  }
  
  // optional int32 debug = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->debug(), target);
  }
  
  // optional int32 adc_torque = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->adc_torque(), target);
  }
  
  // optional int32 adc_ext_temp = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->adc_ext_temp(), target);
  }
  
  // optional int32 adc_amp_temp = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->adc_amp_temp(), target);
  }
  
  // optional int32 adc_current_a = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->adc_current_a(), target);
  }
  
  // optional int32 adc_current_b = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->adc_current_b(), target);
  }
  
  // optional int32 adc_ext_a = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->adc_ext_a(), target);
  }
  
  // optional int32 adc_ext_b = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->adc_ext_b(), target);
  }
  
  // optional int32 pwm_cmd = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->pwm_cmd(), target);
  }
  
  // optional int32 flags = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->flags(), target);
  }
  
  // optional int32 current_ma = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->current_ma(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3ActuatorEcStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseStatus base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional .M3EtherCATStatus ethercat = 2;
    if (has_ethercat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ethercat());
    }
    
    // optional uint64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }
    
    // optional int32 qei_on = 4;
    if (has_qei_on()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qei_on());
    }
    
    // optional int32 qei_rollover = 5;
    if (has_qei_rollover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qei_rollover());
    }
    
    // optional int32 qei_period = 6;
    if (has_qei_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qei_period());
    }
    
    // optional int32 debug = 7;
    if (has_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->debug());
    }
    
    // optional int32 adc_torque = 8;
    if (has_adc_torque()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_torque());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 adc_ext_temp = 9;
    if (has_adc_ext_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_ext_temp());
    }
    
    // optional int32 adc_amp_temp = 10;
    if (has_adc_amp_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_amp_temp());
    }
    
    // optional int32 adc_current_a = 11;
    if (has_adc_current_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_current_a());
    }
    
    // optional int32 adc_current_b = 12;
    if (has_adc_current_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_current_b());
    }
    
    // optional int32 adc_ext_a = 13;
    if (has_adc_ext_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_ext_a());
    }
    
    // optional int32 adc_ext_b = 14;
    if (has_adc_ext_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_ext_b());
    }
    
    // optional int32 pwm_cmd = 15;
    if (has_pwm_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pwm_cmd());
    }
    
    // optional int32 flags = 16;
    if (has_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 current_ma = 17;
    if (has_current_ma()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_ma());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3ActuatorEcStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3ActuatorEcStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3ActuatorEcStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3ActuatorEcStatus::MergeFrom(const M3ActuatorEcStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_base()->::M3BaseStatus::MergeFrom(from.base());
    }
    if (from._has_bit(1)) {
      mutable_ethercat()->::M3EtherCATStatus::MergeFrom(from.ethercat());
    }
    if (from._has_bit(2)) {
      set_timestamp(from.timestamp());
    }
    if (from._has_bit(3)) {
      set_qei_on(from.qei_on());
    }
    if (from._has_bit(4)) {
      set_qei_rollover(from.qei_rollover());
    }
    if (from._has_bit(5)) {
      set_qei_period(from.qei_period());
    }
    if (from._has_bit(6)) {
      set_debug(from.debug());
    }
    if (from._has_bit(7)) {
      set_adc_torque(from.adc_torque());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_adc_ext_temp(from.adc_ext_temp());
    }
    if (from._has_bit(9)) {
      set_adc_amp_temp(from.adc_amp_temp());
    }
    if (from._has_bit(10)) {
      set_adc_current_a(from.adc_current_a());
    }
    if (from._has_bit(11)) {
      set_adc_current_b(from.adc_current_b());
    }
    if (from._has_bit(12)) {
      set_adc_ext_a(from.adc_ext_a());
    }
    if (from._has_bit(13)) {
      set_adc_ext_b(from.adc_ext_b());
    }
    if (from._has_bit(14)) {
      set_pwm_cmd(from.pwm_cmd());
    }
    if (from._has_bit(15)) {
      set_flags(from.flags());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_current_ma(from.current_ma());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3ActuatorEcStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3ActuatorEcStatus::CopyFrom(const M3ActuatorEcStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3ActuatorEcStatus::IsInitialized() const {
  
  return true;
}

void M3ActuatorEcStatus::Swap(M3ActuatorEcStatus* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(ethercat_, other->ethercat_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(qei_on_, other->qei_on_);
    std::swap(qei_rollover_, other->qei_rollover_);
    std::swap(qei_period_, other->qei_period_);
    std::swap(debug_, other->debug_);
    std::swap(adc_torque_, other->adc_torque_);
    std::swap(adc_ext_temp_, other->adc_ext_temp_);
    std::swap(adc_amp_temp_, other->adc_amp_temp_);
    std::swap(adc_current_a_, other->adc_current_a_);
    std::swap(adc_current_b_, other->adc_current_b_);
    std::swap(adc_ext_a_, other->adc_ext_a_);
    std::swap(adc_ext_b_, other->adc_ext_b_);
    std::swap(pwm_cmd_, other->pwm_cmd_);
    std::swap(flags_, other->flags_);
    std::swap(current_ma_, other->current_ma_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3ActuatorEcStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3ActuatorEcStatus_descriptor_;
  metadata.reflection = M3ActuatorEcStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3ActuatorEcCommand::kTDesireFieldNumber;
const int M3ActuatorEcCommand::kModeFieldNumber;
const int M3ActuatorEcCommand::kBrakeOffFieldNumber;
#endif  // !_MSC_VER

M3ActuatorEcCommand::M3ActuatorEcCommand() {
  SharedCtor();
}

void M3ActuatorEcCommand::InitAsDefaultInstance() {
}

M3ActuatorEcCommand::M3ActuatorEcCommand(const M3ActuatorEcCommand& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3ActuatorEcCommand::SharedCtor() {
  _cached_size_ = 0;
  t_desire_ = 0;
  mode_ = 0;
  brake_off_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3ActuatorEcCommand::~M3ActuatorEcCommand() {
  SharedDtor();
}

void M3ActuatorEcCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* M3ActuatorEcCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3ActuatorEcCommand_descriptor_;
}

const M3ActuatorEcCommand& M3ActuatorEcCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_actuator_5fec_2eproto();  return *default_instance_;
}

M3ActuatorEcCommand* M3ActuatorEcCommand::default_instance_ = NULL;

M3ActuatorEcCommand* M3ActuatorEcCommand::New() const {
  return new M3ActuatorEcCommand;
}

void M3ActuatorEcCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    t_desire_ = 0;
    mode_ = 0;
    brake_off_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3ActuatorEcCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 t_desire = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &t_desire_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }
      
      // optional .ACTUATOR_EC_MODE mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mode:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (ACTUATOR_EC_MODE_IsValid(value)) {
          set_mode(static_cast< ACTUATOR_EC_MODE >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectTag(24)) goto parse_brake_off;
        break;
      }
      
      // optional bool brake_off = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_brake_off:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &brake_off_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3ActuatorEcCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3ActuatorEcCommand::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 t_desire = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->t_desire(), output);
  }
  
  // optional .ACTUATOR_EC_MODE mode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }
  
  // optional bool brake_off = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->brake_off(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3ActuatorEcCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 t_desire = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->t_desire(), target);
  }
  
  // optional .ACTUATOR_EC_MODE mode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }
  
  // optional bool brake_off = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->brake_off(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3ActuatorEcCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 t_desire = 1;
    if (has_t_desire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->t_desire());
    }
    
    // optional .ACTUATOR_EC_MODE mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }
    
    // optional bool brake_off = 3;
    if (has_brake_off()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3ActuatorEcCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3ActuatorEcCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3ActuatorEcCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3ActuatorEcCommand::MergeFrom(const M3ActuatorEcCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_t_desire(from.t_desire());
    }
    if (from._has_bit(1)) {
      set_mode(from.mode());
    }
    if (from._has_bit(2)) {
      set_brake_off(from.brake_off());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3ActuatorEcCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3ActuatorEcCommand::CopyFrom(const M3ActuatorEcCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3ActuatorEcCommand::IsInitialized() const {
  
  return true;
}

void M3ActuatorEcCommand::Swap(M3ActuatorEcCommand* other) {
  if (other != this) {
    std::swap(t_desire_, other->t_desire_);
    std::swap(mode_, other->mode_);
    std::swap(brake_off_, other->brake_off_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3ActuatorEcCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3ActuatorEcCommand_descriptor_;
  metadata.reflection = M3ActuatorEcCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3ActuatorEcParam::kConfigFieldNumber;
const int M3ActuatorEcParam::kKPFieldNumber;
const int M3ActuatorEcParam::kKIFieldNumber;
const int M3ActuatorEcParam::kKDFieldNumber;
const int M3ActuatorEcParam::kKPShiftFieldNumber;
const int M3ActuatorEcParam::kKIShiftFieldNumber;
const int M3ActuatorEcParam::kKDShiftFieldNumber;
const int M3ActuatorEcParam::kKILimitFieldNumber;
const int M3ActuatorEcParam::kTMaxFieldNumber;
const int M3ActuatorEcParam::kTMinFieldNumber;
const int M3ActuatorEcParam::kPwmMaxFieldNumber;
const int M3ActuatorEcParam::kQeiMaxFieldNumber;
const int M3ActuatorEcParam::kQeiMinFieldNumber;
const int M3ActuatorEcParam::kKFfZeroFieldNumber;
const int M3ActuatorEcParam::kKFfShiftFieldNumber;
const int M3ActuatorEcParam::kKFfFieldNumber;
const int M3ActuatorEcParam::kPwmDbFieldNumber;
#endif  // !_MSC_VER

M3ActuatorEcParam::M3ActuatorEcParam() {
  SharedCtor();
}

void M3ActuatorEcParam::InitAsDefaultInstance() {
}

M3ActuatorEcParam::M3ActuatorEcParam(const M3ActuatorEcParam& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3ActuatorEcParam::SharedCtor() {
  _cached_size_ = 0;
  config_ = 0;
  k_p_ = 0;
  k_i_ = 0;
  k_d_ = 0;
  k_p_shift_ = 0;
  k_i_shift_ = 0;
  k_d_shift_ = 0;
  k_i_limit_ = 0;
  t_max_ = 0;
  t_min_ = 0;
  pwm_max_ = 0;
  qei_max_ = 0;
  qei_min_ = 0;
  k_ff_zero_ = 0;
  k_ff_shift_ = 0;
  k_ff_ = 0;
  pwm_db_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3ActuatorEcParam::~M3ActuatorEcParam() {
  SharedDtor();
}

void M3ActuatorEcParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* M3ActuatorEcParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3ActuatorEcParam_descriptor_;
}

const M3ActuatorEcParam& M3ActuatorEcParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_actuator_5fec_2eproto();  return *default_instance_;
}

M3ActuatorEcParam* M3ActuatorEcParam::default_instance_ = NULL;

M3ActuatorEcParam* M3ActuatorEcParam::New() const {
  return new M3ActuatorEcParam;
}

void M3ActuatorEcParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    config_ = 0;
    k_p_ = 0;
    k_i_ = 0;
    k_d_ = 0;
    k_p_shift_ = 0;
    k_i_shift_ = 0;
    k_d_shift_ = 0;
    k_i_limit_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    t_max_ = 0;
    t_min_ = 0;
    pwm_max_ = 0;
    qei_max_ = 0;
    qei_min_ = 0;
    k_ff_zero_ = 0;
    k_ff_shift_ = 0;
    k_ff_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    pwm_db_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3ActuatorEcParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 config = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &config_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_k_p;
        break;
      }
      
      // optional int32 k_p = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_k_p:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &k_p_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_k_i;
        break;
      }
      
      // optional int32 k_i = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_k_i:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &k_i_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_k_d;
        break;
      }
      
      // optional int32 k_d = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_k_d:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &k_d_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_k_p_shift;
        break;
      }
      
      // optional int32 k_p_shift = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_k_p_shift:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &k_p_shift_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_k_i_shift;
        break;
      }
      
      // optional int32 k_i_shift = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_k_i_shift:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &k_i_shift_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_k_d_shift;
        break;
      }
      
      // optional int32 k_d_shift = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_k_d_shift:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &k_d_shift_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_k_i_limit;
        break;
      }
      
      // optional int32 k_i_limit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_k_i_limit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &k_i_limit_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_t_max;
        break;
      }
      
      // optional int32 t_max = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_t_max:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &t_max_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_t_min;
        break;
      }
      
      // optional int32 t_min = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_t_min:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &t_min_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_pwm_max;
        break;
      }
      
      // optional int32 pwm_max = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pwm_max:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pwm_max_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_qei_max;
        break;
      }
      
      // optional int32 qei_max = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_qei_max:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &qei_max_));
        _set_bit(11);
        if (input->ExpectTag(104)) goto parse_qei_min;
        break;
      }
      
      // optional int32 qei_min = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_qei_min:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &qei_min_));
        _set_bit(12);
        if (input->ExpectTag(112)) goto parse_k_ff_zero;
        break;
      }
      
      // optional int32 k_ff_zero = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_k_ff_zero:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &k_ff_zero_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_k_ff_shift;
        break;
      }
      
      // optional int32 k_ff_shift = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_k_ff_shift:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &k_ff_shift_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_k_ff;
        break;
      }
      
      // optional int32 k_ff = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_k_ff:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &k_ff_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_pwm_db;
        break;
      }
      
      // optional int32 pwm_db = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pwm_db:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pwm_db_));
        _set_bit(16);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3ActuatorEcParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3ActuatorEcParam::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 config = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->config(), output);
  }
  
  // optional int32 k_p = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->k_p(), output);
  }
  
  // optional int32 k_i = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->k_i(), output);
  }
  
  // optional int32 k_d = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->k_d(), output);
  }
  
  // optional int32 k_p_shift = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->k_p_shift(), output);
  }
  
  // optional int32 k_i_shift = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->k_i_shift(), output);
  }
  
  // optional int32 k_d_shift = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->k_d_shift(), output);
  }
  
  // optional int32 k_i_limit = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->k_i_limit(), output);
  }
  
  // optional int32 t_max = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->t_max(), output);
  }
  
  // optional int32 t_min = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->t_min(), output);
  }
  
  // optional int32 pwm_max = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->pwm_max(), output);
  }
  
  // optional int32 qei_max = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->qei_max(), output);
  }
  
  // optional int32 qei_min = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->qei_min(), output);
  }
  
  // optional int32 k_ff_zero = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->k_ff_zero(), output);
  }
  
  // optional int32 k_ff_shift = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->k_ff_shift(), output);
  }
  
  // optional int32 k_ff = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->k_ff(), output);
  }
  
  // optional int32 pwm_db = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->pwm_db(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3ActuatorEcParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 config = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->config(), target);
  }
  
  // optional int32 k_p = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->k_p(), target);
  }
  
  // optional int32 k_i = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->k_i(), target);
  }
  
  // optional int32 k_d = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->k_d(), target);
  }
  
  // optional int32 k_p_shift = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->k_p_shift(), target);
  }
  
  // optional int32 k_i_shift = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->k_i_shift(), target);
  }
  
  // optional int32 k_d_shift = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->k_d_shift(), target);
  }
  
  // optional int32 k_i_limit = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->k_i_limit(), target);
  }
  
  // optional int32 t_max = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->t_max(), target);
  }
  
  // optional int32 t_min = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->t_min(), target);
  }
  
  // optional int32 pwm_max = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->pwm_max(), target);
  }
  
  // optional int32 qei_max = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->qei_max(), target);
  }
  
  // optional int32 qei_min = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->qei_min(), target);
  }
  
  // optional int32 k_ff_zero = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->k_ff_zero(), target);
  }
  
  // optional int32 k_ff_shift = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->k_ff_shift(), target);
  }
  
  // optional int32 k_ff = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->k_ff(), target);
  }
  
  // optional int32 pwm_db = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->pwm_db(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3ActuatorEcParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 config = 1;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config());
    }
    
    // optional int32 k_p = 2;
    if (has_k_p()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->k_p());
    }
    
    // optional int32 k_i = 3;
    if (has_k_i()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->k_i());
    }
    
    // optional int32 k_d = 4;
    if (has_k_d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->k_d());
    }
    
    // optional int32 k_p_shift = 5;
    if (has_k_p_shift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->k_p_shift());
    }
    
    // optional int32 k_i_shift = 6;
    if (has_k_i_shift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->k_i_shift());
    }
    
    // optional int32 k_d_shift = 7;
    if (has_k_d_shift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->k_d_shift());
    }
    
    // optional int32 k_i_limit = 8;
    if (has_k_i_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->k_i_limit());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 t_max = 9;
    if (has_t_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->t_max());
    }
    
    // optional int32 t_min = 10;
    if (has_t_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->t_min());
    }
    
    // optional int32 pwm_max = 11;
    if (has_pwm_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pwm_max());
    }
    
    // optional int32 qei_max = 12;
    if (has_qei_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qei_max());
    }
    
    // optional int32 qei_min = 13;
    if (has_qei_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qei_min());
    }
    
    // optional int32 k_ff_zero = 14;
    if (has_k_ff_zero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->k_ff_zero());
    }
    
    // optional int32 k_ff_shift = 15;
    if (has_k_ff_shift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->k_ff_shift());
    }
    
    // optional int32 k_ff = 16;
    if (has_k_ff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->k_ff());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 pwm_db = 17;
    if (has_pwm_db()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pwm_db());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3ActuatorEcParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3ActuatorEcParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3ActuatorEcParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3ActuatorEcParam::MergeFrom(const M3ActuatorEcParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_config(from.config());
    }
    if (from._has_bit(1)) {
      set_k_p(from.k_p());
    }
    if (from._has_bit(2)) {
      set_k_i(from.k_i());
    }
    if (from._has_bit(3)) {
      set_k_d(from.k_d());
    }
    if (from._has_bit(4)) {
      set_k_p_shift(from.k_p_shift());
    }
    if (from._has_bit(5)) {
      set_k_i_shift(from.k_i_shift());
    }
    if (from._has_bit(6)) {
      set_k_d_shift(from.k_d_shift());
    }
    if (from._has_bit(7)) {
      set_k_i_limit(from.k_i_limit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_t_max(from.t_max());
    }
    if (from._has_bit(9)) {
      set_t_min(from.t_min());
    }
    if (from._has_bit(10)) {
      set_pwm_max(from.pwm_max());
    }
    if (from._has_bit(11)) {
      set_qei_max(from.qei_max());
    }
    if (from._has_bit(12)) {
      set_qei_min(from.qei_min());
    }
    if (from._has_bit(13)) {
      set_k_ff_zero(from.k_ff_zero());
    }
    if (from._has_bit(14)) {
      set_k_ff_shift(from.k_ff_shift());
    }
    if (from._has_bit(15)) {
      set_k_ff(from.k_ff());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_pwm_db(from.pwm_db());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3ActuatorEcParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3ActuatorEcParam::CopyFrom(const M3ActuatorEcParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3ActuatorEcParam::IsInitialized() const {
  
  return true;
}

void M3ActuatorEcParam::Swap(M3ActuatorEcParam* other) {
  if (other != this) {
    std::swap(config_, other->config_);
    std::swap(k_p_, other->k_p_);
    std::swap(k_i_, other->k_i_);
    std::swap(k_d_, other->k_d_);
    std::swap(k_p_shift_, other->k_p_shift_);
    std::swap(k_i_shift_, other->k_i_shift_);
    std::swap(k_d_shift_, other->k_d_shift_);
    std::swap(k_i_limit_, other->k_i_limit_);
    std::swap(t_max_, other->t_max_);
    std::swap(t_min_, other->t_min_);
    std::swap(pwm_max_, other->pwm_max_);
    std::swap(qei_max_, other->qei_max_);
    std::swap(qei_min_, other->qei_min_);
    std::swap(k_ff_zero_, other->k_ff_zero_);
    std::swap(k_ff_shift_, other->k_ff_shift_);
    std::swap(k_ff_, other->k_ff_);
    std::swap(pwm_db_, other->pwm_db_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3ActuatorEcParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3ActuatorEcParam_descriptor_;
  metadata.reflection = M3ActuatorEcParam_reflection_;
  return metadata;
}

