// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_led_5fmatrix_5fec_2eproto__INCLUDED
#define PROTOBUF_led_5fmatrix_5fec_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "component_base.pb.h"

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_led_5fmatrix_5fec_2eproto();
void protobuf_AssignDesc_led_5fmatrix_5fec_2eproto();
void protobuf_ShutdownFile_led_5fmatrix_5fec_2eproto();

class M3LedMatrixEcStatus;
class M3LedMatrixEcRGB;
class M3LedMatrixEcRGBRow;
class M3LedMatrixEcCommand;
class M3LedMatrixEcParam;

// ===================================================================

class M3LedMatrixEcStatus : public ::google::protobuf::Message {
 public:
  M3LedMatrixEcStatus();
  virtual ~M3LedMatrixEcStatus();
  
  M3LedMatrixEcStatus(const M3LedMatrixEcStatus& from);
  
  inline M3LedMatrixEcStatus& operator=(const M3LedMatrixEcStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3LedMatrixEcStatus& default_instance();
  void Swap(M3LedMatrixEcStatus* other);
  
  // implements Message ----------------------------------------------
  
  M3LedMatrixEcStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3LedMatrixEcStatus& from);
  void MergeFrom(const M3LedMatrixEcStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .M3BaseStatus base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::M3BaseStatus& base() const;
  inline ::M3BaseStatus* mutable_base();
  
  // optional .M3EtherCATStatus ethercat = 2;
  inline bool has_ethercat() const;
  inline void clear_ethercat();
  static const int kEthercatFieldNumber = 2;
  inline const ::M3EtherCATStatus& ethercat() const;
  inline ::M3EtherCATStatus* mutable_ethercat();
  
  // optional int32 timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);
  
  // optional int32 debug = 4;
  inline bool has_debug() const;
  inline void clear_debug();
  static const int kDebugFieldNumber = 4;
  inline ::google::protobuf::int32 debug() const;
  inline void set_debug(::google::protobuf::int32 value);
  
  // optional int32 flags = 5;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 5;
  inline ::google::protobuf::int32 flags() const;
  inline void set_flags(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::M3BaseStatus* base_;
  ::M3EtherCATStatus* ethercat_;
  ::google::protobuf::int32 timestamp_;
  ::google::protobuf::int32 debug_;
  ::google::protobuf::int32 flags_;
  friend void  protobuf_AddDesc_led_5fmatrix_5fec_2eproto();
  friend void protobuf_AssignDesc_led_5fmatrix_5fec_2eproto();
  friend void protobuf_ShutdownFile_led_5fmatrix_5fec_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3LedMatrixEcStatus* default_instance_;
};
// -------------------------------------------------------------------

class M3LedMatrixEcRGB : public ::google::protobuf::Message {
 public:
  M3LedMatrixEcRGB();
  virtual ~M3LedMatrixEcRGB();
  
  M3LedMatrixEcRGB(const M3LedMatrixEcRGB& from);
  
  inline M3LedMatrixEcRGB& operator=(const M3LedMatrixEcRGB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3LedMatrixEcRGB& default_instance();
  void Swap(M3LedMatrixEcRGB* other);
  
  // implements Message ----------------------------------------------
  
  M3LedMatrixEcRGB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3LedMatrixEcRGB& from);
  void MergeFrom(const M3LedMatrixEcRGB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 r = 1;
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 1;
  inline ::google::protobuf::uint32 r() const;
  inline void set_r(::google::protobuf::uint32 value);
  
  // optional uint32 g = 2;
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 2;
  inline ::google::protobuf::uint32 g() const;
  inline void set_g(::google::protobuf::uint32 value);
  
  // optional uint32 b = 3;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline ::google::protobuf::uint32 b() const;
  inline void set_b(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 r_;
  ::google::protobuf::uint32 g_;
  ::google::protobuf::uint32 b_;
  friend void  protobuf_AddDesc_led_5fmatrix_5fec_2eproto();
  friend void protobuf_AssignDesc_led_5fmatrix_5fec_2eproto();
  friend void protobuf_ShutdownFile_led_5fmatrix_5fec_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3LedMatrixEcRGB* default_instance_;
};
// -------------------------------------------------------------------

class M3LedMatrixEcRGBRow : public ::google::protobuf::Message {
 public:
  M3LedMatrixEcRGBRow();
  virtual ~M3LedMatrixEcRGBRow();
  
  M3LedMatrixEcRGBRow(const M3LedMatrixEcRGBRow& from);
  
  inline M3LedMatrixEcRGBRow& operator=(const M3LedMatrixEcRGBRow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3LedMatrixEcRGBRow& default_instance();
  void Swap(M3LedMatrixEcRGBRow* other);
  
  // implements Message ----------------------------------------------
  
  M3LedMatrixEcRGBRow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3LedMatrixEcRGBRow& from);
  void MergeFrom(const M3LedMatrixEcRGBRow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .M3LedMatrixEcRGB column = 1;
  inline int column_size() const;
  inline void clear_column();
  static const int kColumnFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::M3LedMatrixEcRGB >& column() const;
  inline ::google::protobuf::RepeatedPtrField< ::M3LedMatrixEcRGB >* mutable_column();
  inline const ::M3LedMatrixEcRGB& column(int index) const;
  inline ::M3LedMatrixEcRGB* mutable_column(int index);
  inline ::M3LedMatrixEcRGB* add_column();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::M3LedMatrixEcRGB > column_;
  friend void  protobuf_AddDesc_led_5fmatrix_5fec_2eproto();
  friend void protobuf_AssignDesc_led_5fmatrix_5fec_2eproto();
  friend void protobuf_ShutdownFile_led_5fmatrix_5fec_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3LedMatrixEcRGBRow* default_instance_;
};
// -------------------------------------------------------------------

class M3LedMatrixEcCommand : public ::google::protobuf::Message {
 public:
  M3LedMatrixEcCommand();
  virtual ~M3LedMatrixEcCommand();
  
  M3LedMatrixEcCommand(const M3LedMatrixEcCommand& from);
  
  inline M3LedMatrixEcCommand& operator=(const M3LedMatrixEcCommand& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3LedMatrixEcCommand& default_instance();
  void Swap(M3LedMatrixEcCommand* other);
  
  // implements Message ----------------------------------------------
  
  M3LedMatrixEcCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3LedMatrixEcCommand& from);
  void MergeFrom(const M3LedMatrixEcCommand& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 enable = 1;
  inline bool has_enable() const;
  inline void clear_enable();
  static const int kEnableFieldNumber = 1;
  inline ::google::protobuf::uint32 enable() const;
  inline void set_enable(::google::protobuf::uint32 value);
  
  // repeated .M3LedMatrixEcRGBRow row = 2;
  inline int row_size() const;
  inline void clear_row();
  static const int kRowFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::M3LedMatrixEcRGBRow >& row() const;
  inline ::google::protobuf::RepeatedPtrField< ::M3LedMatrixEcRGBRow >* mutable_row();
  inline const ::M3LedMatrixEcRGBRow& row(int index) const;
  inline ::M3LedMatrixEcRGBRow* mutable_row(int index);
  inline ::M3LedMatrixEcRGBRow* add_row();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 enable_;
  ::google::protobuf::RepeatedPtrField< ::M3LedMatrixEcRGBRow > row_;
  friend void  protobuf_AddDesc_led_5fmatrix_5fec_2eproto();
  friend void protobuf_AssignDesc_led_5fmatrix_5fec_2eproto();
  friend void protobuf_ShutdownFile_led_5fmatrix_5fec_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3LedMatrixEcCommand* default_instance_;
};
// -------------------------------------------------------------------

class M3LedMatrixEcParam : public ::google::protobuf::Message {
 public:
  M3LedMatrixEcParam();
  virtual ~M3LedMatrixEcParam();
  
  M3LedMatrixEcParam(const M3LedMatrixEcParam& from);
  
  inline M3LedMatrixEcParam& operator=(const M3LedMatrixEcParam& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const M3LedMatrixEcParam& default_instance();
  void Swap(M3LedMatrixEcParam* other);
  
  // implements Message ----------------------------------------------
  
  M3LedMatrixEcParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const M3LedMatrixEcParam& from);
  void MergeFrom(const M3LedMatrixEcParam& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional double slew_rate = 1;
  inline bool has_slew_rate() const;
  inline void clear_slew_rate();
  static const int kSlewRateFieldNumber = 1;
  inline double slew_rate() const;
  inline void set_slew_rate(double value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double slew_rate_;
  friend void  protobuf_AddDesc_led_5fmatrix_5fec_2eproto();
  friend void protobuf_AssignDesc_led_5fmatrix_5fec_2eproto();
  friend void protobuf_ShutdownFile_led_5fmatrix_5fec_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static M3LedMatrixEcParam* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// M3LedMatrixEcStatus

// optional .M3BaseStatus base = 1;
inline bool M3LedMatrixEcStatus::has_base() const {
  return _has_bit(0);
}
inline void M3LedMatrixEcStatus::clear_base() {
  if (base_ != NULL) base_->::M3BaseStatus::Clear();
  _clear_bit(0);
}
inline const ::M3BaseStatus& M3LedMatrixEcStatus::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::M3BaseStatus* M3LedMatrixEcStatus::mutable_base() {
  _set_bit(0);
  if (base_ == NULL) base_ = new ::M3BaseStatus;
  return base_;
}

// optional .M3EtherCATStatus ethercat = 2;
inline bool M3LedMatrixEcStatus::has_ethercat() const {
  return _has_bit(1);
}
inline void M3LedMatrixEcStatus::clear_ethercat() {
  if (ethercat_ != NULL) ethercat_->::M3EtherCATStatus::Clear();
  _clear_bit(1);
}
inline const ::M3EtherCATStatus& M3LedMatrixEcStatus::ethercat() const {
  return ethercat_ != NULL ? *ethercat_ : *default_instance_->ethercat_;
}
inline ::M3EtherCATStatus* M3LedMatrixEcStatus::mutable_ethercat() {
  _set_bit(1);
  if (ethercat_ == NULL) ethercat_ = new ::M3EtherCATStatus;
  return ethercat_;
}

// optional int32 timestamp = 3;
inline bool M3LedMatrixEcStatus::has_timestamp() const {
  return _has_bit(2);
}
inline void M3LedMatrixEcStatus::clear_timestamp() {
  timestamp_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 M3LedMatrixEcStatus::timestamp() const {
  return timestamp_;
}
inline void M3LedMatrixEcStatus::set_timestamp(::google::protobuf::int32 value) {
  _set_bit(2);
  timestamp_ = value;
}

// optional int32 debug = 4;
inline bool M3LedMatrixEcStatus::has_debug() const {
  return _has_bit(3);
}
inline void M3LedMatrixEcStatus::clear_debug() {
  debug_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 M3LedMatrixEcStatus::debug() const {
  return debug_;
}
inline void M3LedMatrixEcStatus::set_debug(::google::protobuf::int32 value) {
  _set_bit(3);
  debug_ = value;
}

// optional int32 flags = 5;
inline bool M3LedMatrixEcStatus::has_flags() const {
  return _has_bit(4);
}
inline void M3LedMatrixEcStatus::clear_flags() {
  flags_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 M3LedMatrixEcStatus::flags() const {
  return flags_;
}
inline void M3LedMatrixEcStatus::set_flags(::google::protobuf::int32 value) {
  _set_bit(4);
  flags_ = value;
}

// -------------------------------------------------------------------

// M3LedMatrixEcRGB

// optional uint32 r = 1;
inline bool M3LedMatrixEcRGB::has_r() const {
  return _has_bit(0);
}
inline void M3LedMatrixEcRGB::clear_r() {
  r_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 M3LedMatrixEcRGB::r() const {
  return r_;
}
inline void M3LedMatrixEcRGB::set_r(::google::protobuf::uint32 value) {
  _set_bit(0);
  r_ = value;
}

// optional uint32 g = 2;
inline bool M3LedMatrixEcRGB::has_g() const {
  return _has_bit(1);
}
inline void M3LedMatrixEcRGB::clear_g() {
  g_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 M3LedMatrixEcRGB::g() const {
  return g_;
}
inline void M3LedMatrixEcRGB::set_g(::google::protobuf::uint32 value) {
  _set_bit(1);
  g_ = value;
}

// optional uint32 b = 3;
inline bool M3LedMatrixEcRGB::has_b() const {
  return _has_bit(2);
}
inline void M3LedMatrixEcRGB::clear_b() {
  b_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 M3LedMatrixEcRGB::b() const {
  return b_;
}
inline void M3LedMatrixEcRGB::set_b(::google::protobuf::uint32 value) {
  _set_bit(2);
  b_ = value;
}

// -------------------------------------------------------------------

// M3LedMatrixEcRGBRow

// repeated .M3LedMatrixEcRGB column = 1;
inline int M3LedMatrixEcRGBRow::column_size() const {
  return column_.size();
}
inline void M3LedMatrixEcRGBRow::clear_column() {
  column_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::M3LedMatrixEcRGB >&
M3LedMatrixEcRGBRow::column() const {
  return column_;
}
inline ::google::protobuf::RepeatedPtrField< ::M3LedMatrixEcRGB >*
M3LedMatrixEcRGBRow::mutable_column() {
  return &column_;
}
inline const ::M3LedMatrixEcRGB& M3LedMatrixEcRGBRow::column(int index) const {
  return column_.Get(index);
}
inline ::M3LedMatrixEcRGB* M3LedMatrixEcRGBRow::mutable_column(int index) {
  return column_.Mutable(index);
}
inline ::M3LedMatrixEcRGB* M3LedMatrixEcRGBRow::add_column() {
  return column_.Add();
}

// -------------------------------------------------------------------

// M3LedMatrixEcCommand

// optional uint32 enable = 1;
inline bool M3LedMatrixEcCommand::has_enable() const {
  return _has_bit(0);
}
inline void M3LedMatrixEcCommand::clear_enable() {
  enable_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 M3LedMatrixEcCommand::enable() const {
  return enable_;
}
inline void M3LedMatrixEcCommand::set_enable(::google::protobuf::uint32 value) {
  _set_bit(0);
  enable_ = value;
}

// repeated .M3LedMatrixEcRGBRow row = 2;
inline int M3LedMatrixEcCommand::row_size() const {
  return row_.size();
}
inline void M3LedMatrixEcCommand::clear_row() {
  row_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::M3LedMatrixEcRGBRow >&
M3LedMatrixEcCommand::row() const {
  return row_;
}
inline ::google::protobuf::RepeatedPtrField< ::M3LedMatrixEcRGBRow >*
M3LedMatrixEcCommand::mutable_row() {
  return &row_;
}
inline const ::M3LedMatrixEcRGBRow& M3LedMatrixEcCommand::row(int index) const {
  return row_.Get(index);
}
inline ::M3LedMatrixEcRGBRow* M3LedMatrixEcCommand::mutable_row(int index) {
  return row_.Mutable(index);
}
inline ::M3LedMatrixEcRGBRow* M3LedMatrixEcCommand::add_row() {
  return row_.Add();
}

// -------------------------------------------------------------------

// M3LedMatrixEcParam

// optional double slew_rate = 1;
inline bool M3LedMatrixEcParam::has_slew_rate() const {
  return _has_bit(0);
}
inline void M3LedMatrixEcParam::clear_slew_rate() {
  slew_rate_ = 0;
  _clear_bit(0);
}
inline double M3LedMatrixEcParam::slew_rate() const {
  return slew_rate_;
}
inline void M3LedMatrixEcParam::set_slew_rate(double value) {
  _set_bit(0);
  slew_rate_ = value;
}


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_led_5fmatrix_5fec_2eproto__INCLUDED
