// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "async_io.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* M3AsyncIOThreadStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3AsyncIOThreadStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3AsyncIOStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3AsyncIOStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3AsyncIOParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3AsyncIOParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* M3AsyncIOCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  M3AsyncIOCommand_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_async_5fio_2eproto() {
  protobuf_AddDesc_async_5fio_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "async_io.proto");
  GOOGLE_CHECK(file != NULL);
  M3AsyncIOThreadStatus_descriptor_ = file->message_type(0);
  static const int M3AsyncIOThreadStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3AsyncIOThreadStatus, tmp_),
  };
  M3AsyncIOThreadStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3AsyncIOThreadStatus_descriptor_,
      M3AsyncIOThreadStatus::default_instance_,
      M3AsyncIOThreadStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3AsyncIOThreadStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3AsyncIOThreadStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3AsyncIOThreadStatus));
  M3AsyncIOStatus_descriptor_ = file->message_type(1);
  static const int M3AsyncIOStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3AsyncIOStatus, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3AsyncIOStatus, async_),
  };
  M3AsyncIOStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3AsyncIOStatus_descriptor_,
      M3AsyncIOStatus::default_instance_,
      M3AsyncIOStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3AsyncIOStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3AsyncIOStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3AsyncIOStatus));
  M3AsyncIOParam_descriptor_ = file->message_type(2);
  static const int M3AsyncIOParam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3AsyncIOParam, tmp_),
  };
  M3AsyncIOParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3AsyncIOParam_descriptor_,
      M3AsyncIOParam::default_instance_,
      M3AsyncIOParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3AsyncIOParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3AsyncIOParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3AsyncIOParam));
  M3AsyncIOCommand_descriptor_ = file->message_type(3);
  static const int M3AsyncIOCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3AsyncIOCommand, tmp_),
  };
  M3AsyncIOCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      M3AsyncIOCommand_descriptor_,
      M3AsyncIOCommand::default_instance_,
      M3AsyncIOCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3AsyncIOCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(M3AsyncIOCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(M3AsyncIOCommand));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_async_5fio_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3AsyncIOThreadStatus_descriptor_, &M3AsyncIOThreadStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3AsyncIOStatus_descriptor_, &M3AsyncIOStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3AsyncIOParam_descriptor_, &M3AsyncIOParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    M3AsyncIOCommand_descriptor_, &M3AsyncIOCommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_async_5fio_2eproto() {
  delete M3AsyncIOThreadStatus::default_instance_;
  delete M3AsyncIOThreadStatus_reflection_;
  delete M3AsyncIOStatus::default_instance_;
  delete M3AsyncIOStatus_reflection_;
  delete M3AsyncIOParam::default_instance_;
  delete M3AsyncIOParam_reflection_;
  delete M3AsyncIOCommand::default_instance_;
  delete M3AsyncIOCommand_reflection_;
}

void protobuf_AddDesc_async_5fio_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_component_5fbase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016async_io.proto\032\024component_base.proto\"$"
    "\n\025M3AsyncIOThreadStatus\022\013\n\003tmp\030\001 \001(\001\"U\n\017"
    "M3AsyncIOStatus\022\033\n\004base\030\001 \001(\0132\r.M3BaseSt"
    "atus\022%\n\005async\030\002 \001(\0132\026.M3AsyncIOThreadSta"
    "tus\"\035\n\016M3AsyncIOParam\022\013\n\003tmp\030\001 \001(\001\"\037\n\020M3"
    "AsyncIOCommand\022\013\n\003tmp\030\001 \001(\001B\002H\001", 231);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "async_io.proto", &protobuf_RegisterTypes);
  M3AsyncIOThreadStatus::default_instance_ = new M3AsyncIOThreadStatus();
  M3AsyncIOStatus::default_instance_ = new M3AsyncIOStatus();
  M3AsyncIOParam::default_instance_ = new M3AsyncIOParam();
  M3AsyncIOCommand::default_instance_ = new M3AsyncIOCommand();
  M3AsyncIOThreadStatus::default_instance_->InitAsDefaultInstance();
  M3AsyncIOStatus::default_instance_->InitAsDefaultInstance();
  M3AsyncIOParam::default_instance_->InitAsDefaultInstance();
  M3AsyncIOCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_async_5fio_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_async_5fio_2eproto {
  StaticDescriptorInitializer_async_5fio_2eproto() {
    protobuf_AddDesc_async_5fio_2eproto();
  }
} static_descriptor_initializer_async_5fio_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int M3AsyncIOThreadStatus::kTmpFieldNumber;
#endif  // !_MSC_VER

M3AsyncIOThreadStatus::M3AsyncIOThreadStatus() {
  SharedCtor();
}

void M3AsyncIOThreadStatus::InitAsDefaultInstance() {
}

M3AsyncIOThreadStatus::M3AsyncIOThreadStatus(const M3AsyncIOThreadStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3AsyncIOThreadStatus::SharedCtor() {
  _cached_size_ = 0;
  tmp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3AsyncIOThreadStatus::~M3AsyncIOThreadStatus() {
  SharedDtor();
}

void M3AsyncIOThreadStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* M3AsyncIOThreadStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3AsyncIOThreadStatus_descriptor_;
}

const M3AsyncIOThreadStatus& M3AsyncIOThreadStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_async_5fio_2eproto();  return *default_instance_;
}

M3AsyncIOThreadStatus* M3AsyncIOThreadStatus::default_instance_ = NULL;

M3AsyncIOThreadStatus* M3AsyncIOThreadStatus::New() const {
  return new M3AsyncIOThreadStatus;
}

void M3AsyncIOThreadStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tmp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3AsyncIOThreadStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double tmp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &tmp_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3AsyncIOThreadStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3AsyncIOThreadStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional double tmp = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->tmp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3AsyncIOThreadStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double tmp = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->tmp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3AsyncIOThreadStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double tmp = 1;
    if (has_tmp()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3AsyncIOThreadStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3AsyncIOThreadStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3AsyncIOThreadStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3AsyncIOThreadStatus::MergeFrom(const M3AsyncIOThreadStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tmp(from.tmp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3AsyncIOThreadStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3AsyncIOThreadStatus::CopyFrom(const M3AsyncIOThreadStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3AsyncIOThreadStatus::IsInitialized() const {
  
  return true;
}

void M3AsyncIOThreadStatus::Swap(M3AsyncIOThreadStatus* other) {
  if (other != this) {
    std::swap(tmp_, other->tmp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3AsyncIOThreadStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3AsyncIOThreadStatus_descriptor_;
  metadata.reflection = M3AsyncIOThreadStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3AsyncIOStatus::kBaseFieldNumber;
const int M3AsyncIOStatus::kAsyncFieldNumber;
#endif  // !_MSC_VER

M3AsyncIOStatus::M3AsyncIOStatus() {
  SharedCtor();
}

void M3AsyncIOStatus::InitAsDefaultInstance() {
  base_ = const_cast< ::M3BaseStatus*>(&::M3BaseStatus::default_instance());
  async_ = const_cast< ::M3AsyncIOThreadStatus*>(&::M3AsyncIOThreadStatus::default_instance());
}

M3AsyncIOStatus::M3AsyncIOStatus(const M3AsyncIOStatus& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3AsyncIOStatus::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  async_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3AsyncIOStatus::~M3AsyncIOStatus() {
  SharedDtor();
}

void M3AsyncIOStatus::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete async_;
  }
}

const ::google::protobuf::Descriptor* M3AsyncIOStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3AsyncIOStatus_descriptor_;
}

const M3AsyncIOStatus& M3AsyncIOStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_async_5fio_2eproto();  return *default_instance_;
}

M3AsyncIOStatus* M3AsyncIOStatus::default_instance_ = NULL;

M3AsyncIOStatus* M3AsyncIOStatus::New() const {
  return new M3AsyncIOStatus;
}

void M3AsyncIOStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (base_ != NULL) base_->::M3BaseStatus::Clear();
    }
    if (_has_bit(1)) {
      if (async_ != NULL) async_->::M3AsyncIOThreadStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3AsyncIOStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .M3BaseStatus base = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_base()));
        if (input->ExpectTag(18)) goto parse_async;
        break;
      }
      
      // optional .M3AsyncIOThreadStatus async = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_async:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_async()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3AsyncIOStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3AsyncIOStatus::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .M3BaseStatus base = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->base(), output);
  }
  
  // optional .M3AsyncIOThreadStatus async = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->async(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3AsyncIOStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .M3BaseStatus base = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }
  
  // optional .M3AsyncIOThreadStatus async = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->async(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3AsyncIOStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .M3BaseStatus base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }
    
    // optional .M3AsyncIOThreadStatus async = 2;
    if (has_async()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->async());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3AsyncIOStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3AsyncIOStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3AsyncIOStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3AsyncIOStatus::MergeFrom(const M3AsyncIOStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_base()->::M3BaseStatus::MergeFrom(from.base());
    }
    if (from._has_bit(1)) {
      mutable_async()->::M3AsyncIOThreadStatus::MergeFrom(from.async());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3AsyncIOStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3AsyncIOStatus::CopyFrom(const M3AsyncIOStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3AsyncIOStatus::IsInitialized() const {
  
  return true;
}

void M3AsyncIOStatus::Swap(M3AsyncIOStatus* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(async_, other->async_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3AsyncIOStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3AsyncIOStatus_descriptor_;
  metadata.reflection = M3AsyncIOStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3AsyncIOParam::kTmpFieldNumber;
#endif  // !_MSC_VER

M3AsyncIOParam::M3AsyncIOParam() {
  SharedCtor();
}

void M3AsyncIOParam::InitAsDefaultInstance() {
}

M3AsyncIOParam::M3AsyncIOParam(const M3AsyncIOParam& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3AsyncIOParam::SharedCtor() {
  _cached_size_ = 0;
  tmp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3AsyncIOParam::~M3AsyncIOParam() {
  SharedDtor();
}

void M3AsyncIOParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* M3AsyncIOParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3AsyncIOParam_descriptor_;
}

const M3AsyncIOParam& M3AsyncIOParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_async_5fio_2eproto();  return *default_instance_;
}

M3AsyncIOParam* M3AsyncIOParam::default_instance_ = NULL;

M3AsyncIOParam* M3AsyncIOParam::New() const {
  return new M3AsyncIOParam;
}

void M3AsyncIOParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tmp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3AsyncIOParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double tmp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &tmp_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3AsyncIOParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3AsyncIOParam::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional double tmp = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->tmp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3AsyncIOParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double tmp = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->tmp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3AsyncIOParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double tmp = 1;
    if (has_tmp()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3AsyncIOParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3AsyncIOParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3AsyncIOParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3AsyncIOParam::MergeFrom(const M3AsyncIOParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tmp(from.tmp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3AsyncIOParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3AsyncIOParam::CopyFrom(const M3AsyncIOParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3AsyncIOParam::IsInitialized() const {
  
  return true;
}

void M3AsyncIOParam::Swap(M3AsyncIOParam* other) {
  if (other != this) {
    std::swap(tmp_, other->tmp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3AsyncIOParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3AsyncIOParam_descriptor_;
  metadata.reflection = M3AsyncIOParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int M3AsyncIOCommand::kTmpFieldNumber;
#endif  // !_MSC_VER

M3AsyncIOCommand::M3AsyncIOCommand() {
  SharedCtor();
}

void M3AsyncIOCommand::InitAsDefaultInstance() {
}

M3AsyncIOCommand::M3AsyncIOCommand(const M3AsyncIOCommand& from) {
  SharedCtor();
  MergeFrom(from);
}

void M3AsyncIOCommand::SharedCtor() {
  _cached_size_ = 0;
  tmp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

M3AsyncIOCommand::~M3AsyncIOCommand() {
  SharedDtor();
}

void M3AsyncIOCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* M3AsyncIOCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return M3AsyncIOCommand_descriptor_;
}

const M3AsyncIOCommand& M3AsyncIOCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_async_5fio_2eproto();  return *default_instance_;
}

M3AsyncIOCommand* M3AsyncIOCommand::default_instance_ = NULL;

M3AsyncIOCommand* M3AsyncIOCommand::New() const {
  return new M3AsyncIOCommand;
}

void M3AsyncIOCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tmp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool M3AsyncIOCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double tmp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &tmp_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void M3AsyncIOCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    M3AsyncIOCommand::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional double tmp = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->tmp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* M3AsyncIOCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double tmp = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->tmp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int M3AsyncIOCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double tmp = 1;
    if (has_tmp()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void M3AsyncIOCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const M3AsyncIOCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const M3AsyncIOCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void M3AsyncIOCommand::MergeFrom(const M3AsyncIOCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tmp(from.tmp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void M3AsyncIOCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3AsyncIOCommand::CopyFrom(const M3AsyncIOCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3AsyncIOCommand::IsInitialized() const {
  
  return true;
}

void M3AsyncIOCommand::Swap(M3AsyncIOCommand* other) {
  if (other != this) {
    std::swap(tmp_, other->tmp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata M3AsyncIOCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = M3AsyncIOCommand_descriptor_;
  metadata.reflection = M3AsyncIOCommand_reflection_;
  return metadata;
}

